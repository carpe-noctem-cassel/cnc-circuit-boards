
uIPexample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000217e  000021f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000217e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000919  0080011c  0000219a  0000220e  2**0
                  ALLOC
  3 .stab         0000561c  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a11  00000000  00000000  0000782c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_7>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_18>
      4c:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__vector_19>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__vector_30>
      7c:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_31>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e7       	ldi	r30, 0x7E	; 126
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 31       	cpi	r26, 0x1C	; 28
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1a e0       	ldi	r17, 0x0A	; 10
      b4:	ac e1       	ldi	r26, 0x1C	; 28
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 33       	cpi	r26, 0x35	; 53
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a8 00 	call	0x150	; 0x150 <main>
      c6:	0c 94 be 10 	jmp	0x217c	; 0x217c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <initTimer>:
static unsigned char timerCounter, blink;
static char do_can_poll;

void initTimer(void)
{
  TCCR0 = 0x07; // This is big shit. use bitshiftings to explain what there
      ce:	87 e0       	ldi	r24, 0x07	; 7
      d0:	83 bf       	out	0x33, r24	; 51
            // is going on

  // interrupt on overflow
  TIMSK = (1 << TOIE0);
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	87 bf       	out	0x37, r24	; 55
	
  timerCounter = 0;
      d6:	10 92 1c 01 	sts	0x011C, r1
  blink = 0;
      da:	10 92 1d 01 	sts	0x011D, r1
      de:	08 95       	ret

000000e0 <__vector_16>:
#ifdef __IMAGECRAFT__
#pragma interrupt_handler SIG_OVERFLOW0:iv_TIMER0_OVF
#endif

SIGNAL(SIG_OVERFLOW0)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	6f 93       	push	r22
      ec:	7f 93       	push	r23
      ee:	8f 93       	push	r24
      f0:	9f 93       	push	r25
  if(++blink%10==0) PORTF ^= (1 << PF3);
      f2:	80 91 1d 01 	lds	r24, 0x011D
      f6:	8f 5f       	subi	r24, 0xFF	; 255
      f8:	80 93 1d 01 	sts	0x011D, r24
      fc:	6a e0       	ldi	r22, 0x0A	; 10
      fe:	0e 94 9e 10 	call	0x213c	; 0x213c <__udivmodqi4>
     102:	99 23       	and	r25, r25
     104:	31 f4       	brne	.+12     	; 0x112 <__vector_16+0x32>
     106:	80 91 62 00 	lds	r24, 0x0062
     10a:	98 e0       	ldi	r25, 0x08	; 8
     10c:	89 27       	eor	r24, r25
     10e:	80 93 62 00 	sts	0x0062, r24
  timerCounter++;
     112:	80 91 1c 01 	lds	r24, 0x011C
     116:	8f 5f       	subi	r24, 0xFF	; 255
     118:	80 93 1c 01 	sts	0x011C, r24
     11c:	9f 91       	pop	r25
     11e:	8f 91       	pop	r24
     120:	7f 91       	pop	r23
     122:	6f 91       	pop	r22
     124:	0f 90       	pop	r0
     126:	0f be       	out	0x3f, r0	; 63
     128:	0f 90       	pop	r0
     12a:	1f 90       	pop	r1
     12c:	18 95       	reti

0000012e <__vector_7>:
}


SIGNAL (INT6_vect)
{ 
     12e:	1f 92       	push	r1
     130:	0f 92       	push	r0
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	0f 92       	push	r0
     136:	11 24       	eor	r1, r1
     138:	8f 93       	push	r24
	++do_can_poll;
     13a:	80 91 1e 01 	lds	r24, 0x011E
     13e:	8f 5f       	subi	r24, 0xFF	; 255
     140:	80 93 1e 01 	sts	0x011E, r24
     144:	8f 91       	pop	r24
     146:	0f 90       	pop	r0
     148:	0f be       	out	0x3f, r0	; 63
     14a:	0f 90       	pop	r0
     14c:	1f 90       	pop	r1
     14e:	18 95       	reti

00000150 <main>:
*  Main Control Loop
*
*  
*****************************************************************************/
int main(void)
{
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d0 e1       	ldi	r29, 0x10	; 16
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61
  char* init_buf = "init";

  //for (int i=0;i<10;++i) delay_ms(50);
  
  // init NIC device driver
  nic_init();
     158:	0e 94 5d 06 	call	0xcba	; 0xcba <nic_init>

  DDRF = (1<<PF3);
     15c:	88 e0       	ldi	r24, 0x08	; 8
     15e:	80 93 61 00 	sts	0x0061, r24
  PORTF |= (1 << PF3);
     162:	80 91 62 00 	lds	r24, 0x0062
     166:	88 60       	ori	r24, 0x08	; 8
     168:	80 93 62 00 	sts	0x0062, r24

  // init uIP
  uip_init();
     16c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <uip_init>

  // init ARP cache
  uip_arp_init();
     170:	0e 94 88 09 	call	0x1310	; 0x1310 <uip_arp_init>

   // init app
  connection_init();
     174:	0e 94 fd 02 	call	0x5fa	; 0x5fa <connection_init>
static unsigned char timerCounter, blink;
static char do_can_poll;

void initTimer(void)
{
  TCCR0 = 0x07; // This is big shit. use bitshiftings to explain what there
     178:	87 e0       	ldi	r24, 0x07	; 7
     17a:	83 bf       	out	0x33, r24	; 51
            // is going on

  // interrupt on overflow
  TIMSK = (1 << TOIE0);
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	87 bf       	out	0x37, r24	; 55
	
  timerCounter = 0;
     180:	10 92 1c 01 	sts	0x011C, r1
  blink = 0;
     184:	10 92 1d 01 	sts	0x011D, r1
   // init app
  connection_init();

  // init periodic timer
  initTimer();
  sei();
     188:	78 94       	sei

  //set can interupt
  do_can_poll = 5;
     18a:	85 e0       	ldi	r24, 0x05	; 5
     18c:	80 93 1e 01 	sts	0x011E, r24
  EICRB |= (0<<ISC61) | (1<<ISC60);
     190:	8a b7       	in	r24, 0x3a	; 58
     192:	80 61       	ori	r24, 0x10	; 16
     194:	8a bf       	out	0x3a, r24	; 58
  EIMSK |= (1<<INT6);
     196:	89 b7       	in	r24, 0x39	; 57
     198:	80 64       	ori	r24, 0x40	; 64
     19a:	89 bf       	out	0x39, r24	; 57

  sei();
     19c:	78 94       	sei

  // init uart
  uart1_init(UART_BAUD_SELECT(UART_BAUD_RATE_KICKER, F_CPU));
     19e:	80 e1       	ldi	r24, 0x10	; 16
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <uart1_init>
  uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
     1a6:	80 e1       	ldi	r24, 0x10	; 16
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 be 0c 	call	0x197c	; 0x197c <uart_init>
     1ae:	ff 24       	eor	r15, r15
     1b0:	c0 e0       	ldi	r28, 0x00	; 0
     1b2:	d1 e0       	ldi	r29, 0x01	; 1

  while(1) {

	  //poll data from uart
	  poll_uart0();
     1b4:	0e 94 8c 01 	call	0x318	; 0x318 <poll_uart0>
	  poll_uart1();
     1b8:	0e 94 4a 01 	call	0x294	; 0x294 <poll_uart1>

	  //poll can
	  if (do_can_poll-- > 0) {
     1bc:	80 91 1e 01 	lds	r24, 0x011E
     1c0:	81 50       	subi	r24, 0x01	; 1
     1c2:	80 93 1e 01 	sts	0x011E, r24
     1c6:	8f 3f       	cpi	r24, 0xFF	; 255
     1c8:	11 f0       	breq	.+4      	; 0x1ce <main+0x7e>
		  poll_can();
     1ca:	0e 94 f5 01 	call	0x3ea	; 0x3ea <poll_can>
	  }

	  // look for a packet
	  uip_len = nic_poll();
     1ce:	0e 94 13 06 	call	0xc26	; 0xc26 <nic_poll>
     1d2:	90 93 25 04 	sts	0x0425, r25
     1d6:	80 93 24 04 	sts	0x0424, r24

	  if(uip_len == 0) {
     1da:	80 91 24 04 	lds	r24, 0x0424
     1de:	90 91 25 04 	lds	r25, 0x0425
     1e2:	89 2b       	or	r24, r25
     1e4:	21 f5       	brne	.+72     	; 0x22e <main+0xde>
		  if(send_init && timerCounter%10==0) {
     1e6:	80 91 01 04 	lds	r24, 0x0401
     1ea:	88 23       	and	r24, r24
     1ec:	a1 f0       	breq	.+40     	; 0x216 <main+0xc6>
     1ee:	80 91 1c 01 	lds	r24, 0x011C
     1f2:	6a e0       	ldi	r22, 0x0A	; 10
     1f4:	0e 94 9e 10 	call	0x213c	; 0x213c <__udivmodqi4>
     1f8:	99 23       	and	r25, r25
     1fa:	69 f4       	brne	.+26     	; 0x216 <main+0xc6>
			  //send "init" on resart
			  uip_udp_sendto(init_buf, 4, eth2can_status);
     1fc:	40 91 02 04 	lds	r20, 0x0402
     200:	50 91 03 04 	lds	r21, 0x0403
     204:	64 e0       	ldi	r22, 0x04	; 4
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	ce 01       	movw	r24, r28
     20a:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
			  uip_arp_out();
     20e:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
			  nic_send();
     212:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
		  }
		  
		  // if timed out, call periodic function for each connection
		  if(timerCounter > TIMERCOUNTER_PERIODIC_TIMEOUT) {
     216:	80 91 1c 01 	lds	r24, 0x011C
     21a:	8f 31       	cpi	r24, 0x1F	; 31
     21c:	58 f2       	brcs	.-106    	; 0x1b4 <main+0x64>
//				  }
//			  }
#endif /* UIP_UDP */

			  /* Call the ARP timer function every 10 seconds. */
			  if(++arptimer == 200)
     21e:	f3 94       	inc	r15
     220:	88 ec       	ldi	r24, 0xC8	; 200
     222:	f8 16       	cp	r15, r24
     224:	39 f6       	brne	.-114    	; 0x1b4 <main+0x64>
			  {	
				  uip_arp_timer();
     226:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <uip_arp_timer>
     22a:	ff 24       	eor	r15, r15
     22c:	c3 cf       	rjmp	.-122    	; 0x1b4 <main+0x64>
		  }
	  }
	  else  // packet received
	  {
		  // process an IP packet
		  if(BUF->type == htons(UIP_ETHTYPE_IP))
     22e:	00 91 41 04 	lds	r16, 0x0441
     232:	10 91 42 04 	lds	r17, 0x0442
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	98 e0       	ldi	r25, 0x08	; 8
     23a:	0e 94 1b 07 	call	0xe36	; 0xe36 <htons>
     23e:	08 17       	cp	r16, r24
     240:	19 07       	cpc	r17, r25
     242:	79 f4       	brne	.+30     	; 0x262 <main+0x112>
		  {
			  // add the source to the ARP cache
			  // also correctly set the ethernet packet length before processing
			  uip_arp_ipin();
     244:	0e 94 b9 0b 	call	0x1772	; 0x1772 <uip_arp_ipin>
			  uip_input();
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	0e 94 23 07 	call	0xe46	; 0xe46 <uip_process>

			  // transmit a packet, if one is ready
			  if(uip_len > 0)
     24e:	80 91 24 04 	lds	r24, 0x0424
     252:	90 91 25 04 	lds	r25, 0x0425
     256:	89 2b       	or	r24, r25
     258:	09 f4       	brne	.+2      	; 0x25c <main+0x10c>
     25a:	ac cf       	rjmp	.-168    	; 0x1b4 <main+0x64>
			  {
				  uip_arp_out();
     25c:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
     260:	15 c0       	rjmp	.+42     	; 0x28c <main+0x13c>
				  nic_send();
			  }
		  }
		  // process an ARP packet
		  else if(BUF->type == htons(UIP_ETHTYPE_ARP))
     262:	00 91 41 04 	lds	r16, 0x0441
     266:	10 91 42 04 	lds	r17, 0x0442
     26a:	86 e0       	ldi	r24, 0x06	; 6
     26c:	98 e0       	ldi	r25, 0x08	; 8
     26e:	0e 94 1b 07 	call	0xe36	; 0xe36 <htons>
     272:	08 17       	cp	r16, r24
     274:	19 07       	cpc	r17, r25
     276:	09 f0       	breq	.+2      	; 0x27a <main+0x12a>
     278:	9d cf       	rjmp	.-198    	; 0x1b4 <main+0x64>
		  {
			  uip_arp_arpin();
     27a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <uip_arp_arpin>

			  // transmit a packet, if one is ready
			  if(uip_len > 0)
     27e:	80 91 24 04 	lds	r24, 0x0424
     282:	90 91 25 04 	lds	r25, 0x0425
     286:	89 2b       	or	r24, r25
     288:	09 f4       	brne	.+2      	; 0x28c <main+0x13c>
     28a:	94 cf       	rjmp	.-216    	; 0x1b4 <main+0x64>
				  nic_send();
     28c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
     290:	91 cf       	rjmp	.-222    	; 0x1b4 <main+0x64>

00000292 <tcp_connection_app>:

}


void tcp_connection_app(void)
{
     292:	08 95       	ret

00000294 <poll_uart1>:
	unsigned int c;
	static uint8_t i = 0;
	static uint8_t len = 0;
	static char overflow = 0;

	c = uart1_getc();
     294:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <uart1_getc>

	if (c & UART_NO_DATA) {
     298:	90 fd       	sbrc	r25, 0
     29a:	3d c0       	rjmp	.+122    	; 0x316 <poll_uart1+0x82>
		return;
	}

	// check for error
	if (c & UART_FRAME_ERROR) {
     29c:	93 fd       	sbrc	r25, 3
     29e:	3b c0       	rjmp	.+118    	; 0x316 <poll_uart1+0x82>
		return;
	}
	if (c & UART_OVERRUN_ERROR) {
     2a0:	92 fd       	sbrc	r25, 2
     2a2:	39 c0       	rjmp	.+114    	; 0x316 <poll_uart1+0x82>
		return;
	}
	if (c & UART_BUFFER_OVERFLOW) {
     2a4:	91 fd       	sbrc	r25, 1
     2a6:	37 c0       	rjmp	.+110    	; 0x316 <poll_uart1+0x82>
	}

	// echo back the received char

	// avoid inserting NULL-Byte in strings
	if (c == 0x00)
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	a9 f1       	breq	.+106    	; 0x316 <poll_uart1+0x82>
		return;

// hier \n bzw \r rausnehmen daimt keine leerpakete kommen
	if (c == '\n' || c == '\r') {
     2ac:	8a 30       	cpi	r24, 0x0A	; 10
     2ae:	91 05       	cpc	r25, r1
     2b0:	19 f0       	breq	.+6      	; 0x2b8 <poll_uart1+0x24>
     2b2:	8d 30       	cpi	r24, 0x0D	; 13
     2b4:	91 05       	cpc	r25, r1
     2b6:	f9 f4       	brne	.+62     	; 0x2f6 <poll_uart1+0x62>
		if (overflow) {
     2b8:	80 91 22 01 	lds	r24, 0x0122
     2bc:	88 23       	and	r24, r24
     2be:	19 f0       	breq	.+6      	; 0x2c6 <poll_uart1+0x32>
			overflow = 0;
     2c0:	10 92 22 01 	sts	0x0122, r1
     2c4:	15 c0       	rjmp	.+42     	; 0x2f0 <poll_uart1+0x5c>
			len = 0;
			return;
		}
		if (len == 0)
     2c6:	60 91 23 01 	lds	r22, 0x0123
     2ca:	66 23       	and	r22, r22
     2cc:	21 f1       	breq	.+72     	; 0x316 <poll_uart1+0x82>
			return;
		// add trailing NULL-byte
		recbuf[len] = 0x00;
     2ce:	77 27       	eor	r23, r23
     2d0:	fb 01       	movw	r30, r22
     2d2:	ec 5d       	subi	r30, 0xDC	; 220
     2d4:	fe 4f       	sbci	r31, 0xFE	; 254
     2d6:	10 82       	st	Z, r1
		uip_udp_sendto(recbuf, len, eth2can_uart1);
     2d8:	40 91 04 04 	lds	r20, 0x0404
     2dc:	50 91 05 04 	lds	r21, 0x0405
     2e0:	84 e2       	ldi	r24, 0x24	; 36
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
		uip_arp_out();
     2e8:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
		nic_send();
     2ec:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
		len = 0;
     2f0:	10 92 23 01 	sts	0x0123, r1
     2f4:	08 95       	ret
	}
	else {
		if (len >= BUFFERLENGTH-1) {
     2f6:	20 91 23 01 	lds	r18, 0x0123
     2fa:	2f 3f       	cpi	r18, 0xFF	; 255
     2fc:	21 f4       	brne	.+8      	; 0x306 <poll_uart1+0x72>
			overflow = 1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	80 93 22 01 	sts	0x0122, r24
     304:	08 95       	ret
			return;
		}
		else {
			recbuf[len++] = c;
     306:	e2 2f       	mov	r30, r18
     308:	ff 27       	eor	r31, r31
     30a:	ec 5d       	subi	r30, 0xDC	; 220
     30c:	fe 4f       	sbci	r31, 0xFE	; 254
     30e:	80 83       	st	Z, r24
     310:	2f 5f       	subi	r18, 0xFF	; 255
     312:	20 93 23 01 	sts	0x0123, r18
     316:	08 95       	ret

00000318 <poll_uart0>:
                uip_arp_out();
                nic_send();
	}
}

void poll_uart0(void) {
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
	unsigned int c;
	static uint8_t i = 0;
	static uint8_t len = 0;
	static char overflow = 0;

	c = uart_getc();
     31c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <uart_getc>
     320:	ec 01       	movw	r28, r24
                     //   uip_udp_sendto(c, 1, eth2can_uart0);
                       // uip_arp_out();
                        //nic_send();

	
	if (uart0_status == 0) { // auf daten warten
     322:	80 91 20 01 	lds	r24, 0x0120
     326:	90 91 21 01 	lds	r25, 0x0121
     32a:	89 2b       	or	r24, r25
     32c:	a1 f4       	brne	.+40     	; 0x356 <poll_uart0+0x3e>
		if (c == 0x7B && !uart0_quote) {
     32e:	cb 37       	cpi	r28, 0x7B	; 123
     330:	d1 05       	cpc	r29, r1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <poll_uart0+0x90>
     334:	80 91 1f 01 	lds	r24, 0x011F
     338:	88 23       	and	r24, r24
     33a:	b1 f5       	brne	.+108    	; 0x3a8 <poll_uart0+0x90>
			uart0_status = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	90 93 21 01 	sts	0x0121, r25
     344:	80 93 20 01 	sts	0x0120, r24
			len = 0;
			recbuf[len++] = c;
     348:	8b e7       	ldi	r24, 0x7B	; 123
     34a:	80 93 25 02 	sts	0x0225, r24
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 24 02 	sts	0x0224, r24
     354:	29 c0       	rjmp	.+82     	; 0x3a8 <poll_uart0+0x90>
		}
//	} else if (uart0_status == 1) { // daten sammeln
	} else {
		recbuf[len++] = c;
     356:	80 91 24 02 	lds	r24, 0x0224
     35a:	e8 2f       	mov	r30, r24
     35c:	ff 27       	eor	r31, r31
     35e:	eb 5d       	subi	r30, 0xDB	; 219
     360:	fd 4f       	sbci	r31, 0xFD	; 253
     362:	c0 83       	st	Z, r28
     364:	68 2f       	mov	r22, r24
     366:	6f 5f       	subi	r22, 0xFF	; 255
     368:	60 93 24 02 	sts	0x0224, r22
		if (c == 0x7D && !uart0_quote) {
     36c:	cd 37       	cpi	r28, 0x7D	; 125
     36e:	d1 05       	cpc	r29, r1
     370:	d9 f4       	brne	.+54     	; 0x3a8 <poll_uart0+0x90>
     372:	80 91 1f 01 	lds	r24, 0x011F
     376:	88 23       	and	r24, r24
     378:	b9 f4       	brne	.+46     	; 0x3a8 <poll_uart0+0x90>
			recbuf[len] = 0x00;
     37a:	77 27       	eor	r23, r23
     37c:	fb 01       	movw	r30, r22
     37e:	eb 5d       	subi	r30, 0xDB	; 219
     380:	fd 4f       	sbci	r31, 0xFD	; 253
     382:	10 82       	st	Z, r1
			uip_udp_sendto(recbuf, len, eth2can_uart0);
     384:	40 91 06 04 	lds	r20, 0x0406
     388:	50 91 07 04 	lds	r21, 0x0407
     38c:	85 e2       	ldi	r24, 0x25	; 37
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
			uip_arp_out();
     394:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
			nic_send();
     398:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
			len = 0;
     39c:	10 92 24 02 	sts	0x0224, r1
			uart0_status = 0;
     3a0:	10 92 21 01 	sts	0x0121, r1
     3a4:	10 92 20 01 	sts	0x0120, r1
		}
	} 

	if (uart0_quote) uart0_quote = false;
     3a8:	80 91 1f 01 	lds	r24, 0x011F
     3ac:	88 23       	and	r24, r24
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <poll_uart0+0x9e>
     3b0:	10 92 1f 01 	sts	0x011F, r1
     3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <poll_uart0+0xaa>
	else if (c == 0x5C) uart0_quote = true;
     3b6:	cc 35       	cpi	r28, 0x5C	; 92
     3b8:	d1 05       	cpc	r29, r1
     3ba:	19 f4       	brne	.+6      	; 0x3c2 <poll_uart0+0xaa>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 1f 01 	sts	0x011F, r24

	if (len > 0)  {
     3c2:	60 91 24 02 	lds	r22, 0x0224
     3c6:	66 23       	and	r22, r22
     3c8:	69 f0       	breq	.+26     	; 0x3e4 <poll_uart0+0xcc>
		uip_udp_sendto(recbuf, len, eth2can_uart0);
     3ca:	40 91 06 04 	lds	r20, 0x0406
     3ce:	50 91 07 04 	lds	r21, 0x0407
     3d2:	77 27       	eor	r23, r23
     3d4:	85 e2       	ldi	r24, 0x25	; 37
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
		uip_arp_out();
     3dc:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
		nic_send();
     3e0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <poll_can>:
	}
}


void poll_can(void) {
	if(mcp2515_check_message()) {
     3ea:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <mcp2515_check_message>
     3ee:	88 23       	and	r24, r24
     3f0:	91 f0       	breq	.+36     	; 0x416 <poll_can+0x2c>
		mcp2515_get_extmessage(&m);
     3f2:	87 e1       	ldi	r24, 0x17	; 23
     3f4:	94 e0       	ldi	r25, 0x04	; 4
     3f6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <mcp2515_get_extmessage>
		uip_udp_sendto((char*)&m, 15, eth2can_can);
     3fa:	40 91 08 04 	lds	r20, 0x0408
     3fe:	50 91 09 04 	lds	r21, 0x0409
     402:	6f e0       	ldi	r22, 0x0F	; 15
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	87 e1       	ldi	r24, 0x17	; 23
     408:	94 e0       	ldi	r25, 0x04	; 4
     40a:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
                uip_arp_out();
     40e:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
                nic_send();
     412:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
     416:	08 95       	ret

00000418 <udp_connection_app>:

/*
 * Bearbeitet Pakete der 3 UDP Verbindungen
 */
void udp_connection_app(void) {
	if(uip_newdata() || uip_rexmit())
     418:	80 91 2c 04 	lds	r24, 0x042C
     41c:	81 fd       	sbrc	r24, 1
     41e:	04 c0       	rjmp	.+8      	; 0x428 <udp_connection_app+0x10>
     420:	80 91 2c 04 	lds	r24, 0x042C
     424:	82 ff       	sbrs	r24, 2
     426:	e8 c0       	rjmp	.+464    	; 0x5f8 <udp_connection_app+0x1e0>
	{
		// Daten der UART0 Verbindung einfach auf die UART Rausschreiben
		if(uip_udp_conn==eth2can_uart0) {
     428:	20 91 2d 04 	lds	r18, 0x042D
     42c:	30 91 2e 04 	lds	r19, 0x042E
     430:	80 91 06 04 	lds	r24, 0x0406
     434:	90 91 07 04 	lds	r25, 0x0407
     438:	28 17       	cp	r18, r24
     43a:	39 07       	cpc	r19, r25
     43c:	51 f4       	brne	.+20     	; 0x452 <udp_connection_app+0x3a>
			bla = (char*)uip_appdata;
     43e:	80 91 2f 04 	lds	r24, 0x042F
     442:	90 91 30 04 	lds	r25, 0x0430
     446:	90 93 16 04 	sts	0x0416, r25
     44a:	80 93 15 04 	sts	0x0415, r24
			uart_puts(bla);
     44e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <uart_puts>
		}
		// Daten der UART1 Verbindung einfach auf die UART Rausschreiben
		if(uip_udp_conn==eth2can_uart1) {
     452:	40 91 2d 04 	lds	r20, 0x042D
     456:	50 91 2e 04 	lds	r21, 0x042E
     45a:	80 91 04 04 	lds	r24, 0x0404
     45e:	90 91 05 04 	lds	r25, 0x0405
     462:	48 17       	cp	r20, r24
     464:	59 07       	cpc	r21, r25
     466:	59 f4       	brne	.+22     	; 0x47e <udp_connection_app+0x66>
			bla = (char*)uip_appdata;
     468:	80 91 2f 04 	lds	r24, 0x042F
     46c:	90 91 30 04 	lds	r25, 0x0430
     470:	90 93 16 04 	sts	0x0416, r25
     474:	80 93 15 04 	sts	0x0415, r24
			uart1_puts(bla);
     478:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <uart1_puts>
     47c:	08 95       	ret
		}
		// Can Daten in Messagestruktur Paken und auf Can Rausschreiben.
		else if(uip_udp_conn==eth2can_can) {
     47e:	80 91 08 04 	lds	r24, 0x0408
     482:	90 91 09 04 	lds	r25, 0x0409
     486:	48 17       	cp	r20, r24
     488:	59 07       	cpc	r21, r25
     48a:	59 f4       	brne	.+22     	; 0x4a2 <udp_connection_app+0x8a>
			message = (tExtendedCAN*)uip_appdata;
     48c:	80 91 2f 04 	lds	r24, 0x042F
     490:	90 91 30 04 	lds	r25, 0x0430
     494:	90 93 0d 04 	sts	0x040D, r25
     498:	80 93 0c 04 	sts	0x040C, r24
			mcp2515_send_extmessage(message);
     49c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <mcp2515_send_extmessage>
     4a0:	08 95       	ret
		}
		// Status Protokoll
		else if(uip_udp_conn==eth2can_status) {
     4a2:	80 91 02 04 	lds	r24, 0x0402
     4a6:	90 91 03 04 	lds	r25, 0x0403
     4aa:	48 17       	cp	r20, r24
     4ac:	59 07       	cpc	r21, r25
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <udp_connection_app+0x9a>
     4b0:	a3 c0       	rjmp	.+326    	; 0x5f8 <udp_connection_app+0x1e0>
			switch(uip_appdata[0]) { 
     4b2:	e0 91 2f 04 	lds	r30, 0x042F
     4b6:	f0 91 30 04 	lds	r31, 0x0430
     4ba:	80 81       	ld	r24, Z
     4bc:	8d 34       	cpi	r24, 0x4D	; 77
     4be:	09 f4       	brne	.+2      	; 0x4c2 <udp_connection_app+0xaa>
     4c0:	61 c0       	rjmp	.+194    	; 0x584 <udp_connection_app+0x16c>
     4c2:	8e 34       	cpi	r24, 0x4E	; 78
     4c4:	78 f4       	brcc	.+30     	; 0x4e4 <udp_connection_app+0xcc>
     4c6:	83 34       	cpi	r24, 0x43	; 67
     4c8:	f9 f0       	breq	.+62     	; 0x508 <udp_connection_app+0xf0>
     4ca:	84 34       	cpi	r24, 0x44	; 68
     4cc:	20 f4       	brcc	.+8      	; 0x4d6 <udp_connection_app+0xbe>
     4ce:	81 34       	cpi	r24, 0x41	; 65
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <udp_connection_app+0xbc>
     4d2:	92 c0       	rjmp	.+292    	; 0x5f8 <udp_connection_app+0x1e0>
     4d4:	31 c0       	rjmp	.+98     	; 0x538 <udp_connection_app+0x120>
     4d6:	85 34       	cpi	r24, 0x45	; 69
     4d8:	09 f4       	brne	.+2      	; 0x4dc <udp_connection_app+0xc4>
     4da:	72 c0       	rjmp	.+228    	; 0x5c0 <udp_connection_app+0x1a8>
     4dc:	89 34       	cpi	r24, 0x49	; 73
     4de:	09 f0       	breq	.+2      	; 0x4e2 <udp_connection_app+0xca>
     4e0:	8b c0       	rjmp	.+278    	; 0x5f8 <udp_connection_app+0x1e0>
     4e2:	48 c0       	rjmp	.+144    	; 0x574 <udp_connection_app+0x15c>
     4e4:	82 35       	cpi	r24, 0x52	; 82
     4e6:	d9 f1       	breq	.+118    	; 0x55e <udp_connection_app+0x146>
     4e8:	83 35       	cpi	r24, 0x53	; 83
     4ea:	20 f4       	brcc	.+8      	; 0x4f4 <udp_connection_app+0xdc>
     4ec:	80 35       	cpi	r24, 0x50	; 80
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <udp_connection_app+0xda>
     4f0:	83 c0       	rjmp	.+262    	; 0x5f8 <udp_connection_app+0x1e0>
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <udp_connection_app+0xe8>
     4f4:	83 35       	cpi	r24, 0x53	; 83
     4f6:	81 f1       	breq	.+96     	; 0x558 <udp_connection_app+0x140>
     4f8:	88 35       	cpi	r24, 0x58	; 88
     4fa:	09 f0       	breq	.+2      	; 0x4fe <udp_connection_app+0xe6>
     4fc:	7d c0       	rjmp	.+250    	; 0x5f8 <udp_connection_app+0x1e0>
     4fe:	7a c0       	rjmp	.+244    	; 0x5f4 <udp_connection_app+0x1dc>
				case 'P':
					uip_appdata[0]++;
     500:	80 81       	ld	r24, Z
     502:	8f 5f       	subi	r24, 0xFF	; 255
     504:	80 83       	st	Z, r24
     506:	1d c0       	rjmp	.+58     	; 0x542 <udp_connection_app+0x12a>
					uip_udp_sendto(uip_appdata, 1, eth2can_status);
					uip_arp_out();
					nic_send();
					return;
				case 'C':
					status[0] = mcp2515_read_register(EFLG);
     508:	8d e2       	ldi	r24, 0x2D	; 45
     50a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <mcp2515_read_register>
     50e:	80 93 25 03 	sts	0x0325, r24
					status[1] = mcp2515_read_register(TEC);
     512:	8c e1       	ldi	r24, 0x1C	; 28
     514:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <mcp2515_read_register>
     518:	80 93 26 03 	sts	0x0326, r24
					status[2] = mcp2515_read_register(REC);
     51c:	8d e1       	ldi	r24, 0x1D	; 29
     51e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <mcp2515_read_register>
     522:	80 93 27 03 	sts	0x0327, r24
					status[3] = 0x00;
     526:	10 92 28 03 	sts	0x0328, r1
					uip_udp_sendto(status, 4, eth2can_status);
     52a:	40 91 02 04 	lds	r20, 0x0402
     52e:	50 91 03 04 	lds	r21, 0x0403
     532:	64 e0       	ldi	r22, 0x04	; 4
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	3b c0       	rjmp	.+118    	; 0x5ae <udp_connection_app+0x196>
					uip_arp_out();
					nic_send();
					return;
				case 'A':
					uip_appdata[0]++;
     538:	80 81       	ld	r24, Z
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 83       	st	Z, r24
					uip_arp_init();
     53e:	0e 94 88 09 	call	0x1310	; 0x1310 <uip_arp_init>
					uip_udp_sendto(uip_appdata, 1, eth2can_status);
     542:	40 91 02 04 	lds	r20, 0x0402
     546:	50 91 03 04 	lds	r21, 0x0403
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 91 2f 04 	lds	r24, 0x042F
     552:	90 91 30 04 	lds	r25, 0x0430
     556:	2d c0       	rjmp	.+90     	; 0x5b2 <udp_connection_app+0x19a>
					uip_arp_out();
					nic_send();
					return;
     558:	e0 e0       	ldi	r30, 0x00	; 0
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	09 94       	ijmp
				case 'S':
					goto *((void**) 0);
					return;
				case 'R':
					cli();
     55e:	f8 94       	cli
					wdt_enable (WDTO_15MS);
     560:	88 e1       	ldi	r24, 0x18	; 24
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	28 e0       	ldi	r18, 0x08	; 8
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	a8 95       	wdr
     56c:	81 bd       	out	0x21, r24	; 33
     56e:	0f be       	out	0x3f, r0	; 63
     570:	21 bd       	out	0x21, r18	; 33
     572:	ff cf       	rjmp	.-2      	; 0x572 <udp_connection_app+0x15a>
					while (1);
					return;
				case 'I':
					mcp2515_init();
     574:	0e 94 42 10 	call	0x2084	; 0x2084 <mcp2515_init>
					mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), 0);
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	60 ee       	ldi	r22, 0xE0	; 224
     57c:	8f e0       	ldi	r24, 0x0F	; 15
     57e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <mcp2515_bit_modify>
     582:	08 95       	ret
					break;
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0b c0       	rjmp	.+22     	; 0x59e <udp_connection_app+0x186>
				case 'M':
					for(c=0;c<6;c++)
					{
						status[c] = eeprom_read_byte(AT_EEPROM_MAC_ADDRESS+c);
     588:	e9 2f       	mov	r30, r25
     58a:	ff 27       	eor	r31, r31
     58c:	df 01       	movw	r26, r30
     58e:	12 96       	adiw	r26, 0x02	; 2

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
     590:	0e 94 aa 10 	call	0x2154	; 0x2154 <__eeprom_read_byte_1C1D1E>
     594:	80 2d       	mov	r24, r0
     596:	eb 5d       	subi	r30, 0xDB	; 219
     598:	fc 4f       	sbci	r31, 0xFC	; 252
     59a:	80 83       	st	Z, r24
     59c:	9f 5f       	subi	r25, 0xFF	; 255
				case 'I':
					mcp2515_init();
					mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), 0);
					break;
				case 'M':
					for(c=0;c<6;c++)
     59e:	96 30       	cpi	r25, 0x06	; 6
     5a0:	98 f3       	brcs	.-26     	; 0x588 <udp_connection_app+0x170>
     5a2:	90 93 14 04 	sts	0x0414, r25
					{
						status[c] = eeprom_read_byte(AT_EEPROM_MAC_ADDRESS+c);
					}
					status[6]=0x00;
     5a6:	10 92 2b 03 	sts	0x032B, r1
					uip_udp_sendto(status, 6, eth2can_status);
     5aa:	66 e0       	ldi	r22, 0x06	; 6
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	85 e2       	ldi	r24, 0x25	; 37
     5b0:	93 e0       	ldi	r25, 0x03	; 3
     5b2:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
					uip_arp_out();
     5b6:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
					nic_send();
     5ba:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>
     5be:	08 95       	ret
					break;
				case 'E':
					for(c=0;c<6;c++) eeprom_write_byte(AT_EEPROM_MAC_ADDRESS+c, uip_appdata[c+1]);
     5c0:	10 92 14 04 	sts	0x0414, r1
     5c4:	12 c0       	rjmp	.+36     	; 0x5ea <udp_connection_app+0x1d2>
     5c6:	e0 91 2f 04 	lds	r30, 0x042F
     5ca:	f0 91 30 04 	lds	r31, 0x0430
     5ce:	31 96       	adiw	r30, 0x01	; 1
     5d0:	bb 27       	eor	r27, r27
     5d2:	ea 0f       	add	r30, r26
     5d4:	fb 1f       	adc	r31, r27
     5d6:	80 81       	ld	r24, Z
     5d8:	12 96       	adiw	r26, 0x02	; 2
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
     5da:	08 2e       	mov	r0, r24
     5dc:	0e 94 b2 10 	call	0x2164	; 0x2164 <__eeprom_write_byte_1C1D1E>
     5e0:	80 91 14 04 	lds	r24, 0x0414
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	80 93 14 04 	sts	0x0414, r24
     5ea:	a0 91 14 04 	lds	r26, 0x0414
     5ee:	a6 30       	cpi	r26, 0x06	; 6
     5f0:	50 f3       	brcs	.-44     	; 0x5c6 <udp_connection_app+0x1ae>
     5f2:	08 95       	ret
					break;
				case 'X':
					send_init = 0;
     5f4:	10 92 01 04 	sts	0x0401, r1
     5f8:	08 95       	ret

000005fa <connection_init>:
static char canbuf[20];

void poll_uart1(void);

void connection_init(void)
{
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	22 97       	sbiw	r28, 0x02	; 2
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
	int j,i;	
	u16_t ipaddr;
	char* init_buf = "init";

	
        uip_ipaddr(&ipaddr, 192,168,0,5);
     612:	80 ec       	ldi	r24, 0xC0	; 192
     614:	98 ea       	ldi	r25, 0xA8	; 168
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	89 83       	std	Y+1, r24	; 0x01
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	95 e0       	ldi	r25, 0x05	; 5
     61e:	9c 83       	std	Y+4, r25	; 0x04
     620:	8b 83       	std	Y+3, r24	; 0x03
	
	//open ports
        eth2can_status = uip_udp_listen(&ipaddr,10000);
     622:	60 e1       	ldi	r22, 0x10	; 16
     624:	77 e2       	ldi	r23, 0x27	; 39
     626:	8e 01       	movw	r16, r28
     628:	0f 5f       	subi	r16, 0xFF	; 255
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
     62c:	c8 01       	movw	r24, r16
     62e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uip_udp_listen>
     632:	90 93 03 04 	sts	0x0403, r25
     636:	80 93 02 04 	sts	0x0402, r24
	eth2can_uart0 = uip_udp_listen(&ipaddr,10001);
     63a:	61 e1       	ldi	r22, 0x11	; 17
     63c:	77 e2       	ldi	r23, 0x27	; 39
     63e:	c8 01       	movw	r24, r16
     640:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uip_udp_listen>
     644:	90 93 07 04 	sts	0x0407, r25
     648:	80 93 06 04 	sts	0x0406, r24
	eth2can_uart1 = uip_udp_listen(&ipaddr,10002);
     64c:	62 e1       	ldi	r22, 0x12	; 18
     64e:	77 e2       	ldi	r23, 0x27	; 39
     650:	c8 01       	movw	r24, r16
     652:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uip_udp_listen>
     656:	90 93 05 04 	sts	0x0405, r25
     65a:	80 93 04 04 	sts	0x0404, r24
	eth2can_can = uip_udp_listen(&ipaddr,10003);
     65e:	63 e1       	ldi	r22, 0x13	; 19
     660:	77 e2       	ldi	r23, 0x27	; 39
     662:	c8 01       	movw	r24, r16
     664:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <uip_udp_listen>
     668:	90 93 09 04 	sts	0x0409, r25
     66c:	80 93 08 04 	sts	0x0408, r24

	
	mcp2515_init();
     670:	0e 94 42 10 	call	0x2084	; 0x2084 <mcp2515_init>
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), 0);
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	60 ee       	ldi	r22, 0xE0	; 224
     678:	8f e0       	ldi	r24, 0x0F	; 15
     67a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <mcp2515_bit_modify>
	
	//send "init" on resart for arp reply
	uip_udp_sendto(init_buf, 4, eth2can_uart1);
     67e:	40 91 04 04 	lds	r20, 0x0404
     682:	50 91 05 04 	lds	r21, 0x0405
     686:	64 e0       	ldi	r22, 0x04	; 4
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	85 e0       	ldi	r24, 0x05	; 5
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 ce 08 	call	0x119c	; 0x119c <uip_udp_sendto>
	uip_arp_out();
     692:	0e 94 9d 09 	call	0x133a	; 0x133a <uip_arp_out>
	nic_send();
     696:	0e 94 2e 06 	call	0xc5c	; 0xc5c <nic_send>

	send_init = 0;
     69a:	10 92 01 04 	sts	0x0401, r1
     69e:	22 96       	adiw	r28, 0x02	; 2
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	08 95       	ret

000006b4 <rtl8019Write>:
#if NIC_CONNECTION == GENERAL_IO

void rtl8019Write(unsigned char address, unsigned char data)
{
	// assert the address, leaving the non-address pins intact
    address |= (RTL8019_ADDRESS_PORT & ~RTL8019_ADDRESS_MASK);
     6b4:	95 b3       	in	r25, 0x15	; 21
     6b6:	90 7e       	andi	r25, 0xE0	; 224
     6b8:	98 2b       	or	r25, r24
    RTL8019_ADDRESS_PORT = address;
     6ba:	95 bb       	out	0x15, r25	; 21

	// set data bus as output and place data on bus
    RTL8019_DATA_DDR = 0xFF;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	8a bb       	out	0x1a, r24	; 26
    RTL8019_DATA_PORT = data;
     6c0:	6b bb       	out	0x1b, r22	; 27

	// toggle write pin
    RTL8019_CONTROL_PORT &= ~_BV(RTL8019_CONTROL_WRITEPIN);
     6c2:	ae 98       	cbi	0x15, 6	; 21
    nop();
     6c4:	00 00       	nop
nop();
     6c6:	00 00       	nop
    RTL8019_CONTROL_PORT |= _BV(RTL8019_CONTROL_WRITEPIN);
     6c8:	ae 9a       	sbi	0x15, 6	; 21

	// set data port back to input with pullups enabled
    RTL8019_DATA_DDR = 0x00;
     6ca:	1a ba       	out	0x1a, r1	; 26
    RTL8019_DATA_PORT = 0xFF;
     6cc:	8b bb       	out	0x1b, r24	; 27
     6ce:	08 95       	ret

000006d0 <rtl8019Read>:
unsigned char rtl8019Read(unsigned char address)
{
    unsigned char byte;

    // assert the address, leaving the non-address pins intact
    address |= (RTL8019_ADDRESS_PORT & ~RTL8019_ADDRESS_MASK);
     6d0:	95 b3       	in	r25, 0x15	; 21
     6d2:	90 7e       	andi	r25, 0xE0	; 224
     6d4:	98 2b       	or	r25, r24
    RTL8019_ADDRESS_PORT = address;
     6d6:	95 bb       	out	0x15, r25	; 21

    // assert read
    RTL8019_CONTROL_PORT &= ~_BV(RTL8019_CONTROL_READPIN);
     6d8:	ad 98       	cbi	0x15, 5	; 21
    nop();
     6da:	00 00       	nop
	 nop();
     6dc:	00 00       	nop
    // read in the data
    byte = RTL8019_DATA_PIN;
     6de:	89 b3       	in	r24, 0x19	; 25

    // negate read
    RTL8019_CONTROL_PORT |= _BV(RTL8019_CONTROL_READPIN);
     6e0:	ad 9a       	sbi	0x15, 5	; 21

    return byte;
}
     6e2:	99 27       	eor	r25, r25
     6e4:	08 95       	ret

000006e6 <rtl8019SetupPorts>:
{

#if NIC_CONNECTION == GENERAL_IO

    // make the address port output
	RTL8019_ADDRESS_DDR |= RTL8019_ADDRESS_MASK;
     6e6:	84 b3       	in	r24, 0x14	; 20
     6e8:	8f 61       	ori	r24, 0x1F	; 31
     6ea:	84 bb       	out	0x14, r24	; 20

    // make the data port input with pull-ups
    RTL8019_DATA_PORT = 0xFF;
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	8b bb       	out	0x1b, r24	; 27

	// make the control port read and write pins outputs and asserted
	RTL8019_CONTROL_DDR |= _BV(RTL8019_CONTROL_READPIN);
     6f0:	a5 9a       	sbi	0x14, 5	; 20
   RTL8019_CONTROL_DDR |= _BV(RTL8019_CONTROL_WRITEPIN);
     6f2:	a6 9a       	sbi	0x14, 6	; 20

	RTL8019_CONTROL_PORT |= _BV(RTL8019_CONTROL_READPIN);
     6f4:	ad 9a       	sbi	0x15, 5	; 21
	RTL8019_CONTROL_PORT |= _BV(RTL8019_CONTROL_WRITEPIN);
     6f6:	ae 9a       	sbi	0x15, 6	; 21
    MCUCR |= _BV(SRE);

#endif

	// enable output pin for Resetting the RTL8019
	RTL8019_RESET_DDR |= _BV(RTL8019_RESET_PIN);
     6f8:	a7 9a       	sbi	0x14, 7	; 20
     6fa:	08 95       	ret

000006fc <rtl8019BeginPacketSend>:
#define RXSTOP_INIT    	0x60



void rtl8019BeginPacketSend(unsigned int packetLength)
{
     6fc:	0f 93       	push	r16
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	ec 01       	movw	r28, r24
	unsigned int sendPacketLength;
	sendPacketLength = (packetLength>=ETHERNET_MIN_PACKET_LENGTH) ?
     706:	8c 01       	movw	r16, r24
     708:	cc 97       	sbiw	r24, 0x3c	; 60
     70a:	10 f4       	brcc	.+4      	; 0x710 <rtl8019BeginPacketSend+0x14>
     70c:	cc e3       	ldi	r28, 0x3C	; 60
     70e:	d0 e0       	ldi	r29, 0x00	; 0
	                 packetLength : ETHERNET_MIN_PACKET_LENGTH ;

	//start the NIC
	rtl8019Write(CR,0x22);	//elm: page0 + abort DMA + start
     710:	62 e2       	ldi	r22, 0x22	; 34
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// still transmitting a packet - wait for it to finish
	while( rtl8019Read(CR) & 0x04 );
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     71e:	82 fd       	sbrc	r24, 2
     720:	fb cf       	rjmp	.-10     	; 0x718 <rtl8019BeginPacketSend+0x1c>

	//load beginning page for transmit buffer
	rtl8019Write(TPSR,TXSTART_INIT);
     722:	60 e4       	ldi	r22, 0x40	; 64
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	//set start address for remote DMA operation
	rtl8019Write(RSAR0,0x00);
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	88 e0       	ldi	r24, 0x08	; 8
     72e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(RSAR1,0x40);
     732:	60 e4       	ldi	r22, 0x40	; 64
     734:	89 e0       	ldi	r24, 0x09	; 9
     736:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	//clear the packet stored interrupt
	rtl8019Write(ISR,(1<<ISR_PTX));
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	//load data byte count for remote DMA
	rtl8019Write(RBCR0, (unsigned char)(packetLength));
     742:	60 2f       	mov	r22, r16
     744:	8a e0       	ldi	r24, 0x0A	; 10
     746:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(RBCR1, (unsigned char)(packetLength>>8));
     74a:	61 2f       	mov	r22, r17
     74c:	77 27       	eor	r23, r23
     74e:	8b e0       	ldi	r24, 0x0B	; 11
     750:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	rtl8019Write(TBCR0, (unsigned char)(sendPacketLength));
     754:	6c 2f       	mov	r22, r28
     756:	85 e0       	ldi	r24, 0x05	; 5
     758:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(TBCR1, (unsigned char)((sendPacketLength)>>8));
     75c:	6d 2f       	mov	r22, r29
     75e:	77 27       	eor	r23, r23
     760:	86 e0       	ldi	r24, 0x06	; 6
     762:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	//do remote write operation
	rtl8019Write(CR,0x12);
     766:	62 e1       	ldi	r22, 0x12	; 18
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <rtl8019SendPacketData>:
}



void rtl8019SendPacketData(unsigned char * localBuffer, unsigned int length)
{
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	7c 01       	movw	r14, r24
     786:	8b 01       	movw	r16, r22
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	d0 e0       	ldi	r29, 0x00	; 0
     78c:	08 c0       	rjmp	.+16     	; 0x79e <rtl8019SendPacketData+0x26>
	unsigned int i;

	for(i=0;i<length;i++)
		rtl8019Write(RDMAPORT, localBuffer[i]);
     78e:	f7 01       	movw	r30, r14
     790:	ec 0f       	add	r30, r28
     792:	fd 1f       	adc	r31, r29
     794:	60 81       	ld	r22, Z
     796:	80 e1       	ldi	r24, 0x10	; 16
     798:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

void rtl8019SendPacketData(unsigned char * localBuffer, unsigned int length)
{
	unsigned int i;

	for(i=0;i<length;i++)
     79c:	21 96       	adiw	r28, 0x01	; 1
     79e:	c0 17       	cp	r28, r16
     7a0:	d1 07       	cpc	r29, r17
     7a2:	a9 f7       	brne	.-22     	; 0x78e <rtl8019SendPacketData+0x16>
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	08 95       	ret

000007b2 <rtl8019EndPacketSend>:


void rtl8019EndPacketSend(void)
{
	//send the contents of the transmit buffer onto the network
	rtl8019Write(CR,0x24);
     7b2:	64 e2       	ldi	r22, 0x24	; 36
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// clear the remote DMA interrupt
	rtl8019Write(ISR, (1<<ISR_RDC));
     7ba:	60 e4       	ldi	r22, 0x40	; 64
     7bc:	87 e0       	ldi	r24, 0x07	; 7
     7be:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     7c2:	08 95       	ret

000007c4 <rtl8019RetreivePacketData>:
    return rxlen-4;
}


void rtl8019RetreivePacketData(unsigned char * localBuffer, unsigned int length)
{
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	6c 01       	movw	r12, r24
     7d6:	8b 01       	movw	r16, r22
	unsigned int i;

	// initiate DMA to transfer the data
    rtl8019Write(RBCR0, (unsigned char)length);
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(RBCR1, (unsigned char)(length>>8));
     7de:	61 2f       	mov	r22, r17
     7e0:	77 27       	eor	r23, r23
     7e2:	8b e0       	ldi	r24, 0x0B	; 11
     7e4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(RSAR0, (unsigned char)currentRetreiveAddress);
     7e8:	e0 90 3a 03 	lds	r14, 0x033A
     7ec:	f0 90 3b 03 	lds	r15, 0x033B
     7f0:	6e 2d       	mov	r22, r14
     7f2:	88 e0       	ldi	r24, 0x08	; 8
     7f4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(RSAR1, (unsigned char)(currentRetreiveAddress>>8));
     7f8:	6f 2d       	mov	r22, r15
     7fa:	77 27       	eor	r23, r23
     7fc:	89 e0       	ldi	r24, 0x09	; 9
     7fe:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(CR, 0x0A);
     802:	6a e0       	ldi	r22, 0x0A	; 10
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     80a:	c0 e0       	ldi	r28, 0x00	; 0
     80c:	d0 e0       	ldi	r29, 0x00	; 0
     80e:	08 c0       	rjmp	.+16     	; 0x820 <rtl8019RetreivePacketData+0x5c>
	for(i=0;i<length;i++)
		localBuffer[i] = rtl8019Read(RDMAPORT);
     810:	80 e1       	ldi	r24, 0x10	; 16
     812:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     816:	f6 01       	movw	r30, r12
     818:	ec 0f       	add	r30, r28
     81a:	fd 1f       	adc	r31, r29
     81c:	80 83       	st	Z, r24
    rtl8019Write(RBCR0, (unsigned char)length);
    rtl8019Write(RBCR1, (unsigned char)(length>>8));
    rtl8019Write(RSAR0, (unsigned char)currentRetreiveAddress);
    rtl8019Write(RSAR1, (unsigned char)(currentRetreiveAddress>>8));
    rtl8019Write(CR, 0x0A);
	for(i=0;i<length;i++)
     81e:	21 96       	adiw	r28, 0x01	; 1
     820:	c0 17       	cp	r28, r16
     822:	d1 07       	cpc	r29, r17
     824:	a9 f7       	brne	.-22     	; 0x810 <rtl8019RetreivePacketData+0x4c>
		localBuffer[i] = rtl8019Read(RDMAPORT);

	// end the DMA operation
    rtl8019Write(CR, 0x22);
     826:	62 e2       	ldi	r22, 0x22	; 34
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	d0 e0       	ldi	r29, 0x00	; 0
    for(i = 0; i <= 20; i++)
        if(rtl8019Read(ISR) & 1<<6)
     832:	87 e0       	ldi	r24, 0x07	; 7
     834:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     838:	86 fd       	sbrc	r24, 6
     83a:	04 c0       	rjmp	.+8      	; 0x844 <rtl8019RetreivePacketData+0x80>
	for(i=0;i<length;i++)
		localBuffer[i] = rtl8019Read(RDMAPORT);

	// end the DMA operation
    rtl8019Write(CR, 0x22);
    for(i = 0; i <= 20; i++)
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	c5 31       	cpi	r28, 0x15	; 21
     840:	d1 05       	cpc	r29, r1
     842:	b9 f7       	brne	.-18     	; 0x832 <rtl8019RetreivePacketData+0x6e>
        if(rtl8019Read(ISR) & 1<<6)
            break;
    rtl8019Write(ISR, 1<<6);
     844:	60 e4       	ldi	r22, 0x40	; 64
     846:	87 e0       	ldi	r24, 0x07	; 7
     848:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

    currentRetreiveAddress += length;
     84c:	b8 01       	movw	r22, r16
     84e:	6e 0d       	add	r22, r14
     850:	7f 1d       	adc	r23, r15
     852:	70 93 3b 03 	sts	0x033B, r23
     856:	60 93 3a 03 	sts	0x033A, r22
    if( currentRetreiveAddress >= 0x6000 )
     85a:	80 e6       	ldi	r24, 0x60	; 96
     85c:	60 30       	cpi	r22, 0x00	; 0
     85e:	78 07       	cpc	r23, r24
     860:	30 f0       	brcs	.+12     	; 0x86e <rtl8019RetreivePacketData+0xaa>
    	currentRetreiveAddress = currentRetreiveAddress - (0x6000-0x4600) ;
     862:	60 50       	subi	r22, 0x00	; 0
     864:	7a 41       	sbci	r23, 0x1A	; 26
     866:	70 93 3b 03 	sts	0x033B, r23
     86a:	60 93 3a 03 	sts	0x033A, r22
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	08 95       	ret

00000880 <rtl8019EndPacketRetreive>:
}



void rtl8019EndPacketRetreive(void)
{
     880:	1f 93       	push	r17
	unsigned char i;

	// end the DMA operation
    rtl8019Write(CR, 0x22);
     882:	62 e2       	ldi	r22, 0x22	; 34
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     88a:	10 e0       	ldi	r17, 0x00	; 0
    for(i = 0; i <= 20; i++)
        if(rtl8019Read(ISR) & 1<<6)
     88c:	87 e0       	ldi	r24, 0x07	; 7
     88e:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     892:	86 fd       	sbrc	r24, 6
     894:	03 c0       	rjmp	.+6      	; 0x89c <rtl8019EndPacketRetreive+0x1c>
{
	unsigned char i;

	// end the DMA operation
    rtl8019Write(CR, 0x22);
    for(i = 0; i <= 20; i++)
     896:	1f 5f       	subi	r17, 0xFF	; 255
     898:	15 31       	cpi	r17, 0x15	; 21
     89a:	c1 f7       	brne	.-16     	; 0x88c <rtl8019EndPacketRetreive+0xc>
        if(rtl8019Read(ISR) & 1<<6)
            break;
    rtl8019Write(ISR, 1<<6);
     89c:	60 e4       	ldi	r22, 0x40	; 64
     89e:	87 e0       	ldi	r24, 0x07	; 7
     8a0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// set the boundary register to point to the start of the next packet
    rtl8019Write(BNRY, nextPage);
     8a4:	60 91 39 03 	lds	r22, 0x0339
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     8ae:	1f 91       	pop	r17
     8b0:	08 95       	ret

000008b2 <rtl8019Init>:
}
#endif


void rtl8019Init(void)
{
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	26 97       	sbiw	r28, 0x06	; 6
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61


	struct uip_eth_addr eth_adr;
	u8_t i;

	rtl8019SetupPorts();
     8cc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <rtl8019SetupPorts>

	HARD_RESET_RTL8019();
     8d0:	af 9a       	sbi	0x15, 7	; 21
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	0e 94 0a 06 	call	0xc14	; 0xc14 <delay_ms>
     8d8:	af 98       	cbi	0x15, 7	; 21

	// do soft reset
	//rtl8019Write( ISR, rtl8019Read(ISR) ) ;
//rtl8019Write( ISR, 0xff ) ;

	delay_ms(20);
     8da:	84 e1       	ldi	r24, 0x14	; 20
     8dc:	0e 94 0a 06 	call	0xc14	; 0xc14 <delay_ms>

	// switch to page 3 to load config registers
	// elm: page3 + abort dma + stop
	rtl8019Write(CR, 0xE1);
     8e0:	61 ee       	ldi	r22, 0xE1	; 225
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// disable EEPROM write protect of config registers
	// elm: remove write protection
	rtl8019Write(RTL_EECR, 0xC0);
     8e8:	60 ec       	ldi	r22, 0xC0	; 192
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// set network type to 10 Base-T link test
	// elm: BROM disable
	rtl8019Write(CONFIG2, 0x20);
     8f0:	60 e2       	ldi	r22, 0x20	; 32
     8f2:	85 e0       	ldi	r24, 0x05	; 5
     8f4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// disable powerdown and sleep
	// elm: disable powerdown and sleep
	rtl8019Write(CONFIG3, 0x00);
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	delay_ms(20);
     900:	84 e1       	ldi	r24, 0x14	; 20
     902:	0e 94 0a 06 	call	0xc14	; 0xc14 <delay_ms>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0

	// read Ethernet MAC from EEPROM        
	for(i=0;i<6;i++)
	{
		eth_adr.addr[i] =  eeprom_read_byte(AT_EEPROM_MAC_ADDRESS+i);
     90a:	7e 01       	movw	r14, r28
     90c:	08 94       	sec
     90e:	e1 1c       	adc	r14, r1
     910:	f1 1c       	adc	r15, r1
	rtl8019Write(CONFIG2, 0x20);

	// disable powerdown and sleep
	// elm: disable powerdown and sleep
	rtl8019Write(CONFIG3, 0x00);
	delay_ms(20);
     912:	d9 01       	movw	r26, r18
     914:	12 96       	adiw	r26, 0x02	; 2

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
     916:	0e 94 aa 10 	call	0x2154	; 0x2154 <__eeprom_read_byte_1C1D1E>
     91a:	80 2d       	mov	r24, r0

	// read Ethernet MAC from EEPROM        
	for(i=0;i<6;i++)
	{
		eth_adr.addr[i] =  eeprom_read_byte(AT_EEPROM_MAC_ADDRESS+i);
     91c:	f7 01       	movw	r30, r14
     91e:	e2 0f       	add	r30, r18
     920:	f3 1f       	adc	r31, r19
     922:	80 83       	st	Z, r24
     924:	2f 5f       	subi	r18, 0xFF	; 255
     926:	3f 4f       	sbci	r19, 0xFF	; 255
	// elm: disable powerdown and sleep
	rtl8019Write(CONFIG3, 0x00);
	delay_ms(20);

	// read Ethernet MAC from EEPROM        
	for(i=0;i<6;i++)
     928:	26 30       	cpi	r18, 0x06	; 6
     92a:	31 05       	cpc	r19, r1
     92c:	91 f7       	brne	.-28     	; 0x912 <rtl8019Init+0x60>
	}
#endif

	// reenable EEPROM write protect
	// elm: reenable write protection
	rtl8019Write(RTL_EECR, 0x00);
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	// go back to page 0

	// elm: page0 + abort dma + stop
	rtl8019Write(CR,0x21);       // stop the NIC, abort DMA, page 0
     936:	61 e2       	ldi	r22, 0x21	; 33
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	delay_ms(2);               // make sure nothing is coming in or going out
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	0e 94 0a 06 	call	0xc14	; 0xc14 <delay_ms>
	rtl8019Write(DCR, DCR_INIT);    // elm: data config register: init
     944:	68 e5       	ldi	r22, 0x58	; 88
     946:	8e e0       	ldi	r24, 0x0E	; 14
     948:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(RBCR0,0x00);	// elm: Remote Byte Count Registers: resrt to 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	8a e0       	ldi	r24, 0x0A	; 10
     950:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(RBCR1,0x00);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	8b e0       	ldi	r24, 0x0B	; 11
     958:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(RCR,0x04);		//elm: Receive Configuration Register: accept broadcast
     95c:	64 e0       	ldi	r22, 0x04	; 4
     95e:	8c e0       	ldi	r24, 0x0C	; 12
     960:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(TPSR, TXSTART_INIT);	//elm: This register sets the start page address of the packet to the transmitted. TXSTART_INIT == 0x40
     964:	60 e4       	ldi	r22, 0x40	; 64
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(TCR,0x02);		//elm: no CRC + Internal Lookback
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	8d e0       	ldi	r24, 0x0D	; 13
     970:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(PSTART, RXSTART_INIT);	//elm: The Page Start register sets the start page address of the receive buffer ring. RXSTART_INIT == 0x46
     974:	66 e4       	ldi	r22, 0x46	; 70
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(BNRY, RXSTART_INIT);	//elm: BNRY = last read input page. RXSTART_INIT == 0x46
     97c:	66 e4       	ldi	r22, 0x46	; 70
     97e:	83 e0       	ldi	r24, 0x03	; 3
     980:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(PSTOP, RXSTOP_INIT);	//elm: end page adress ir the receive buffer ring. RXSTOP_INIT = 0x60 (max)
     984:	60 e6       	ldi	r22, 0x60	; 96
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CR, 0x61);		//elm: page1 + abort DMA + stop
     98c:	61 e6       	ldi	r22, 0x61	; 97
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	delay_ms(2);
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 0a 06 	call	0xc14	; 0xc14 <delay_ms>
	rtl8019Write(CURR, RXSTART_INIT); //elm: This register points to the page address of the first receive buffer page to be used for a packet reception. RXSTART_INIT == 0x46
     99a:	66 e4       	ldi	r22, 0x46	; 70
     99c:	87 e0       	ldi	r24, 0x07	; 7
     99e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
		

	rtl8019Write(CR, 0x61); //elm: Page 1 + abort DMA + stop
     9a2:	61 e6       	ldi	r22, 0x61	; 97
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     9aa:	10 e0       	ldi	r17, 0x00	; 0

	for(i=0;i<6;i++)			// write MAC from EEPROM to rtl8019 Registers
	{
		rtl8019Write(PAR0+i,eth_adr.addr[i]);
     9ac:	1f 5f       	subi	r17, 0xFF	; 255
     9ae:	f7 01       	movw	r30, r14
     9b0:	61 91       	ld	r22, Z+
     9b2:	7f 01       	movw	r14, r30
     9b4:	81 2f       	mov	r24, r17
     9b6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CURR, RXSTART_INIT); //elm: This register points to the page address of the first receive buffer page to be used for a packet reception. RXSTART_INIT == 0x46
		

	rtl8019Write(CR, 0x61); //elm: Page 1 + abort DMA + stop

	for(i=0;i<6;i++)			// write MAC from EEPROM to rtl8019 Registers
     9ba:	16 30       	cpi	r17, 0x06	; 6
     9bc:	b9 f7       	brne	.-18     	; 0x9ac <rtl8019Init+0xfa>
//	rtl8019Write(PAR0+3, MYMAC_3);
//	rtl8019Write(PAR0+4, MYMAC_4);
//	rtl8019Write(PAR0+5, MYMAC_5);


	uip_setethaddr(eth_adr);
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	80 93 16 01 	sts	0x0116, r24
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	80 93 17 01 	sts	0x0117, r24
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	80 93 18 01 	sts	0x0118, r24
     9d0:	8c 81       	ldd	r24, Y+4	; 0x04
     9d2:	80 93 19 01 	sts	0x0119, r24
     9d6:	8d 81       	ldd	r24, Y+5	; 0x05
     9d8:	80 93 1a 01 	sts	0x011A, r24
     9dc:	8e 81       	ldd	r24, Y+6	; 0x06
     9de:	80 93 1b 01 	sts	0x011B, r24

	rtl8019Write(CR,0x21);		//elm: page0 + abort DMA + stop
     9e2:	61 e2       	ldi	r22, 0x21	; 33
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(DCR, DCR_INIT);	//elm: noch mal init FIXME
     9ea:	68 e5       	ldi	r22, 0x58	; 88
     9ec:	8e e0       	ldi	r24, 0x0E	; 14
     9ee:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CR,0x22);		//elm: page0 + abort DMA + start
     9f2:	62 e2       	ldi	r22, 0x22	; 34
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(ISR,0xFF);		//elm: cleanup alle interruptflags
     9fa:	6f ef       	ldi	r22, 0xFF	; 255
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(IMR, IMR_INIT);	//elm: interrupt mask; 0x11, received packet + receivbuffer exhausted
     a02:	61 e1       	ldi	r22, 0x11	; 17
     a04:	8f e0       	ldi	r24, 0x0F	; 15
     a06:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(TCR, TCR_INIT);	//elm: Transmit Configuration Register: enable CRC
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	8d e0       	ldi	r24, 0x0D	; 13
     a0e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	rtl8019Write(CR, 0x22);	// start the NIC
     a12:	62 e2       	ldi	r22, 0x22	; 34
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     a1a:	26 96       	adiw	r28, 0x06	; 6
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	ff 90       	pop	r15
     a2e:	ef 90       	pop	r14
     a30:	08 95       	ret

00000a32 <rtl8019Overrun>:
    rtl8019Write(BNRY, nextPage);
}


void rtl8019Overrun(void)
{
     a32:	1f 93       	push	r17
	unsigned char data_L, resend;

	data_L = rtl8019Read(CR);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     a3a:	18 2f       	mov	r17, r24
	rtl8019Write(CR, 0x21);
     a3c:	61 e2       	ldi	r22, 0x21	; 33
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	delay_ms(2);
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 0a 06 	call	0xc14	; 0xc14 <delay_ms>
	rtl8019Write(RBCR0, 0x00);
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	8a e0       	ldi	r24, 0x0A	; 10
     a4e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(RBCR1, 0x00);
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	8b e0       	ldi	r24, 0x0B	; 11
     a56:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	if(!(data_L & 0x04))
     a5a:	12 ff       	sbrs	r17, 2
     a5c:	0a c0       	rjmp	.+20     	; 0xa72 <rtl8019Overrun+0x40>
		resend = 0;
	else if(data_L & 0x04)
	{
		data_L = rtl8019Read(ISR);
     a5e:	87 e0       	ldi	r24, 0x07	; 7
     a60:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
		if((data_L & 0x02) || (data_L & 0x08))
     a64:	99 27       	eor	r25, r25
     a66:	81 fd       	sbrc	r24, 1
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <rtl8019Overrun+0x40>
     a6a:	83 fd       	sbrc	r24, 3
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <rtl8019Overrun+0x40>
     a6e:	11 e0       	ldi	r17, 0x01	; 1
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <rtl8019Overrun+0x42>
     a72:	10 e0       	ldi	r17, 0x00	; 0
	    	resend = 0;
	    else
	    	resend = 1;
	}

	rtl8019Write(TCR, 0x02);
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	8d e0       	ldi	r24, 0x0D	; 13
     a78:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CR, 0x22);
     a7c:	62 e2       	ldi	r22, 0x22	; 34
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(BNRY, RXSTART_INIT);
     a84:	66 e4       	ldi	r22, 0x46	; 70
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CR, 0x62);
     a8c:	62 e6       	ldi	r22, 0x62	; 98
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CURR, RXSTART_INIT);
     a94:	66 e4       	ldi	r22, 0x46	; 70
     a96:	87 e0       	ldi	r24, 0x07	; 7
     a98:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(CR, 0x22);
     a9c:	62 e2       	ldi	r22, 0x22	; 34
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(ISR, 0x10);
     aa4:	60 e1       	ldi	r22, 0x10	; 16
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	rtl8019Write(TCR, TCR_INIT);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	8d e0       	ldi	r24, 0x0D	; 13
     ab0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

    if(resend)
     ab4:	11 23       	and	r17, r17
     ab6:	21 f0       	breq	.+8      	; 0xac0 <rtl8019Overrun+0x8e>
        rtl8019Write(CR, 0x26);
     ab8:	66 e2       	ldi	r22, 0x26	; 38
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

    rtl8019Write(ISR, 0xFF);
     ac0:	6f ef       	ldi	r22, 0xFF	; 255
     ac2:	87 e0       	ldi	r24, 0x07	; 7
     ac4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     ac8:	1f 91       	pop	r17
     aca:	08 95       	ret

00000acc <rtl8019ProcessInterrupt>:
}


void rtl8019ProcessInterrupt(void)
{
	unsigned char byte = rtl8019Read(ISR);
     acc:	87 e0       	ldi	r24, 0x07	; 7
     ace:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>

	if( byte & (1<<ISR_OVW) )
     ad2:	84 ff       	sbrs	r24, 4
     ad4:	02 c0       	rjmp	.+4      	; 0xada <rtl8019ProcessInterrupt+0xe>
		rtl8019Overrun();
     ad6:	0e 94 19 05 	call	0xa32	; 0xa32 <rtl8019Overrun>
     ada:	08 95       	ret

00000adc <rtl8019BeginPacketRetreive>:
#define  nextblock_ptr        0x01
#define	 enetpacketLenL		  0x02
#define	 enetpacketLenH		  0x03

unsigned int rtl8019BeginPacketRetreive(void)
{
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	24 97       	sbiw	r28, 0x04	; 4
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61

	unsigned char pageheader[4];
	unsigned int rxlen;

	// check for and handle an overflow
	rtl8019ProcessInterrupt();
     afa:	0e 94 66 05 	call	0xacc	; 0xacc <rtl8019ProcessInterrupt>

	// read CURR from page 1
	rtl8019Write(CR,0x62);
     afe:	62 e6       	ldi	r22, 0x62	; 98
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
	i = rtl8019Read(CURR);
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     b0c:	18 2f       	mov	r17, r24

	// return to page 0
	rtl8019Write(CR,0x22);
     b0e:	62 e2       	ldi	r22, 0x22	; 34
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// read the boundary register - pointing to the beginning of the packet
	bnry = rtl8019Read(BNRY) ;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     b1c:	d8 2e       	mov	r13, r24

	// return if there is no packet in the buffer
	if( bnry == i )
     b1e:	81 17       	cp	r24, r17
     b20:	09 f4       	brne	.+2      	; 0xb24 <rtl8019BeginPacketRetreive+0x48>
     b22:	68 c0       	rjmp	.+208    	; 0xbf4 <rtl8019BeginPacketRetreive+0x118>
		return 0;


	// clear the packet received interrupt flag
	rtl8019Write(ISR, (1<<ISR_PRX));
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	87 e0       	ldi	r24, 0x07	; 7
     b28:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>

	// the boundary pointer is invalid, reset the contents of the buffer and exit
	if( (bnry >= RXSTOP_INIT) || (bnry < RXSTART_INIT) )
     b2c:	8d 2d       	mov	r24, r13
     b2e:	86 54       	subi	r24, 0x46	; 70
     b30:	8a 31       	cpi	r24, 0x1A	; 26
     b32:	88 f0       	brcs	.+34     	; 0xb56 <rtl8019BeginPacketRetreive+0x7a>
	{
		rtl8019Write(BNRY, RXSTART_INIT);
     b34:	66 e4       	ldi	r22, 0x46	; 70
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
		rtl8019Write(CR, 0x62);
     b3c:	62 e6       	ldi	r22, 0x62	; 98
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
		rtl8019Write(CURR, RXSTART_INIT);
     b44:	66 e4       	ldi	r22, 0x46	; 70
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
		rtl8019Write(CR, 0x22);
     b4c:	62 e2       	ldi	r22, 0x22	; 34
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     b54:	4f c0       	rjmp	.+158    	; 0xbf4 <rtl8019BeginPacketRetreive+0x118>

		return 0;
	}

	// initiate DMA to transfer the RTL8019 packet header
    rtl8019Write(RBCR0, 4);
     b56:	64 e0       	ldi	r22, 0x04	; 4
     b58:	8a e0       	ldi	r24, 0x0A	; 10
     b5a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(RBCR1, 0);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	8b e0       	ldi	r24, 0x0B	; 11
     b62:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(RSAR0, 0);
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(RSAR1, bnry);
     b6e:	6d 2d       	mov	r22, r13
     b70:	89 e0       	ldi	r24, 0x09	; 9
     b72:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
    rtl8019Write(CR, 0x0A);
     b76:	6a e0       	ldi	r22, 0x0A	; 10
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     b7e:	8e 01       	movw	r16, r28
     b80:	0f 5f       	subi	r16, 0xFF	; 255
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i=0;i<4;i++)
     b84:	75 e0       	ldi	r23, 0x05	; 5
     b86:	e7 2e       	mov	r14, r23
     b88:	f1 2c       	mov	r15, r1
     b8a:	ec 0e       	add	r14, r28
     b8c:	fd 1e       	adc	r15, r29
		pageheader[i] = rtl8019Read(RDMAPORT);
     b8e:	80 e1       	ldi	r24, 0x10	; 16
     b90:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     b94:	f8 01       	movw	r30, r16
     b96:	81 93       	st	Z+, r24
     b98:	8f 01       	movw	r16, r30
    rtl8019Write(RBCR0, 4);
    rtl8019Write(RBCR1, 0);
    rtl8019Write(RSAR0, 0);
    rtl8019Write(RSAR1, bnry);
    rtl8019Write(CR, 0x0A);
	for(i=0;i<4;i++)
     b9a:	ee 15       	cp	r30, r14
     b9c:	ff 05       	cpc	r31, r15
     b9e:	b9 f7       	brne	.-18     	; 0xb8e <rtl8019BeginPacketRetreive+0xb2>
		pageheader[i] = rtl8019Read(RDMAPORT);

	// end the DMA operation
    rtl8019Write(CR, 0x22);
     ba0:	62 e2       	ldi	r22, 0x22	; 34
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>
     ba8:	10 e0       	ldi	r17, 0x00	; 0
    for(i = 0; i <= 20; i++)
        if(rtl8019Read(ISR) & 1<<6)
     baa:	87 e0       	ldi	r24, 0x07	; 7
     bac:	0e 94 68 03 	call	0x6d0	; 0x6d0 <rtl8019Read>
     bb0:	86 fd       	sbrc	r24, 6
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <rtl8019BeginPacketRetreive+0xde>
	for(i=0;i<4;i++)
		pageheader[i] = rtl8019Read(RDMAPORT);

	// end the DMA operation
    rtl8019Write(CR, 0x22);
    for(i = 0; i <= 20; i++)
     bb4:	1f 5f       	subi	r17, 0xFF	; 255
     bb6:	15 31       	cpi	r17, 0x15	; 21
     bb8:	c1 f7       	brne	.-16     	; 0xbaa <rtl8019BeginPacketRetreive+0xce>
        if(rtl8019Read(ISR) & 1<<6)
            break;
    rtl8019Write(ISR, 1<<6);
     bba:	60 e4       	ldi	r22, 0x40	; 64
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rtl8019Write>


	rxlen = (pageheader[enetpacketLenH]<<8) + pageheader[enetpacketLenL];
     bc2:	3c 81       	ldd	r19, Y+4	; 0x04
     bc4:	4b 81       	ldd	r20, Y+3	; 0x03
	nextPage = pageheader[nextblock_ptr] ;
     bc6:	2a 81       	ldd	r18, Y+2	; 0x02
     bc8:	20 93 39 03 	sts	0x0339, r18

	currentRetreiveAddress = (bnry<<8) + 4;
     bcc:	8d 2d       	mov	r24, r13
     bce:	99 27       	eor	r25, r25
     bd0:	98 2f       	mov	r25, r24
     bd2:	88 27       	eor	r24, r24
     bd4:	04 96       	adiw	r24, 0x04	; 4
     bd6:	90 93 3b 03 	sts	0x033B, r25
     bda:	80 93 3a 03 	sts	0x033A, r24

	// if the nextPage pointer is invalid, the packet is not ready yet - exit
	if( (nextPage >= RXSTOP_INIT) || (nextPage < RXSTART_INIT) )
     bde:	26 54       	subi	r18, 0x46	; 70
     be0:	2a 31       	cpi	r18, 0x1A	; 26
     be2:	40 f4       	brcc	.+16     	; 0xbf4 <rtl8019BeginPacketRetreive+0x118>
		return 0;

    return rxlen-4;
     be4:	83 2f       	mov	r24, r19
     be6:	99 27       	eor	r25, r25
     be8:	98 2f       	mov	r25, r24
     bea:	88 27       	eor	r24, r24
     bec:	84 0f       	add	r24, r20
     bee:	91 1d       	adc	r25, r1
     bf0:	04 97       	sbiw	r24, 0x04	; 4
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <rtl8019BeginPacketRetreive+0x11c>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	24 96       	adiw	r28, 0x04	; 4
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	08 95       	ret

00000c14 <delay_ms>:
void delay_ms(unsigned char ms)
{
   unsigned short delay_count = F_CPU / 4000;
#ifdef __GNUC__
    unsigned short cnt;
    asm volatile ("\n"
     c14:	20 ea       	ldi	r18, 0xA0	; 160
     c16:	3f e0       	ldi	r19, 0x0F	; 15

00000c18 <L_dl17>:
     c18:	e2 2f       	mov	r30, r18
     c1a:	f3 2f       	mov	r31, r19

00000c1c <L_dl27>:
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <L_dl27>
     c20:	8a 95       	dec	r24
     c22:	d1 f7       	brne	.-12     	; 0xc18 <L_dl17>
     c24:	08 95       	ret

00000c26 <nic_poll>:
#if UIP_BUFSIZE > 255
unsigned int nic_poll(void)
#else 
unsigned char nic_poll(void)
#endif /* UIP_BUFSIZE > 255 */
{
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
	unsigned int packetLength;
	
	packetLength = NICBeginPacketRetreive();
     c2a:	0e 94 6e 05 	call	0xadc	; 0xadc <rtl8019BeginPacketRetreive>
     c2e:	ec 01       	movw	r28, r24

	// if there's no packet or an error - exit without ending the operation
	if( !packetLength )
     c30:	89 2b       	or	r24, r25
     c32:	81 f0       	breq	.+32     	; 0xc54 <nic_poll+0x2e>
	  return 0;

	// drop anything too big for the buffer
	if( packetLength > UIP_BUFSIZE )
     c34:	85 e0       	ldi	r24, 0x05	; 5
     c36:	cd 3d       	cpi	r28, 0xDD	; 221
     c38:	d8 07       	cpc	r29, r24
     c3a:	28 f0       	brcs	.+10     	; 0xc46 <nic_poll+0x20>
	{
	  NICEndPacketRetreive();
     c3c:	0e 94 40 04 	call	0x880	; 0x880 <rtl8019EndPacketRetreive>
     c40:	c0 e0       	ldi	r28, 0x00	; 0
     c42:	d0 e0       	ldi	r29, 0x00	; 0
     c44:	07 c0       	rjmp	.+14     	; 0xc54 <nic_poll+0x2e>
	  return 0;
	}
	
	// copy the packet data into the uIP packet buffer
	NICRetreivePacketData( uip_buf, packetLength );
     c46:	be 01       	movw	r22, r28
     c48:	85 e3       	ldi	r24, 0x35	; 53
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <rtl8019RetreivePacketData>
	NICEndPacketRetreive();
     c50:	0e 94 40 04 	call	0x880	; 0x880 <rtl8019EndPacketRetreive>
	return packetLength;
#else 
	return (unsigned char)packetLength;
#endif /* UIP_BUFSIZE > 255 */
		
}
     c54:	ce 01       	movw	r24, r28
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <nic_send>:
}


void nic_send(void)
{
	NICBeginPacketSend(uip_len);
     c5c:	80 91 24 04 	lds	r24, 0x0424
     c60:	90 91 25 04 	lds	r25, 0x0425
     c64:	0e 94 7e 03 	call	0x6fc	; 0x6fc <rtl8019BeginPacketSend>

	// send packet, using data in uip_appdata if over the IP+TCP header size
	if( uip_len <= TOTAL_HEADER_LENGTH )
     c68:	80 91 24 04 	lds	r24, 0x0424
     c6c:	90 91 25 04 	lds	r25, 0x0425
     c70:	c7 97       	sbiw	r24, 0x37	; 55
     c72:	38 f4       	brcc	.+14     	; 0xc82 <nic_send+0x26>
	{
		NICSendPacketData(uip_buf, uip_len);
     c74:	60 91 24 04 	lds	r22, 0x0424
     c78:	70 91 25 04 	lds	r23, 0x0425
     c7c:	85 e3       	ldi	r24, 0x35	; 53
     c7e:	94 e0       	ldi	r25, 0x04	; 4
     c80:	17 c0       	rjmp	.+46     	; 0xcb0 <nic_send+0x54>
	} else {
		uip_len -= TOTAL_HEADER_LENGTH;
     c82:	80 91 24 04 	lds	r24, 0x0424
     c86:	90 91 25 04 	lds	r25, 0x0425
     c8a:	c6 97       	sbiw	r24, 0x36	; 54
     c8c:	90 93 25 04 	sts	0x0425, r25
     c90:	80 93 24 04 	sts	0x0424, r24
		NICSendPacketData(uip_buf, TOTAL_HEADER_LENGTH);
     c94:	66 e3       	ldi	r22, 0x36	; 54
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	85 e3       	ldi	r24, 0x35	; 53
     c9a:	94 e0       	ldi	r25, 0x04	; 4
     c9c:	0e 94 bc 03 	call	0x778	; 0x778 <rtl8019SendPacketData>
		NICSendPacketData((unsigned char *)uip_appdata, uip_len);
     ca0:	60 91 24 04 	lds	r22, 0x0424
     ca4:	70 91 25 04 	lds	r23, 0x0425
     ca8:	80 91 2f 04 	lds	r24, 0x042F
     cac:	90 91 30 04 	lds	r25, 0x0430
     cb0:	0e 94 bc 03 	call	0x778	; 0x778 <rtl8019SendPacketData>
	}

	NICEndPacketSend();
     cb4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <rtl8019EndPacketSend>
     cb8:	08 95       	ret

00000cba <nic_init>:
#define TOTAL_HEADER_LENGTH (IP_TCP_HEADER_LENGTH+ETHERNET_HEADER_LENGTH)


void nic_init(void)
{
	NICInit();
     cba:	0e 94 59 04 	call	0x8b2	; 0x8b2 <rtl8019Init>
     cbe:	08 95       	ret

00000cc0 <uip_init>:
  for(c = 0; c < UIP_CONNS; ++c) {
    uip_conns[c].tcpstateflags = CLOSED;
  }
#endif
#if UIP_ACTIVE_OPEN
  lastport = 1024;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	94 e0       	ldi	r25, 0x04	; 4
     cc4:	90 93 3f 03 	sts	0x033F, r25
     cc8:	80 93 3e 03 	sts	0x033E, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0c c0       	rjmp	.+24     	; 0xce8 <uip_init+0x28>
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
    uip_udp_conns[c].lport = 0;
     cd0:	e8 2f       	mov	r30, r24
     cd2:	ff 27       	eor	r31, r31
     cd4:	93 e0       	ldi	r25, 0x03	; 3
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	9a 95       	dec	r25
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <uip_init+0x16>
     cde:	eb 5e       	subi	r30, 0xEB	; 235
     ce0:	f5 4f       	sbci	r31, 0xF5	; 245
     ce2:	15 82       	std	Z+5, r1	; 0x05
     ce4:	14 82       	std	Z+4, r1	; 0x04
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
#if UIP_ACTIVE_OPEN
  lastport = 1024;
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	90 f3       	brcs	.-28     	; 0xcd0 <uip_init+0x10>
     cec:	80 93 40 03 	sts	0x0340, r24
     cf0:	08 95       	ret

00000cf2 <uip_udp_new>:
#endif /* UIP_ACTIVE_OPEN */
/*-----------------------------------------------------------------------------------*/
#if UIP_UDP
struct uip_udp_conn *
uip_udp_new(u16_t *ripaddr, u16_t rport)
{
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	dc 01       	movw	r26, r24
     cf8:	20 91 3e 03 	lds	r18, 0x033E
     cfc:	30 91 3f 03 	lds	r19, 0x033F
  register struct uip_udp_conn *conn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255

  if(lastport >= 32000) {
     d04:	8d e7       	ldi	r24, 0x7D	; 125
     d06:	20 30       	cpi	r18, 0x00	; 0
     d08:	38 07       	cpc	r19, r24
     d0a:	10 f0       	brcs	.+4      	; 0xd10 <uip_udp_new+0x1e>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e1       	ldi	r19, 0x10	; 16
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <uip_udp_new+0x42>
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
     d16:	4f 5f       	subi	r20, 0xFF	; 255
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
    if(uip_udp_conns[c].lport == lastport) {
     d1a:	ff 27       	eor	r31, r31
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	9a 95       	dec	r25
     d24:	e1 f7       	brne	.-8      	; 0xd1e <uip_udp_new+0x2c>
     d26:	eb 5e       	subi	r30, 0xEB	; 235
     d28:	f5 4f       	sbci	r31, 0xF5	; 245
     d2a:	84 81       	ldd	r24, Z+4	; 0x04
     d2c:	95 81       	ldd	r25, Z+5	; 0x05
     d2e:	82 17       	cp	r24, r18
     d30:	93 07       	cpc	r25, r19
     d32:	31 f3       	breq	.-52     	; 0xd00 <uip_udp_new+0xe>
      goto again;
     d34:	e4 2f       	mov	r30, r20

  if(lastport >= 32000) {
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
     d36:	44 30       	cpi	r20, 0x04	; 4
     d38:	51 05       	cpc	r21, r1
     d3a:	69 f7       	brne	.-38     	; 0xd16 <uip_udp_new+0x24>
     d3c:	30 93 3f 03 	sts	0x033F, r19
     d40:	20 93 3e 03 	sts	0x033E, r18
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
     d44:	10 92 40 03 	sts	0x0340, r1
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	15 c0       	rjmp	.+42     	; 0xd76 <uip_udp_new+0x84>
     d4c:	54 2f       	mov	r21, r20
     d4e:	5f 5f       	subi	r21, 0xFF	; 255
    if(uip_udp_conns[c].lport == 0) {
     d50:	e4 2f       	mov	r30, r20
     d52:	ff 27       	eor	r31, r31
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	8a 95       	dec	r24
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <uip_udp_new+0x64>
     d5e:	eb 5e       	subi	r30, 0xEB	; 235
     d60:	f5 4f       	sbci	r31, 0xF5	; 245
     d62:	84 81       	ldd	r24, Z+4	; 0x04
     d64:	95 81       	ldd	r25, Z+5	; 0x05
     d66:	89 2b       	or	r24, r25
     d68:	29 f4       	brne	.+10     	; 0xd74 <uip_udp_new+0x82>
     d6a:	40 93 40 03 	sts	0x0340, r20
      conn = &uip_udp_conns[c]; 
      break;
    }
  }

  if(conn == 0) {
     d6e:	30 97       	sbiw	r30, 0x00	; 0
     d70:	49 f4       	brne	.+18     	; 0xd84 <uip_udp_new+0x92>
     d72:	22 c0       	rjmp	.+68     	; 0xdb8 <uip_udp_new+0xc6>
     d74:	45 2f       	mov	r20, r21
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
     d76:	44 30       	cpi	r20, 0x04	; 4
     d78:	48 f3       	brcs	.-46     	; 0xd4c <uip_udp_new+0x5a>
     d7a:	40 93 40 03 	sts	0x0340, r20
     d7e:	e0 e0       	ldi	r30, 0x00	; 0
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	1a c0       	rjmp	.+52     	; 0xdb8 <uip_udp_new+0xc6>

  if(conn == 0) {
    return 0;
  }
  
  conn->lport = HTONS(lastport);
     d84:	83 2f       	mov	r24, r19
     d86:	99 27       	eor	r25, r25
     d88:	32 2f       	mov	r19, r18
     d8a:	22 27       	eor	r18, r18
     d8c:	82 2b       	or	r24, r18
     d8e:	93 2b       	or	r25, r19
     d90:	95 83       	std	Z+5, r25	; 0x05
     d92:	84 83       	std	Z+4, r24	; 0x04
  conn->rport = HTONS(rport);
     d94:	87 2f       	mov	r24, r23
     d96:	99 27       	eor	r25, r25
     d98:	36 2f       	mov	r19, r22
     d9a:	22 27       	eor	r18, r18
     d9c:	82 2b       	or	r24, r18
     d9e:	93 2b       	or	r25, r19
     da0:	97 83       	std	Z+7, r25	; 0x07
     da2:	86 83       	std	Z+6, r24	; 0x06
  conn->ripaddr[0] = ripaddr[0];
     da4:	8d 91       	ld	r24, X+
     da6:	9c 91       	ld	r25, X
     da8:	11 97       	sbiw	r26, 0x01	; 1
     daa:	91 83       	std	Z+1, r25	; 0x01
     dac:	80 83       	st	Z, r24
  conn->ripaddr[1] = ripaddr[1];
     dae:	ed 01       	movw	r28, r26
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
     db4:	93 83       	std	Z+3, r25	; 0x03
     db6:	82 83       	std	Z+2, r24	; 0x02
  
  return conn;
}
     db8:	cf 01       	movw	r24, r30
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <uip_udp_listen>:


struct uip_udp_conn *
uip_udp_listen(u16_t *ripaddr, u16_t lport)
{
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	dc 01       	movw	r26, r24
	register struct uip_udp_conn *conn;

	conn = 0;
	for(c = 0; c < UIP_UDP_CONNS; ++c) {
     dc6:	10 92 40 03 	sts	0x0340, r1
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	15 c0       	rjmp	.+42     	; 0xdf8 <uip_udp_listen+0x38>
     dce:	24 2f       	mov	r18, r20
     dd0:	2f 5f       	subi	r18, 0xFF	; 255
		if(uip_udp_conns[c].lport == 0) {
     dd2:	e4 2f       	mov	r30, r20
     dd4:	ff 27       	eor	r31, r31
     dd6:	53 e0       	ldi	r21, 0x03	; 3
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	5a 95       	dec	r21
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <uip_udp_listen+0x18>
     de0:	eb 5e       	subi	r30, 0xEB	; 235
     de2:	f5 4f       	sbci	r31, 0xF5	; 245
     de4:	84 81       	ldd	r24, Z+4	; 0x04
     de6:	95 81       	ldd	r25, Z+5	; 0x05
     de8:	89 2b       	or	r24, r25
     dea:	29 f4       	brne	.+10     	; 0xdf6 <uip_udp_listen+0x36>
     dec:	40 93 40 03 	sts	0x0340, r20
			conn = &uip_udp_conns[c];
			break;
		}
	}

	if(conn == 0) {
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	49 f4       	brne	.+18     	; 0xe06 <uip_udp_listen+0x46>
     df4:	1c c0       	rjmp	.+56     	; 0xe2e <uip_udp_listen+0x6e>
     df6:	42 2f       	mov	r20, r18
uip_udp_listen(u16_t *ripaddr, u16_t lport)
{
	register struct uip_udp_conn *conn;

	conn = 0;
	for(c = 0; c < UIP_UDP_CONNS; ++c) {
     df8:	44 30       	cpi	r20, 0x04	; 4
     dfa:	48 f3       	brcs	.-46     	; 0xdce <uip_udp_listen+0xe>
     dfc:	40 93 40 03 	sts	0x0340, r20
     e00:	e0 e0       	ldi	r30, 0x00	; 0
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <uip_udp_listen+0x6e>

	if(conn == 0) {
		return 0;
	}

	conn->lport = HTONS(lport);
     e06:	87 2f       	mov	r24, r23
     e08:	99 27       	eor	r25, r25
     e0a:	36 2f       	mov	r19, r22
     e0c:	22 27       	eor	r18, r18
     e0e:	82 2b       	or	r24, r18
     e10:	93 2b       	or	r25, r19
     e12:	95 83       	std	Z+5, r25	; 0x05
     e14:	84 83       	std	Z+4, r24	; 0x04
	conn->rport = HTONS(lport);
     e16:	97 83       	std	Z+7, r25	; 0x07
     e18:	86 83       	std	Z+6, r24	; 0x06
	conn->ripaddr[0] = ripaddr[0];
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
	conn->ripaddr[1] = ripaddr[1];
     e24:	ed 01       	movw	r28, r26
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	93 83       	std	Z+3, r25	; 0x03
     e2c:	82 83       	std	Z+2, r24	; 0x02


	return conn;
}
     e2e:	cf 01       	movw	r24, r30
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <htons>:
  return;
}
/*-----------------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
     e36:	9c 01       	movw	r18, r24
     e38:	89 2f       	mov	r24, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	32 2f       	mov	r19, r18
     e3e:	22 27       	eor	r18, r18
  return HTONS(val);
}
     e40:	82 2b       	or	r24, r18
     e42:	93 2b       	or	r25, r19
     e44:	08 95       	ret

00000e46 <uip_process>:
  uip_conn->rcv_nxt[3] = uip_acc32[3];
}
/*-----------------------------------------------------------------------------------*/
void
uip_process(u8_t flag)
{
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
  register struct uip_conn *uip_connr = uip_conn;
  register struct uip_udp_conn *conn ;
	  
  uip_appdata = &uip_buf[40 + UIP_LLH_LEN];
     e4e:	cb e6       	ldi	r28, 0x6B	; 107
     e50:	d4 e0       	ldi	r29, 0x04	; 4
     e52:	d0 93 30 04 	sts	0x0430, r29
     e56:	c0 93 2f 04 	sts	0x042F, r28
    }
    goto drop;
  }
#endif
#if UIP_UDP 
  if(flag == UIP_UDP_TIMER) {
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	f9 f4       	brne	.+62     	; 0xe9c <uip_process+0x56>
    if(uip_udp_conn->lport != 0) {
     e5e:	e0 91 2d 04 	lds	r30, 0x042D
     e62:	f0 91 2e 04 	lds	r31, 0x042E
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	95 81       	ldd	r25, Z+5	; 0x05
     e6a:	89 2b       	or	r24, r25
     e6c:	09 f4       	brne	.+2      	; 0xe70 <uip_process+0x2a>
     e6e:	8d c1       	rjmp	.+794    	; 0x118a <__stack+0x8b>
      uip_appdata = &uip_buf[UIP_LLH_LEN + 28];
     e70:	2c 97       	sbiw	r28, 0x0c	; 12
     e72:	d0 93 30 04 	sts	0x0430, r29
     e76:	c0 93 2f 04 	sts	0x042F, r28
     e7a:	2c 96       	adiw	r28, 0x0c	; 12
      uip_len = uip_slen = 0;
     e7c:	10 92 14 0a 	sts	0x0A14, r1
     e80:	10 92 13 0a 	sts	0x0A13, r1
     e84:	80 91 13 0a 	lds	r24, 0x0A13
     e88:	90 91 14 0a 	lds	r25, 0x0A14
     e8c:	90 93 25 04 	sts	0x0425, r25
     e90:	80 93 24 04 	sts	0x0424, r24
      uip_flags = UIP_POLL;
     e94:	88 e0       	ldi	r24, 0x08	; 8
     e96:	80 93 2c 04 	sts	0x042C, r24
     e9a:	e7 c0       	rjmp	.+462    	; 0x106a <uip_process+0x224>


  /* Start of IPv4 input header processing code. */
  
  /* Check validity of the IP header. */  
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
     e9c:	8e 01       	movw	r16, r28
     e9e:	08 52       	subi	r16, 0x28	; 40
     ea0:	10 40       	sbci	r17, 0x00	; 0
     ea2:	80 91 43 04 	lds	r24, 0x0443
     ea6:	85 34       	cpi	r24, 0x45	; 69
     ea8:	09 f0       	breq	.+2      	; 0xeac <uip_process+0x66>
     eaa:	6f c1       	rjmp	.+734    	; 0x118a <__stack+0x8b>
  
  /* Check the size of the packet. If the size reported to us in
     uip_len doesn't match the size reported in the IP header, there
     has been a transmission error and we drop the packet. */
  
  if(BUF->len[0] != (uip_len >> 8)) { /* IP length, high byte. */
     eac:	20 91 45 04 	lds	r18, 0x0445
     eb0:	80 91 24 04 	lds	r24, 0x0424
     eb4:	90 91 25 04 	lds	r25, 0x0425
     eb8:	33 27       	eor	r19, r19
     eba:	89 2f       	mov	r24, r25
     ebc:	99 27       	eor	r25, r25
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	69 f0       	breq	.+26     	; 0xede <uip_process+0x98>
    uip_len = (uip_len & 0xff) | (BUF->len[0] << 8);
     ec4:	80 91 24 04 	lds	r24, 0x0424
     ec8:	90 91 25 04 	lds	r25, 0x0425
     ecc:	32 2f       	mov	r19, r18
     ece:	22 27       	eor	r18, r18
     ed0:	90 70       	andi	r25, 0x00	; 0
     ed2:	28 2b       	or	r18, r24
     ed4:	39 2b       	or	r19, r25
     ed6:	30 93 25 04 	sts	0x0425, r19
     eda:	20 93 24 04 	sts	0x0424, r18
  }
  if(BUF->len[1] != (uip_len & 0xff)) { /* IP length, low byte. */
     ede:	20 91 46 04 	lds	r18, 0x0446
     ee2:	80 91 24 04 	lds	r24, 0x0424
     ee6:	90 91 25 04 	lds	r25, 0x0425
     eea:	33 27       	eor	r19, r19
     eec:	90 70       	andi	r25, 0x00	; 0
     eee:	28 17       	cp	r18, r24
     ef0:	39 07       	cpc	r19, r25
     ef2:	59 f0       	breq	.+22     	; 0xf0a <uip_process+0xc4>
    uip_len = (uip_len & 0xff00) | BUF->len[1];
     ef4:	80 91 24 04 	lds	r24, 0x0424
     ef8:	90 91 25 04 	lds	r25, 0x0425
     efc:	80 70       	andi	r24, 0x00	; 0
     efe:	28 2b       	or	r18, r24
     f00:	39 2b       	or	r19, r25
     f02:	30 93 25 04 	sts	0x0425, r19
     f06:	20 93 24 04 	sts	0x0424, r18
  }

  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
     f0a:	80 91 49 04 	lds	r24, 0x0449
     f0e:	99 27       	eor	r25, r25
     f10:	8f 73       	andi	r24, 0x3F	; 63
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	89 2b       	or	r24, r25
     f16:	09 f0       	breq	.+2      	; 0xf1a <uip_process+0xd4>
     f18:	38 c1       	rjmp	.+624    	; 0x118a <__stack+0x8b>
     f1a:	80 91 4a 04 	lds	r24, 0x044A
     f1e:	88 23       	and	r24, r24
     f20:	09 f0       	breq	.+2      	; 0xf24 <uip_process+0xde>
     f22:	33 c1       	rjmp	.+614    	; 0x118a <__stack+0x8b>
    }
  }
#endif /* UIP_PINGADDRCONF */
  
  /* Check if the packet is destined for our IP address. */  
  if(BUF->destipaddr[0] != uip_hostaddr[0]) {
     f24:	80 91 53 04 	lds	r24, 0x0453
     f28:	90 91 54 04 	lds	r25, 0x0454
     f2c:	80 5c       	subi	r24, 0xC0	; 192
     f2e:	98 4a       	sbci	r25, 0xA8	; 168
     f30:	09 f0       	breq	.+2      	; 0xf34 <uip_process+0xee>
     f32:	2b c1       	rjmp	.+598    	; 0x118a <__stack+0x8b>
    UIP_STAT(++uip_stat.ip.drop);
    UIP_LOG("ip: packet not for us.");        
    goto drop;
  }
  if(BUF->destipaddr[1] != uip_hostaddr[1]) {
     f34:	80 91 55 04 	lds	r24, 0x0455
     f38:	90 91 56 04 	lds	r25, 0x0456
     f3c:	80 50       	subi	r24, 0x00	; 0
     f3e:	92 40       	sbci	r25, 0x02	; 2
     f40:	09 f0       	breq	.+2      	; 0xf44 <uip_process+0xfe>
     f42:	23 c1       	rjmp	.+582    	; 0x118a <__stack+0x8b>
    UIP_STAT(++uip_stat.ip.drop);
    UIP_LOG("ip: packet not for us.");        
    goto drop;
  }

  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
     f44:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <uip_ipchksum>
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	09 f0       	breq	.+2      	; 0xf50 <uip_process+0x10a>
     f4e:	1d c1       	rjmp	.+570    	; 0x118a <__stack+0x8b>
                                     to the tcp_input label. */
    goto tcp_input;
#endif

#if UIP_UDP
  if(BUF->proto == UIP_PROTO_UDP)
     f50:	80 91 4c 04 	lds	r24, 0x044C
     f54:	81 31       	cpi	r24, 0x11	; 17
     f56:	b9 f1       	breq	.+110    	; 0xfc6 <uip_process+0x180>
    goto udp_input;
#endif /* UIP_UDP */

  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	09 f0       	breq	.+2      	; 0xf5e <uip_process+0x118>
     f5c:	16 c1       	rjmp	.+556    	; 0x118a <__stack+0x8b>
  UIP_STAT(++uip_stat.icmp.recv);
  
  /* ICMP echo (i.e., ping) processing. This is simple, we only change
     the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
     checksum before we return the packet. */
  if(ICMPBUF->type != ICMP_ECHO) {
     f5e:	80 91 57 04 	lds	r24, 0x0457
     f62:	88 30       	cpi	r24, 0x08	; 8
     f64:	09 f0       	breq	.+2      	; 0xf68 <uip_process+0x122>
     f66:	11 c1       	rjmp	.+546    	; 0x118a <__stack+0x8b>
    uip_hostaddr[0] = BUF->destipaddr[0];
    uip_hostaddr[1] = BUF->destipaddr[1];
  }
#endif /* UIP_PINGADDRCONF */  
  
  ICMPBUF->type = ICMP_ECHO_REPLY;
     f68:	10 92 57 04 	sts	0x0457, r1
  
  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
     f6c:	80 91 59 04 	lds	r24, 0x0459
     f70:	90 91 5a 04 	lds	r25, 0x045A
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	87 3f       	cpi	r24, 0xF7	; 247
     f78:	92 07       	cpc	r25, r18
     f7a:	10 f0       	brcs	.+4      	; 0xf80 <uip_process+0x13a>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
     f7c:	09 96       	adiw	r24, 0x09	; 9
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <uip_process+0x13c>
  } else {
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
     f80:	08 96       	adiw	r24, 0x08	; 8
     f82:	90 93 5a 04 	sts	0x045A, r25
     f86:	80 93 59 04 	sts	0x0459, r24
  }
  
  /* Swap IP addresses. */
  tmp16 = BUF->destipaddr[0];
     f8a:	20 91 53 04 	lds	r18, 0x0453
     f8e:	30 91 54 04 	lds	r19, 0x0454
  BUF->destipaddr[0] = BUF->srcipaddr[0];
     f92:	80 91 4f 04 	lds	r24, 0x044F
     f96:	90 91 50 04 	lds	r25, 0x0450
     f9a:	f8 01       	movw	r30, r16
     f9c:	91 8b       	std	Z+17, r25	; 0x11
     f9e:	80 8b       	std	Z+16, r24	; 0x10
  BUF->srcipaddr[0] = tmp16;
     fa0:	35 87       	std	Z+13, r19	; 0x0d
     fa2:	24 87       	std	Z+12, r18	; 0x0c
  tmp16 = BUF->destipaddr[1];
     fa4:	20 91 55 04 	lds	r18, 0x0455
     fa8:	30 91 56 04 	lds	r19, 0x0456
     fac:	30 93 42 03 	sts	0x0342, r19
     fb0:	20 93 41 03 	sts	0x0341, r18
  BUF->destipaddr[1] = BUF->srcipaddr[1];
     fb4:	80 91 51 04 	lds	r24, 0x0451
     fb8:	90 91 52 04 	lds	r25, 0x0452
     fbc:	93 8b       	std	Z+19, r25	; 0x13
     fbe:	82 8b       	std	Z+18, r24	; 0x12
  BUF->srcipaddr[1] = tmp16;
     fc0:	37 87       	std	Z+15, r19	; 0x0f
     fc2:	26 87       	std	Z+14, r18	; 0x0e
     fc4:	e6 c0       	rjmp	.+460    	; 0x1192 <__stack+0x93>
    goto drop;
  }  
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
     fc6:	85 e1       	ldi	r24, 0x15	; 21
     fc8:	9a e0       	ldi	r25, 0x0A	; 10
     fca:	90 93 2e 04 	sts	0x042E, r25
     fce:	80 93 2d 04 	sts	0x042D, r24
     fd2:	2c c0       	rjmp	.+88     	; 0x102c <uip_process+0x1e6>
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
	   if(uip_udp_conn->lport != 0) {
     fd4:	24 81       	ldd	r18, Z+4	; 0x04
     fd6:	35 81       	ldd	r19, Z+5	; 0x05
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	11 f1       	breq	.+68     	; 0x1022 <uip_process+0x1dc>
	  //outgoing
		   if ( UDPBUF->destport == uip_udp_conn->lport &&
     fde:	80 91 59 04 	lds	r24, 0x0459
     fe2:	90 91 5a 04 	lds	r25, 0x045A
     fe6:	82 17       	cp	r24, r18
     fe8:	93 07       	cpc	r25, r19
     fea:	d9 f4       	brne	.+54     	; 0x1022 <uip_process+0x1dc>
     fec:	20 91 57 04 	lds	r18, 0x0457
     ff0:	30 91 58 04 	lds	r19, 0x0458
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	91 f4       	brne	.+36     	; 0x1022 <uip_process+0x1dc>
     ffe:	20 91 4f 04 	lds	r18, 0x044F
    1002:	30 91 50 04 	lds	r19, 0x0450
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	28 17       	cp	r18, r24
    100c:	39 07       	cpc	r19, r25
    100e:	49 f4       	brne	.+18     	; 0x1022 <uip_process+0x1dc>
    1010:	20 91 51 04 	lds	r18, 0x0451
    1014:	30 91 52 04 	lds	r19, 0x0452
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	28 17       	cp	r18, r24
    101e:	39 07       	cpc	r19, r25
    1020:	71 f0       	breq	.+28     	; 0x103e <uip_process+0x1f8>
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
    1022:	38 96       	adiw	r30, 0x08	; 8
    1024:	f0 93 2e 04 	sts	0x042E, r31
    1028:	e0 93 2d 04 	sts	0x042D, r30
  }  
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
    102c:	e0 91 2d 04 	lds	r30, 0x042D
    1030:	f0 91 2e 04 	lds	r31, 0x042E
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	e5 33       	cpi	r30, 0x35	; 53
    1038:	f2 07       	cpc	r31, r18
    103a:	60 f2       	brcs	.-104    	; 0xfd4 <uip_process+0x18e>
    103c:	a6 c0       	rjmp	.+332    	; 0x118a <__stack+0x8b>
    }
 */
  goto drop;
  
 udp_found:
  uip_len = uip_len - 28;
    103e:	80 91 24 04 	lds	r24, 0x0424
    1042:	90 91 25 04 	lds	r25, 0x0425
    1046:	4c 97       	sbiw	r24, 0x1c	; 28
    1048:	90 93 25 04 	sts	0x0425, r25
    104c:	80 93 24 04 	sts	0x0424, r24
  uip_appdata = &uip_buf[UIP_LLH_LEN + 28];
    1050:	8f e5       	ldi	r24, 0x5F	; 95
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	90 93 30 04 	sts	0x0430, r25
    1058:	80 93 2f 04 	sts	0x042F, r24
  uip_flags = UIP_NEWDATA;
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	80 93 2c 04 	sts	0x042C, r24
  uip_slen = 0;
    1062:	10 92 14 0a 	sts	0x0A14, r1
    1066:	10 92 13 0a 	sts	0x0A13, r1
  UIP_UDP_APPCALL();
    106a:	0e 94 0c 02 	call	0x418	; 0x418 <udp_connection_app>
 udp_send:
  if(uip_slen == 0) {
    106e:	80 91 13 0a 	lds	r24, 0x0A13
    1072:	90 91 14 0a 	lds	r25, 0x0A14
    1076:	89 2b       	or	r24, r25
    1078:	09 f4       	brne	.+2      	; 0x107c <uip_process+0x236>
    107a:	87 c0       	rjmp	.+270    	; 0x118a <__stack+0x8b>
    goto drop;      
  }
  uip_len = uip_slen + 28;
    107c:	80 91 13 0a 	lds	r24, 0x0A13
    1080:	90 91 14 0a 	lds	r25, 0x0A14
    1084:	4c 96       	adiw	r24, 0x1c	; 28
    1086:	90 93 25 04 	sts	0x0425, r25
    108a:	80 93 24 04 	sts	0x0424, r24

  BUF->len[0] = (uip_len >> 8);
    108e:	80 91 24 04 	lds	r24, 0x0424
    1092:	90 91 25 04 	lds	r25, 0x0425
    1096:	89 2f       	mov	r24, r25
    1098:	99 27       	eor	r25, r25
    109a:	80 93 45 04 	sts	0x0445, r24
  BUF->len[1] = (uip_len & 0xff);
    109e:	80 91 24 04 	lds	r24, 0x0424
    10a2:	90 91 25 04 	lds	r25, 0x0425
    10a6:	80 93 46 04 	sts	0x0446, r24
  
  BUF->proto = UIP_PROTO_UDP;
    10aa:	81 e1       	ldi	r24, 0x11	; 17
    10ac:	80 93 4c 04 	sts	0x044C, r24

  UDPBUF->udplen = HTONS(uip_slen + 8);
    10b0:	20 91 13 0a 	lds	r18, 0x0A13
    10b4:	30 91 14 0a 	lds	r19, 0x0A14
    10b8:	80 91 13 0a 	lds	r24, 0x0A13
    10bc:	90 91 14 0a 	lds	r25, 0x0A14
    10c0:	08 96       	adiw	r24, 0x08	; 8
    10c2:	89 2f       	mov	r24, r25
    10c4:	99 27       	eor	r25, r25
    10c6:	28 5f       	subi	r18, 0xF8	; 248
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	32 2f       	mov	r19, r18
    10cc:	22 27       	eor	r18, r18
    10ce:	82 2b       	or	r24, r18
    10d0:	93 2b       	or	r25, r19
    10d2:	90 93 5c 04 	sts	0x045C, r25
    10d6:	80 93 5b 04 	sts	0x045B, r24
  UDPBUF->udpchksum = 0;
    10da:	10 92 5e 04 	sts	0x045E, r1
    10de:	10 92 5d 04 	sts	0x045D, r1
  if(UDPBUF->udpchksum == 0) {
    UDPBUF->udpchksum = 0xffff;
  }
#endif /* UIP_UDP_CHECKSUMS */

  BUF->srcport  = uip_udp_conn->lport;
    10e2:	e0 91 2d 04 	lds	r30, 0x042D
    10e6:	f0 91 2e 04 	lds	r31, 0x042E
    10ea:	84 81       	ldd	r24, Z+4	; 0x04
    10ec:	95 81       	ldd	r25, Z+5	; 0x05
    10ee:	90 93 58 04 	sts	0x0458, r25
    10f2:	80 93 57 04 	sts	0x0457, r24
  BUF->destport = uip_udp_conn->rport;
    10f6:	86 81       	ldd	r24, Z+6	; 0x06
    10f8:	97 81       	ldd	r25, Z+7	; 0x07
    10fa:	90 93 5a 04 	sts	0x045A, r25
    10fe:	80 93 59 04 	sts	0x0459, r24

  BUF->srcipaddr[0] = uip_hostaddr[0];
    1102:	80 ec       	ldi	r24, 0xC0	; 192
    1104:	98 ea       	ldi	r25, 0xA8	; 168
    1106:	90 93 50 04 	sts	0x0450, r25
    110a:	80 93 4f 04 	sts	0x044F, r24
  BUF->srcipaddr[1] = uip_hostaddr[1];
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	90 93 52 04 	sts	0x0452, r25
    1116:	80 93 51 04 	sts	0x0451, r24
  BUF->destipaddr[0] = uip_udp_conn->ripaddr[0];
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	90 93 54 04 	sts	0x0454, r25
    1122:	80 93 53 04 	sts	0x0453, r24
  BUF->destipaddr[1] = uip_udp_conn->ripaddr[1];
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	90 93 56 04 	sts	0x0456, r25
    112e:	80 93 55 04 	sts	0x0455, r24
 
  uip_appdata = &uip_buf[UIP_LLH_LEN + 40];
    1132:	d0 93 30 04 	sts	0x0430, r29
    1136:	c0 93 2f 04 	sts	0x042F, r28
  BUF->tcpchksum = 0;
  BUF->tcpchksum = ~(uip_tcpchksum());
#endif
 ip_send_nolen:

  BUF->vhl = 0x45;
    113a:	85 e4       	ldi	r24, 0x45	; 69
    113c:	80 93 43 04 	sts	0x0443, r24
  BUF->tos = 0;
    1140:	10 92 44 04 	sts	0x0444, r1
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    1144:	10 92 4a 04 	sts	0x044A, r1
    1148:	10 92 49 04 	sts	0x0449, r1
  BUF->ttl  = UIP_TTL;
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	80 93 4b 04 	sts	0x044B, r24
  ++ipid;
    1152:	80 91 3c 03 	lds	r24, 0x033C
    1156:	90 91 3d 03 	lds	r25, 0x033D
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	90 93 3d 03 	sts	0x033D, r25
    1160:	80 93 3c 03 	sts	0x033C, r24
  BUF->ipid[0] = ipid >> 8;
    1164:	29 2f       	mov	r18, r25
    1166:	33 27       	eor	r19, r19
    1168:	20 93 47 04 	sts	0x0447, r18
  BUF->ipid[1] = ipid & 0xff;
    116c:	80 93 48 04 	sts	0x0448, r24
  
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
    1170:	10 92 4e 04 	sts	0x044E, r1
    1174:	10 92 4d 04 	sts	0x044D, r1
  BUF->ipchksum = ~(uip_ipchksum());
    1178:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <uip_ipchksum>
    117c:	80 95       	com	r24
    117e:	90 95       	com	r25
    1180:	90 93 4e 04 	sts	0x044E, r25
    1184:	80 93 4d 04 	sts	0x044D, r24
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <__stack+0x93>
 send:
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  return;
 drop:
  uip_len = 0;
    118a:	10 92 25 04 	sts	0x0425, r1
    118e:	10 92 24 04 	sts	0x0424, r1
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <uip_udp_sendto>:


	return conn;
}

void uip_udp_sendto(char* buf, int slen, struct uip_udp_conn* conn) {
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	dc 01       	movw	r26, r24
    11a2:	fa 01       	movw	r30, r20
	int i;
	uip_udp_conn = conn;
    11a4:	50 93 2e 04 	sts	0x042E, r21
    11a8:	40 93 2d 04 	sts	0x042D, r20


	uip_len = slen + 28;
    11ac:	64 5e       	subi	r22, 0xE4	; 228
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	70 93 25 04 	sts	0x0425, r23
    11b4:	60 93 24 04 	sts	0x0424, r22
    11b8:	6c 51       	subi	r22, 0x1C	; 28
    11ba:	70 40       	sbci	r23, 0x00	; 0

	BUF->len[0] = (uip_len >> 8);
    11bc:	c3 e4       	ldi	r28, 0x43	; 67
    11be:	d4 e0       	ldi	r29, 0x04	; 4
    11c0:	80 91 24 04 	lds	r24, 0x0424
    11c4:	90 91 25 04 	lds	r25, 0x0425
    11c8:	89 2f       	mov	r24, r25
    11ca:	99 27       	eor	r25, r25
    11cc:	80 93 45 04 	sts	0x0445, r24
	BUF->len[1] = (uip_len & 0xff);
    11d0:	80 91 24 04 	lds	r24, 0x0424
    11d4:	90 91 25 04 	lds	r25, 0x0425
    11d8:	80 93 46 04 	sts	0x0446, r24

	BUF->proto = UIP_PROTO_UDP;
    11dc:	81 e1       	ldi	r24, 0x11	; 17
    11de:	80 93 4c 04 	sts	0x044C, r24

	UDPBUF->udplen = HTONS(slen + 8);
    11e2:	cb 01       	movw	r24, r22
    11e4:	08 96       	adiw	r24, 0x08	; 8
    11e6:	29 2f       	mov	r18, r25
    11e8:	33 27       	eor	r19, r19
    11ea:	98 2f       	mov	r25, r24
    11ec:	88 27       	eor	r24, r24
    11ee:	28 2b       	or	r18, r24
    11f0:	39 2b       	or	r19, r25
    11f2:	30 93 5c 04 	sts	0x045C, r19
    11f6:	20 93 5b 04 	sts	0x045B, r18
	UDPBUF->udpchksum = 0;
    11fa:	10 92 5e 04 	sts	0x045E, r1
    11fe:	10 92 5d 04 	sts	0x045D, r1
/safdsadgasd
	UDPBUF->udpchksum = 0xffff;
	}
#endif /* UIP_UDP_CHECKSUMS */

	BUF->srcport  = uip_udp_conn->lport;
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	90 93 58 04 	sts	0x0458, r25
    120a:	80 93 57 04 	sts	0x0457, r24
	BUF->destport = uip_udp_conn->rport;
    120e:	86 81       	ldd	r24, Z+6	; 0x06
    1210:	97 81       	ldd	r25, Z+7	; 0x07
    1212:	90 93 5a 04 	sts	0x045A, r25
    1216:	80 93 59 04 	sts	0x0459, r24

	BUF->srcipaddr[0] = uip_hostaddr[0];
    121a:	80 ec       	ldi	r24, 0xC0	; 192
    121c:	98 ea       	ldi	r25, 0xA8	; 168
    121e:	90 93 50 04 	sts	0x0450, r25
    1222:	80 93 4f 04 	sts	0x044F, r24
	BUF->srcipaddr[1] = uip_hostaddr[1];
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	90 93 52 04 	sts	0x0452, r25
    122e:	80 93 51 04 	sts	0x0451, r24
	BUF->destipaddr[0] = uip_udp_conn->ripaddr[0];
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	90 93 54 04 	sts	0x0454, r25
    123a:	80 93 53 04 	sts	0x0453, r24
	BUF->destipaddr[1] = uip_udp_conn->ripaddr[1];
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	90 93 56 04 	sts	0x0456, r25
    1246:	80 93 55 04 	sts	0x0455, r24
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	0a c0       	rjmp	.+20     	; 0x1264 <uip_udp_sendto+0xc8>

	for (i=0; i<slen; ++i) {
    1250:	fd 01       	movw	r30, r26
    1252:	e2 0f       	add	r30, r18
    1254:	f3 1f       	adc	r31, r19
		uip_buf[i+42]=buf[i];
    1256:	80 81       	ld	r24, Z
    1258:	f9 01       	movw	r30, r18
    125a:	eb 5c       	subi	r30, 0xCB	; 203
    125c:	fb 4f       	sbci	r31, 0xFB	; 251
    125e:	82 a7       	std	Z+42, r24	; 0x2a
	BUF->srcipaddr[0] = uip_hostaddr[0];
	BUF->srcipaddr[1] = uip_hostaddr[1];
	BUF->destipaddr[0] = uip_udp_conn->ripaddr[0];
	BUF->destipaddr[1] = uip_udp_conn->ripaddr[1];

	for (i=0; i<slen; ++i) {
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	26 17       	cp	r18, r22
    1266:	37 07       	cpc	r19, r23
    1268:	9c f3       	brlt	.-26     	; 0x1250 <uip_udp_sendto+0xb4>
		uip_buf[i+42]=buf[i];
	}

	uip_appdata = &uip_buf[UIP_LLH_LEN + 40];
    126a:	8b e6       	ldi	r24, 0x6B	; 107
    126c:	94 e0       	ldi	r25, 0x04	; 4
    126e:	90 93 30 04 	sts	0x0430, r25
    1272:	80 93 2f 04 	sts	0x042F, r24

	BUF->vhl = 0x45;
    1276:	85 e4       	ldi	r24, 0x45	; 69
    1278:	80 93 43 04 	sts	0x0443, r24
	BUF->tos = 0;
    127c:	19 82       	std	Y+1, r1	; 0x01
	BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
    127e:	1f 82       	std	Y+7, r1	; 0x07
    1280:	1e 82       	std	Y+6, r1	; 0x06
	BUF->ttl  = UIP_TTL;
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	88 87       	std	Y+8, r24	; 0x08
	++ipid;
    1286:	80 91 3c 03 	lds	r24, 0x033C
    128a:	90 91 3d 03 	lds	r25, 0x033D
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	90 93 3d 03 	sts	0x033D, r25
    1294:	80 93 3c 03 	sts	0x033C, r24
	BUF->ipid[0] = ipid >> 8;
    1298:	29 2f       	mov	r18, r25
    129a:	33 27       	eor	r19, r19
    129c:	2c 83       	std	Y+4, r18	; 0x04
	BUF->ipid[1] = ipid & 0xff;
    129e:	8d 83       	std	Y+5, r24	; 0x05

	/* Calculate IP checksum. */
	BUF->ipchksum = 0;
    12a0:	1b 86       	std	Y+11, r1	; 0x0b
    12a2:	1a 86       	std	Y+10, r1	; 0x0a
	BUF->ipchksum = ~(uip_ipchksum());
    12a4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <uip_ipchksum>
    12a8:	80 95       	com	r24
    12aa:	90 95       	com	r25
    12ac:	9b 87       	std	Y+11, r25	; 0x0b
    12ae:	8a 87       	std	Y+10, r24	; 0x0a
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <uip_arp_timer>:
void
uip_arp_timer(void)
{
  struct arp_entry *tabptr;
  
  ++arptime;
    12b6:	80 91 75 03 	lds	r24, 0x0375
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	80 93 75 03 	sts	0x0375, r24
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    12c0:	10 92 73 03 	sts	0x0373, r1
    12c4:	20 c0       	rjmp	.+64     	; 0x1306 <uip_arp_timer+0x50>
    tabptr = &arp_table[i];
    12c6:	8b e0       	ldi	r24, 0x0B	; 11
    12c8:	28 9f       	mul	r18, r24
    12ca:	f0 01       	movw	r30, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	ed 5b       	subi	r30, 0xBD	; 189
    12d0:	fc 4f       	sbci	r31, 0xFC	; 252
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	20 81       	ld	r18, Z
    12d8:	31 81       	ldd	r19, Z+1	; 0x01
    12da:	82 2b       	or	r24, r18
    12dc:	93 2b       	or	r25, r19
    12de:	89 2b       	or	r24, r25
    12e0:	69 f0       	breq	.+26     	; 0x12fc <uip_arp_timer+0x46>
    12e2:	80 91 75 03 	lds	r24, 0x0375
    12e6:	99 27       	eor	r25, r25
    12e8:	22 85       	ldd	r18, Z+10	; 0x0a
    12ea:	82 1b       	sub	r24, r18
    12ec:	91 09       	sbc	r25, r1
    12ee:	88 37       	cpi	r24, 0x78	; 120
    12f0:	91 05       	cpc	r25, r1
    12f2:	24 f0       	brlt	.+8      	; 0x12fc <uip_arp_timer+0x46>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
      memset(tabptr->ipaddr, 0, 4);
    12f4:	10 82       	st	Z, r1
    12f6:	11 82       	std	Z+1, r1	; 0x01
    12f8:	12 82       	std	Z+2, r1	; 0x02
    12fa:	13 82       	std	Z+3, r1	; 0x03
uip_arp_timer(void)
{
  struct arp_entry *tabptr;
  
  ++arptime;
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    12fc:	80 91 73 03 	lds	r24, 0x0373
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	80 93 73 03 	sts	0x0373, r24
    1306:	20 91 73 03 	lds	r18, 0x0373
    130a:	24 30       	cpi	r18, 0x04	; 4
    130c:	e0 f2       	brcs	.-72     	; 0x12c6 <uip_arp_timer+0x10>
    130e:	08 95       	ret

00001310 <uip_arp_init>:
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    1310:	10 92 73 03 	sts	0x0373, r1
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <uip_arp_init+0x20>
    memset(arp_table[i].ipaddr, 0, 4);
    1316:	eb e0       	ldi	r30, 0x0B	; 11
    1318:	8e 9f       	mul	r24, r30
    131a:	f0 01       	movw	r30, r0
    131c:	11 24       	eor	r1, r1
    131e:	ed 5b       	subi	r30, 0xBD	; 189
    1320:	fc 4f       	sbci	r31, 0xFC	; 252
    1322:	10 82       	st	Z, r1
    1324:	11 82       	std	Z+1, r1	; 0x01
    1326:	12 82       	std	Z+2, r1	; 0x02
    1328:	13 82       	std	Z+3, r1	; 0x03
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	80 93 73 03 	sts	0x0373, r24
    1330:	80 91 73 03 	lds	r24, 0x0373
    1334:	84 30       	cpi	r24, 0x04	; 4
    1336:	78 f3       	brcs	.-34     	; 0x1316 <uip_arp_init+0x6>
    1338:	08 95       	ret

0000133a <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* Check if the destination address is on the local network. */
  if((IPBUF->destipaddr[0] & uip_arp_netmask[0]) !=
    133e:	e0 91 53 04 	lds	r30, 0x0453
    1342:	f0 91 54 04 	lds	r31, 0x0454
    1346:	80 91 12 01 	lds	r24, 0x0112
    134a:	90 91 13 01 	lds	r25, 0x0113
    134e:	c0 91 0a 01 	lds	r28, 0x010A
    1352:	d0 91 0b 01 	lds	r29, 0x010B
    1356:	9c 01       	movw	r18, r24
    1358:	2e 23       	and	r18, r30
    135a:	3f 23       	and	r19, r31
    135c:	8c 23       	and	r24, r28
    135e:	9d 23       	and	r25, r29
    1360:	28 17       	cp	r18, r24
    1362:	39 07       	cpc	r19, r25
    1364:	a1 f4       	brne	.+40     	; 0x138e <uip_arp_out+0x54>
    1366:	60 91 55 04 	lds	r22, 0x0455
    136a:	70 91 56 04 	lds	r23, 0x0456
    136e:	80 91 14 01 	lds	r24, 0x0114
    1372:	90 91 15 01 	lds	r25, 0x0115
    1376:	ac 01       	movw	r20, r24
    1378:	46 23       	and	r20, r22
    137a:	57 23       	and	r21, r23
    137c:	20 91 0c 01 	lds	r18, 0x010C
    1380:	30 91 0d 01 	lds	r19, 0x010D
    1384:	82 23       	and	r24, r18
    1386:	93 23       	and	r25, r19
    1388:	48 17       	cp	r20, r24
    138a:	59 07       	cpc	r21, r25
    138c:	89 f0       	breq	.+34     	; 0x13b0 <uip_arp_out+0x76>
     (IPBUF->destipaddr[1] & uip_arp_netmask[1]) !=
     (uip_hostaddr[1] & uip_arp_netmask[1])) {
    /* Destination address was not on the local network, so we need to
       use the default router's IP address instead of the destination
       address when determining the MAC address. */
    ipaddr[0] = uip_arp_draddr[0];
    138e:	80 91 0e 01 	lds	r24, 0x010E
    1392:	90 91 0f 01 	lds	r25, 0x010F
    1396:	90 93 70 03 	sts	0x0370, r25
    139a:	80 93 6f 03 	sts	0x036F, r24
    ipaddr[1] = uip_arp_draddr[1];
    139e:	80 91 10 01 	lds	r24, 0x0110
    13a2:	90 91 11 01 	lds	r25, 0x0111
    13a6:	90 93 72 03 	sts	0x0372, r25
    13aa:	80 93 71 03 	sts	0x0371, r24
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <uip_arp_out+0x86>
  } else {
    /* Else, we use the destination IP address. */
    ipaddr[0] = IPBUF->destipaddr[0];
    13b0:	f0 93 70 03 	sts	0x0370, r31
    13b4:	e0 93 6f 03 	sts	0x036F, r30
    ipaddr[1] = IPBUF->destipaddr[1];
    13b8:	70 93 72 03 	sts	0x0372, r23
    13bc:	60 93 71 03 	sts	0x0371, r22
  }
      
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    13c0:	10 92 73 03 	sts	0x0373, r1
    tabptr = &arp_table[i];
    if(ipaddr[0] == tabptr->ipaddr[0] &&
    13c4:	60 91 6f 03 	lds	r22, 0x036F
    13c8:	70 91 70 03 	lds	r23, 0x0370
    13cc:	40 91 71 03 	lds	r20, 0x0371
    13d0:	50 91 72 03 	lds	r21, 0x0372
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <uip_arp_out+0xc6>
    ipaddr[0] = IPBUF->destipaddr[0];
    ipaddr[1] = IPBUF->destipaddr[1];
  }
      
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    tabptr = &arp_table[i];
    13d8:	8b e0       	ldi	r24, 0x0B	; 11
    13da:	28 9f       	mul	r18, r24
    13dc:	f0 01       	movw	r30, r0
    13de:	11 24       	eor	r1, r1
    13e0:	ed 5b       	subi	r30, 0xBD	; 189
    13e2:	fc 4f       	sbci	r31, 0xFC	; 252
    if(ipaddr[0] == tabptr->ipaddr[0] &&
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	68 17       	cp	r22, r24
    13ea:	79 07       	cpc	r23, r25
    13ec:	41 f4       	brne	.+16     	; 0x13fe <uip_arp_out+0xc4>
    13ee:	82 81       	ldd	r24, Z+2	; 0x02
    13f0:	93 81       	ldd	r25, Z+3	; 0x03
    13f2:	48 17       	cp	r20, r24
    13f4:	59 07       	cpc	r21, r25
    13f6:	19 f4       	brne	.+6      	; 0x13fe <uip_arp_out+0xc4>
    13f8:	20 93 73 03 	sts	0x0373, r18
    13fc:	69 c0       	rjmp	.+210    	; 0x14d0 <uip_arp_out+0x196>
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    /* Else, we use the destination IP address. */
    ipaddr[0] = IPBUF->destipaddr[0];
    ipaddr[1] = IPBUF->destipaddr[1];
  }
      
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    1400:	24 30       	cpi	r18, 0x04	; 4
    1402:	50 f3       	brcs	.-44     	; 0x13d8 <uip_arp_out+0x9e>
    1404:	20 93 73 03 	sts	0x0373, r18
    if(ipaddr[0] == tabptr->ipaddr[0] &&
       ipaddr[1] == tabptr->ipaddr[1])
      break;
  }

  if(i == UIP_ARPTAB_SIZE) {
    1408:	24 30       	cpi	r18, 0x04	; 4
    140a:	09 f0       	breq	.+2      	; 0x140e <uip_arp_out+0xd4>
    140c:	61 c0       	rjmp	.+194    	; 0x14d0 <uip_arp_out+0x196>
    /* The destination address was not in our ARP table, so we
       overwrite the IP packet with an ARP request. */

    memset(BUF->ethhdr.dest.addr, 0xff, 6);
    140e:	46 e0       	ldi	r20, 0x06	; 6
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	6f ef       	ldi	r22, 0xFF	; 255
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	85 e3       	ldi	r24, 0x35	; 53
    1418:	94 e0       	ldi	r25, 0x04	; 4
    141a:	0e 94 97 10 	call	0x212e	; 0x212e <memset>
    memset(BUF->dhwaddr.addr, 0x00, 6);
    141e:	e5 e5       	ldi	r30, 0x55	; 85
    1420:	f4 e0       	ldi	r31, 0x04	; 4
    1422:	86 e0       	ldi	r24, 0x06	; 6
    1424:	df 01       	movw	r26, r30
    1426:	1d 92       	st	X+, r1
    1428:	8a 95       	dec	r24
    142a:	e9 f7       	brne	.-6      	; 0x1426 <uip_arp_out+0xec>
    memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    142c:	7a 97       	sbiw	r30, 0x1a	; 26
    142e:	a6 e1       	ldi	r26, 0x16	; 22
    1430:	b1 e0       	ldi	r27, 0x01	; 1
    1432:	86 e0       	ldi	r24, 0x06	; 6
    1434:	0d 90       	ld	r0, X+
    1436:	01 92       	st	Z+, r0
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	e1 f7       	brne	.-8      	; 0x1434 <uip_arp_out+0xfa>
    memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    143c:	ab e4       	ldi	r26, 0x4B	; 75
    143e:	b4 e0       	ldi	r27, 0x04	; 4
    1440:	e6 e1       	ldi	r30, 0x16	; 22
    1442:	f1 e0       	ldi	r31, 0x01	; 1
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	01 90       	ld	r0, Z+
    1448:	0d 92       	st	X+, r0
    144a:	81 50       	subi	r24, 0x01	; 1
    144c:	e1 f7       	brne	.-8      	; 0x1446 <uip_arp_out+0x10c>
    
    BUF->dipaddr[0] = ipaddr[0];
    144e:	80 91 6f 03 	lds	r24, 0x036F
    1452:	90 91 70 03 	lds	r25, 0x0370
    1456:	90 93 5c 04 	sts	0x045C, r25
    145a:	80 93 5b 04 	sts	0x045B, r24
    BUF->dipaddr[1] = ipaddr[1];
    145e:	80 91 71 03 	lds	r24, 0x0371
    1462:	90 91 72 03 	lds	r25, 0x0372
    1466:	90 93 5e 04 	sts	0x045E, r25
    146a:	80 93 5d 04 	sts	0x045D, r24
    BUF->sipaddr[0] = uip_hostaddr[0];
    146e:	d0 93 52 04 	sts	0x0452, r29
    1472:	c0 93 51 04 	sts	0x0451, r28
    BUF->sipaddr[1] = uip_hostaddr[1];
    1476:	80 91 0c 01 	lds	r24, 0x010C
    147a:	90 91 0d 01 	lds	r25, 0x010D
    147e:	90 93 54 04 	sts	0x0454, r25
    1482:	80 93 53 04 	sts	0x0453, r24
    BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	90 93 4a 04 	sts	0x044A, r25
    148e:	80 93 49 04 	sts	0x0449, r24
    BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
    1492:	90 93 44 04 	sts	0x0444, r25
    1496:	80 93 43 04 	sts	0x0443, r24
    BUF->protocol = HTONS(UIP_ETHTYPE_IP);
    149a:	88 e0       	ldi	r24, 0x08	; 8
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	90 93 46 04 	sts	0x0446, r25
    14a2:	80 93 45 04 	sts	0x0445, r24
    BUF->hwlen = 6;
    14a6:	86 e0       	ldi	r24, 0x06	; 6
    14a8:	80 93 47 04 	sts	0x0447, r24
    BUF->protolen = 4;
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	80 93 48 04 	sts	0x0448, r24
    BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
    14b2:	88 e0       	ldi	r24, 0x08	; 8
    14b4:	96 e0       	ldi	r25, 0x06	; 6
    14b6:	90 93 42 04 	sts	0x0442, r25
    14ba:	80 93 41 04 	sts	0x0441, r24

    uip_appdata = &uip_buf[40 + UIP_LLH_LEN];
    14be:	8b e6       	ldi	r24, 0x6B	; 107
    14c0:	94 e0       	ldi	r25, 0x04	; 4
    14c2:	90 93 30 04 	sts	0x0430, r25
    14c6:	80 93 2f 04 	sts	0x042F, r24
    
    uip_len = sizeof(struct arp_hdr);
    14ca:	8a e2       	ldi	r24, 0x2A	; 42
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	1c c0       	rjmp	.+56     	; 0x1508 <uip_arp_out+0x1ce>
    return;
  }

  /* Build an ethernet header. */
  memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
    14d0:	a5 e3       	ldi	r26, 0x35	; 53
    14d2:	b4 e0       	ldi	r27, 0x04	; 4
    14d4:	34 96       	adiw	r30, 0x04	; 4
    14d6:	86 e0       	ldi	r24, 0x06	; 6
    14d8:	01 90       	ld	r0, Z+
    14da:	0d 92       	st	X+, r0
    14dc:	81 50       	subi	r24, 0x01	; 1
    14de:	e1 f7       	brne	.-8      	; 0x14d8 <uip_arp_out+0x19e>
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    14e0:	ab e3       	ldi	r26, 0x3B	; 59
    14e2:	b4 e0       	ldi	r27, 0x04	; 4
    14e4:	e6 e1       	ldi	r30, 0x16	; 22
    14e6:	f1 e0       	ldi	r31, 0x01	; 1
    14e8:	86 e0       	ldi	r24, 0x06	; 6
    14ea:	01 90       	ld	r0, Z+
    14ec:	0d 92       	st	X+, r0
    14ee:	81 50       	subi	r24, 0x01	; 1
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <uip_arp_out+0x1b0>
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
    14f2:	88 e0       	ldi	r24, 0x08	; 8
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	e5 e3       	ldi	r30, 0x35	; 53
    14f8:	f4 e0       	ldi	r31, 0x04	; 4
    14fa:	95 87       	std	Z+13, r25	; 0x0d
    14fc:	84 87       	std	Z+12, r24	; 0x0c

  uip_len += sizeof(struct uip_eth_hdr);
    14fe:	80 91 24 04 	lds	r24, 0x0424
    1502:	90 91 25 04 	lds	r25, 0x0425
    1506:	0e 96       	adiw	r24, 0x0e	; 14
    1508:	90 93 25 04 	sts	0x0425, r25
    150c:	80 93 24 04 	sts	0x0424, r24
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	dc 01       	movw	r26, r24
    1522:	7b 01       	movw	r14, r22
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    1524:	10 92 73 03 	sts	0x0373, r1
    1528:	10 e0       	ldi	r17, 0x00	; 0
    152a:	28 c0       	rjmp	.+80     	; 0x157c <uip_arp_update+0x66>

    tabptr = &arp_table[i];
    152c:	8b e0       	ldi	r24, 0x0B	; 11
    152e:	18 9f       	mul	r17, r24
    1530:	e0 01       	movw	r28, r0
    1532:	11 24       	eor	r1, r1
    1534:	cd 5b       	subi	r28, 0xBD	; 189
    1536:	dc 4f       	sbci	r29, 0xFC	; 252
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
    1538:	48 81       	ld	r20, Y
    153a:	59 81       	ldd	r21, Y+1	; 0x01
    153c:	41 15       	cp	r20, r1
    153e:	51 05       	cpc	r21, r1
    1540:	e1 f0       	breq	.+56     	; 0x157a <uip_arp_update+0x64>
    1542:	2a 81       	ldd	r18, Y+2	; 0x02
    1544:	3b 81       	ldd	r19, Y+3	; 0x03
    1546:	21 15       	cp	r18, r1
    1548:	31 05       	cpc	r19, r1
    154a:	b9 f0       	breq	.+46     	; 0x157a <uip_arp_update+0x64>
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
    154c:	8d 91       	ld	r24, X+
    154e:	9c 91       	ld	r25, X
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	84 17       	cp	r24, r20
    1554:	95 07       	cpc	r25, r21
    1556:	89 f4       	brne	.+34     	; 0x157a <uip_arp_update+0x64>
    1558:	fd 01       	movw	r30, r26
    155a:	82 81       	ldd	r24, Z+2	; 0x02
    155c:	93 81       	ldd	r25, Z+3	; 0x03
    155e:	82 17       	cp	r24, r18
    1560:	93 07       	cpc	r25, r19
    1562:	59 f4       	brne	.+22     	; 0x157a <uip_arp_update+0x64>
    1564:	10 93 73 03 	sts	0x0373, r17
	 ipaddr[1] == tabptr->ipaddr[1]) {
	 
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    1568:	de 01       	movw	r26, r28
    156a:	14 96       	adiw	r26, 0x04	; 4
    156c:	f7 01       	movw	r30, r14
    156e:	86 e0       	ldi	r24, 0x06	; 6
    1570:	01 90       	ld	r0, Z+
    1572:	0d 92       	st	X+, r0
    1574:	81 50       	subi	r24, 0x01	; 1
    1576:	e1 f7       	brne	.-8      	; 0x1570 <uip_arp_update+0x5a>
    1578:	56 c0       	rjmp	.+172    	; 0x1626 <uip_arp_update+0x110>
	tabptr->time = arptime;

	return;
    157a:	1f 5f       	subi	r17, 0xFF	; 255
{
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    157c:	14 30       	cpi	r17, 0x04	; 4
    157e:	b0 f2       	brcs	.-84     	; 0x152c <uip_arp_update+0x16>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    1580:	10 92 73 03 	sts	0x0373, r1
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	12 c0       	rjmp	.+36     	; 0x15ac <uip_arp_update+0x96>
    tabptr = &arp_table[i];
    1588:	8b e0       	ldi	r24, 0x0B	; 11
    158a:	28 9f       	mul	r18, r24
    158c:	e0 01       	movw	r28, r0
    158e:	11 24       	eor	r1, r1
    1590:	cd 5b       	subi	r28, 0xBD	; 189
    1592:	dc 4f       	sbci	r29, 0xFC	; 252
    if(tabptr->ipaddr[0] == 0 &&
    1594:	88 81       	ld	r24, Y
    1596:	99 81       	ldd	r25, Y+1	; 0x01
    1598:	89 2b       	or	r24, r25
    159a:	39 f4       	brne	.+14     	; 0x15aa <uip_arp_update+0x94>
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	9b 81       	ldd	r25, Y+3	; 0x03
    15a0:	89 2b       	or	r24, r25
    15a2:	19 f4       	brne	.+6      	; 0x15aa <uip_arp_update+0x94>
    15a4:	20 93 73 03 	sts	0x0373, r18
    15a8:	2e c0       	rjmp	.+92     	; 0x1606 <uip_arp_update+0xf0>
    15aa:	2f 5f       	subi	r18, 0xFF	; 255

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    15ac:	24 30       	cpi	r18, 0x04	; 4
    15ae:	60 f3       	brcs	.-40     	; 0x1588 <uip_arp_update+0x72>
    15b0:	20 93 73 03 	sts	0x0373, r18
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    15b4:	24 30       	cpi	r18, 0x04	; 4
    15b6:	39 f5       	brne	.+78     	; 0x1606 <uip_arp_update+0xf0>
    tmpage = 0;
    15b8:	10 92 76 03 	sts	0x0376, r1
    c = 0;
    15bc:	10 92 74 03 	sts	0x0374, r1
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
    15c0:	10 91 75 03 	lds	r17, 0x0375
    15c4:	61 2f       	mov	r22, r17
    15c6:	77 27       	eor	r23, r23
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	e0 e0       	ldi	r30, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <uip_arp_update+0xe0>
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
      tabptr = &arp_table[i];
    15d0:	8b e0       	ldi	r24, 0x0B	; 11
    15d2:	58 9f       	mul	r21, r24
    15d4:	e0 01       	movw	r28, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	cd 5b       	subi	r28, 0xBD	; 189
    15da:	dc 4f       	sbci	r29, 0xFC	; 252
      if(arptime - tabptr->time > tmpage) {
    15dc:	4a 85       	ldd	r20, Y+10	; 0x0a
    15de:	9b 01       	movw	r18, r22
    15e0:	24 1b       	sub	r18, r20
    15e2:	31 09       	sbc	r19, r1
    15e4:	8e 2f       	mov	r24, r30
    15e6:	99 27       	eor	r25, r25
    15e8:	82 17       	cp	r24, r18
    15ea:	93 07       	cpc	r25, r19
    15ec:	1c f4       	brge	.+6      	; 0x15f4 <uip_arp_update+0xde>
	tmpage = arptime - tabptr->time;
    15ee:	e1 2f       	mov	r30, r17
    15f0:	e4 1b       	sub	r30, r20
    15f2:	f5 2f       	mov	r31, r21
    15f4:	5f 5f       	subi	r21, 0xFF	; 255
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    15f6:	54 30       	cpi	r21, 0x04	; 4
    15f8:	58 f3       	brcs	.-42     	; 0x15d0 <uip_arp_update+0xba>
    15fa:	f0 93 74 03 	sts	0x0374, r31
    15fe:	e0 93 76 03 	sts	0x0376, r30
      if(arptime - tabptr->time > tmpage) {
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
    1602:	f0 93 73 03 	sts	0x0373, r31
  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  //elm FIXME bug -> i ist der aeltestes eintrag aber tabptr wird genommen
  //vorschlag: tabptr = &arp_table[i];
  
  memcpy(tabptr->ipaddr, ipaddr, 4);
    1606:	8d 91       	ld	r24, X+
    1608:	9d 91       	ld	r25, X+
    160a:	0d 90       	ld	r0, X+
    160c:	bc 91       	ld	r27, X
    160e:	a0 2d       	mov	r26, r0
    1610:	fe 01       	movw	r30, r28
    1612:	81 93       	st	Z+, r24
    1614:	91 93       	st	Z+, r25
    1616:	a1 93       	st	Z+, r26
    1618:	b1 93       	st	Z+, r27
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
    161a:	d7 01       	movw	r26, r14
    161c:	86 e0       	ldi	r24, 0x06	; 6
    161e:	0d 90       	ld	r0, X+
    1620:	01 92       	st	Z+, r0
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	e1 f7       	brne	.-8      	; 0x161e <uip_arp_update+0x108>
  tabptr->time = arptime;
    1626:	80 91 75 03 	lds	r24, 0x0375
    162a:	8a 87       	std	Y+10, r24	; 0x0a
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	1f 91       	pop	r17
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	08 95       	ret

00001638 <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29

  if(uip_len < sizeof(struct arp_hdr)) {
    163c:	80 91 24 04 	lds	r24, 0x0424
    1640:	90 91 25 04 	lds	r25, 0x0425
    1644:	8a 97       	sbiw	r24, 0x2a	; 42
    1646:	28 f4       	brcc	.+10     	; 0x1652 <uip_arp_arpin+0x1a>
    uip_len = 0;
    1648:	10 92 25 04 	sts	0x0425, r1
    164c:	10 92 24 04 	sts	0x0424, r1
    1650:	8d c0       	rjmp	.+282    	; 0x176c <uip_arp_arpin+0x134>
    return;
  }

  uip_len = 0;
    1652:	10 92 25 04 	sts	0x0425, r1
    1656:	10 92 24 04 	sts	0x0424, r1
  
  switch(BUF->opcode) {
    165a:	a5 e3       	ldi	r26, 0x35	; 53
    165c:	b4 e0       	ldi	r27, 0x04	; 4
    165e:	80 91 49 04 	lds	r24, 0x0449
    1662:	90 91 4a 04 	lds	r25, 0x044A
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	80 30       	cpi	r24, 0x00	; 0
    166a:	92 07       	cpc	r25, r18
    166c:	29 f0       	breq	.+10     	; 0x1678 <uip_arp_arpin+0x40>
    166e:	80 50       	subi	r24, 0x00	; 0
    1670:	92 40       	sbci	r25, 0x02	; 2
    1672:	09 f0       	breq	.+2      	; 0x1676 <uip_arp_arpin+0x3e>
    1674:	7b c0       	rjmp	.+246    	; 0x176c <uip_arp_arpin+0x134>
    1676:	5e c0       	rjmp	.+188    	; 0x1734 <uip_arp_arpin+0xfc>
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(BUF->dipaddr[0] == uip_hostaddr[0] &&
    1678:	40 91 5b 04 	lds	r20, 0x045B
    167c:	50 91 5c 04 	lds	r21, 0x045C
    1680:	80 91 0a 01 	lds	r24, 0x010A
    1684:	90 91 0b 01 	lds	r25, 0x010B
    1688:	48 17       	cp	r20, r24
    168a:	59 07       	cpc	r21, r25
    168c:	09 f0       	breq	.+2      	; 0x1690 <uip_arp_arpin+0x58>
    168e:	6e c0       	rjmp	.+220    	; 0x176c <uip_arp_arpin+0x134>
    1690:	20 91 5d 04 	lds	r18, 0x045D
    1694:	30 91 5e 04 	lds	r19, 0x045E
    1698:	80 91 0c 01 	lds	r24, 0x010C
    169c:	90 91 0d 01 	lds	r25, 0x010D
    16a0:	28 17       	cp	r18, r24
    16a2:	39 07       	cpc	r19, r25
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <uip_arp_arpin+0x70>
    16a6:	62 c0       	rjmp	.+196    	; 0x176c <uip_arp_arpin+0x134>
       BUF->dipaddr[1] == uip_hostaddr[1]) {
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	92 e0       	ldi	r25, 0x02	; 2
    16ac:	90 93 4a 04 	sts	0x044A, r25
    16b0:	80 93 49 04 	sts	0x0449, r24

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
    16b4:	ed 01       	movw	r28, r26
    16b6:	a0 96       	adiw	r28, 0x20	; 32
    16b8:	fd 01       	movw	r30, r26
    16ba:	76 96       	adiw	r30, 0x16	; 22
    16bc:	86 e0       	ldi	r24, 0x06	; 6
    16be:	01 90       	ld	r0, Z+
    16c0:	09 92       	st	Y+, r0
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	e1 f7       	brne	.-8      	; 0x16be <uip_arp_arpin+0x86>
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
    16c6:	cb e4       	ldi	r28, 0x4B	; 75
    16c8:	d4 e0       	ldi	r29, 0x04	; 4
    16ca:	e6 e1       	ldi	r30, 0x16	; 22
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	01 90       	ld	r0, Z+
    16d2:	09 92       	st	Y+, r0
    16d4:	81 50       	subi	r24, 0x01	; 1
    16d6:	e1 f7       	brne	.-8      	; 0x16d0 <uip_arp_arpin+0x98>
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
    16d8:	cb e3       	ldi	r28, 0x3B	; 59
    16da:	d4 e0       	ldi	r29, 0x04	; 4
    16dc:	e6 e1       	ldi	r30, 0x16	; 22
    16de:	f1 e0       	ldi	r31, 0x01	; 1
    16e0:	86 e0       	ldi	r24, 0x06	; 6
    16e2:	01 90       	ld	r0, Z+
    16e4:	09 92       	st	Y+, r0
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <uip_arp_arpin+0xaa>
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f4 e0       	ldi	r31, 0x04	; 4
    16ee:	ef 01       	movw	r28, r30
    16f0:	a0 96       	adiw	r28, 0x20	; 32
    16f2:	86 e0       	ldi	r24, 0x06	; 6
    16f4:	09 90       	ld	r0, Y+
    16f6:	01 92       	st	Z+, r0
    16f8:	81 50       	subi	r24, 0x01	; 1
    16fa:	e1 f7       	brne	.-8      	; 0x16f4 <uip_arp_arpin+0xbc>
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
    16fc:	80 91 51 04 	lds	r24, 0x0451
    1700:	90 91 52 04 	lds	r25, 0x0452
    1704:	fd 01       	movw	r30, r26
    1706:	97 a3       	std	Z+39, r25	; 0x27
    1708:	86 a3       	std	Z+38, r24	; 0x26
      BUF->dipaddr[1] = BUF->sipaddr[1];
    170a:	80 91 53 04 	lds	r24, 0x0453
    170e:	90 91 54 04 	lds	r25, 0x0454
    1712:	91 a7       	std	Z+41, r25	; 0x29
    1714:	80 a7       	std	Z+40, r24	; 0x28
      BUF->sipaddr[0] = uip_hostaddr[0];
    1716:	55 8f       	std	Z+29, r21	; 0x1d
    1718:	44 8f       	std	Z+28, r20	; 0x1c
      BUF->sipaddr[1] = uip_hostaddr[1];
    171a:	37 8f       	std	Z+31, r19	; 0x1f
    171c:	26 8f       	std	Z+30, r18	; 0x1e

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);      
    171e:	88 e0       	ldi	r24, 0x08	; 8
    1720:	96 e0       	ldi	r25, 0x06	; 6
    1722:	95 87       	std	Z+13, r25	; 0x0d
    1724:	84 87       	std	Z+12, r24	; 0x0c
      uip_len = sizeof(struct arp_hdr);
    1726:	8a e2       	ldi	r24, 0x2A	; 42
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	90 93 25 04 	sts	0x0425, r25
    172e:	80 93 24 04 	sts	0x0424, r24
    1732:	1c c0       	rjmp	.+56     	; 0x176c <uip_arp_arpin+0x134>
    }      
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(BUF->dipaddr[0] == uip_hostaddr[0] &&
    1734:	20 91 5b 04 	lds	r18, 0x045B
    1738:	30 91 5c 04 	lds	r19, 0x045C
    173c:	80 91 0a 01 	lds	r24, 0x010A
    1740:	90 91 0b 01 	lds	r25, 0x010B
    1744:	28 17       	cp	r18, r24
    1746:	39 07       	cpc	r19, r25
    1748:	89 f4       	brne	.+34     	; 0x176c <uip_arp_arpin+0x134>
    174a:	20 91 5d 04 	lds	r18, 0x045D
    174e:	30 91 5e 04 	lds	r19, 0x045E
    1752:	80 91 0c 01 	lds	r24, 0x010C
    1756:	90 91 0d 01 	lds	r25, 0x010D
    175a:	28 17       	cp	r18, r24
    175c:	39 07       	cpc	r19, r25
    175e:	31 f4       	brne	.+12     	; 0x176c <uip_arp_arpin+0x134>
       BUF->dipaddr[1] == uip_hostaddr[1]) {

      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
    1760:	6b e4       	ldi	r22, 0x4B	; 75
    1762:	74 e0       	ldi	r23, 0x04	; 4
    1764:	81 e5       	ldi	r24, 0x51	; 81
    1766:	94 e0       	ldi	r25, 0x04	; 4
    1768:	0e 94 8b 0a 	call	0x1516	; 0x1516 <uip_arp_update>
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <uip_arp_ipin>:
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_ipin(void)
{
  uip_len -= sizeof(struct uip_eth_hdr);
    1772:	80 91 24 04 	lds	r24, 0x0424
    1776:	90 91 25 04 	lds	r25, 0x0425
    177a:	0e 97       	sbiw	r24, 0x0e	; 14
    177c:	90 93 25 04 	sts	0x0425, r25
    1780:	80 93 24 04 	sts	0x0424, r24
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_arp_netmask[0]) !=
    1784:	80 91 12 01 	lds	r24, 0x0112
    1788:	90 91 13 01 	lds	r25, 0x0113
    178c:	20 91 4f 04 	lds	r18, 0x044F
    1790:	30 91 50 04 	lds	r19, 0x0450
    1794:	28 23       	and	r18, r24
    1796:	39 23       	and	r19, r25
    1798:	40 91 0a 01 	lds	r20, 0x010A
    179c:	50 91 0b 01 	lds	r21, 0x010B
    17a0:	84 23       	and	r24, r20
    17a2:	95 23       	and	r25, r21
    17a4:	28 17       	cp	r18, r24
    17a6:	39 07       	cpc	r19, r25
    17a8:	c9 f4       	brne	.+50     	; 0x17dc <uip_arp_ipin+0x6a>
     (uip_hostaddr[0] & uip_arp_netmask[0])) {
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_arp_netmask[1]) !=
    17aa:	80 91 14 01 	lds	r24, 0x0114
    17ae:	90 91 15 01 	lds	r25, 0x0115
    17b2:	20 91 51 04 	lds	r18, 0x0451
    17b6:	30 91 52 04 	lds	r19, 0x0452
    17ba:	28 23       	and	r18, r24
    17bc:	39 23       	and	r19, r25
    17be:	40 91 0c 01 	lds	r20, 0x010C
    17c2:	50 91 0d 01 	lds	r21, 0x010D
    17c6:	84 23       	and	r24, r20
    17c8:	95 23       	and	r25, r21
    17ca:	28 17       	cp	r18, r24
    17cc:	39 07       	cpc	r19, r25
    17ce:	31 f4       	brne	.+12     	; 0x17dc <uip_arp_ipin+0x6a>
     (uip_hostaddr[1] & uip_arp_netmask[1])) {
    return;
  }
  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
    17d0:	6b e3       	ldi	r22, 0x3B	; 59
    17d2:	74 e0       	ldi	r23, 0x04	; 4
    17d4:	8f e4       	ldi	r24, 0x4F	; 79
    17d6:	94 e0       	ldi	r25, 0x04	; 4
    17d8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <uip_arp_update>
    17dc:	08 95       	ret

000017de <uip_add32>:
#define IP_PROTO_TCP    6

/*-----------------------------------------------------------------------------------*/
void
uip_add32(u8_t *op32, u16_t op16)
{
    17de:	fc 01       	movw	r30, r24
  
  uip_acc32[3] = op32[3] + (op16 & 0xff);
    17e0:	83 81       	ldd	r24, Z+3	; 0x03
    17e2:	86 0f       	add	r24, r22
    17e4:	80 93 2b 04 	sts	0x042B, r24
  uip_acc32[2] = op32[2] + (op16 >> 8);
    17e8:	27 2f       	mov	r18, r23
    17ea:	33 27       	eor	r19, r19
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	82 0f       	add	r24, r18
    17f0:	80 93 2a 04 	sts	0x042A, r24
  uip_acc32[1] = op32[1];
    17f4:	81 81       	ldd	r24, Z+1	; 0x01
    17f6:	80 93 29 04 	sts	0x0429, r24
  uip_acc32[0] = op32[0];
    17fa:	80 81       	ld	r24, Z
    17fc:	80 93 28 04 	sts	0x0428, r24
  
  if(uip_acc32[2] < (op16 >> 8)) {
    1800:	80 91 2a 04 	lds	r24, 0x042A
    1804:	99 27       	eor	r25, r25
    1806:	82 17       	cp	r24, r18
    1808:	93 07       	cpc	r25, r19
    180a:	70 f4       	brcc	.+28     	; 0x1828 <uip_add32+0x4a>
    ++uip_acc32[1];    
    180c:	80 91 29 04 	lds	r24, 0x0429
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	80 93 29 04 	sts	0x0429, r24
    if(uip_acc32[1] == 0) {
    1816:	80 91 29 04 	lds	r24, 0x0429
    181a:	88 23       	and	r24, r24
    181c:	29 f4       	brne	.+10     	; 0x1828 <uip_add32+0x4a>
      ++uip_acc32[0];
    181e:	80 91 28 04 	lds	r24, 0x0428
    1822:	8f 5f       	subi	r24, 0xFF	; 255
    1824:	80 93 28 04 	sts	0x0428, r24
    }
  }
  
  if(uip_acc32[3] < (op16 & 0xff)) {
    1828:	80 91 2b 04 	lds	r24, 0x042B
    182c:	99 27       	eor	r25, r25
    182e:	70 70       	andi	r23, 0x00	; 0
    1830:	86 17       	cp	r24, r22
    1832:	97 07       	cpc	r25, r23
    1834:	b8 f4       	brcc	.+46     	; 0x1864 <uip_add32+0x86>
    ++uip_acc32[2];  
    1836:	80 91 2a 04 	lds	r24, 0x042A
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	80 93 2a 04 	sts	0x042A, r24
    if(uip_acc32[2] == 0) {
    1840:	80 91 2a 04 	lds	r24, 0x042A
    1844:	88 23       	and	r24, r24
    1846:	71 f4       	brne	.+28     	; 0x1864 <uip_add32+0x86>
      ++uip_acc32[1];    
    1848:	80 91 29 04 	lds	r24, 0x0429
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 93 29 04 	sts	0x0429, r24
      if(uip_acc32[1] == 0) {
    1852:	80 91 29 04 	lds	r24, 0x0429
    1856:	88 23       	and	r24, r24
    1858:	29 f4       	brne	.+10     	; 0x1864 <uip_add32+0x86>
	++uip_acc32[0];
    185a:	80 91 28 04 	lds	r24, 0x0428
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 93 28 04 	sts	0x0428, r24
    1864:	08 95       	ret

00001866 <uip_chksum>:
  }
}
/*-----------------------------------------------------------------------------------*/
u16_t
uip_chksum(u16_t *sdata, u16_t len)
{
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	8c 01       	movw	r16, r24
    1870:	c0 e0       	ldi	r28, 0x00	; 0
    1872:	d0 e0       	ldi	r29, 0x00	; 0
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <uip_chksum+0x2a>
  u16_t acc;
  
  for(acc = 0; len > 1; len -= 2) {
    acc += *sdata;
    1876:	f8 01       	movw	r30, r16
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	c8 0f       	add	r28, r24
    187e:	d9 1f       	adc	r29, r25
    if(acc < *sdata) {
    1880:	c8 17       	cp	r28, r24
    1882:	d9 07       	cpc	r29, r25
    1884:	08 f4       	brcc	.+2      	; 0x1888 <uip_chksum+0x22>
      /* Overflow, so we add the carry to acc (i.e., increase by
         one). */
      ++acc;
    1886:	21 96       	adiw	r28, 0x01	; 1
    }
    ++sdata;
    1888:	0e 5f       	subi	r16, 0xFE	; 254
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
u16_t
uip_chksum(u16_t *sdata, u16_t len)
{
  u16_t acc;
  
  for(acc = 0; len > 1; len -= 2) {
    188c:	62 50       	subi	r22, 0x02	; 2
    188e:	70 40       	sbci	r23, 0x00	; 0
    1890:	62 30       	cpi	r22, 0x02	; 2
    1892:	71 05       	cpc	r23, r1
    1894:	80 f7       	brcc	.-32     	; 0x1876 <uip_chksum+0x10>
    }
    ++sdata;
  }

  /* add up any odd byte */
  if(len == 1) {
    1896:	61 30       	cpi	r22, 0x01	; 1
    1898:	71 05       	cpc	r23, r1
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <uip_chksum+0x5e>
    acc += htons(((u16_t)(*(u8_t *)sdata)) << 8);
    189c:	f8 01       	movw	r30, r16
    189e:	80 81       	ld	r24, Z
    18a0:	99 27       	eor	r25, r25
    18a2:	98 2f       	mov	r25, r24
    18a4:	88 27       	eor	r24, r24
    18a6:	0e 94 1b 07 	call	0xe36	; 0xe36 <htons>
    18aa:	c8 0f       	add	r28, r24
    18ac:	d9 1f       	adc	r29, r25
    if(acc < htons(((u16_t)(*(u8_t *)sdata)) << 8)) {
    18ae:	f8 01       	movw	r30, r16
    18b0:	80 81       	ld	r24, Z
    18b2:	99 27       	eor	r25, r25
    18b4:	98 2f       	mov	r25, r24
    18b6:	88 27       	eor	r24, r24
    18b8:	0e 94 1b 07 	call	0xe36	; 0xe36 <htons>
    18bc:	c8 17       	cp	r28, r24
    18be:	d9 07       	cpc	r29, r25
    18c0:	08 f4       	brcc	.+2      	; 0x18c4 <uip_chksum+0x5e>
      ++acc;
    18c2:	21 96       	adiw	r28, 0x01	; 1
    }
  }

  return acc;
}
    18c4:	ce 01       	movw	r24, r28
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <uip_ipchksum>:
/*-----------------------------------------------------------------------------------*/
u16_t
uip_ipchksum(void)
{
  return uip_chksum((u16_t *)&uip_buf[UIP_LLH_LEN], 20);
    18d0:	64 e1       	ldi	r22, 0x14	; 20
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	83 e4       	ldi	r24, 0x43	; 67
    18d6:	94 e0       	ldi	r25, 0x04	; 4
    18d8:	0e 94 33 0c 	call	0x1866	; 0x1866 <uip_chksum>
    18dc:	08 95       	ret

000018de <__vector_18>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	2f 93       	push	r18
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    18f2:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
    18f4:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    18f6:	e0 91 b9 03 	lds	r30, 0x03B9
    18fa:	ef 5f       	subi	r30, 0xFF	; 255
    18fc:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    18fe:	80 91 ba 03 	lds	r24, 0x03BA
    1902:	e8 17       	cp	r30, r24
    1904:	11 f4       	brne	.+4      	; 0x190a <__vector_18+0x2c>
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	08 c0       	rjmp	.+16     	; 0x191a <__vector_18+0x3c>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    190a:	89 2f       	mov	r24, r25
    190c:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    190e:	e0 93 b9 03 	sts	0x03B9, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1912:	ff 27       	eor	r31, r31
    1914:	e9 56       	subi	r30, 0x69	; 105
    1916:	fc 4f       	sbci	r31, 0xFC	; 252
    1918:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
    191a:	80 93 bb 03 	sts	0x03BB, r24
    191e:	ff 91       	pop	r31
    1920:	ef 91       	pop	r30
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f 90       	pop	r0
    192e:	1f 90       	pop	r1
    1930:	18 95       	reti

00001932 <__vector_19>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1932:	1f 92       	push	r1
    1934:	0f 92       	push	r0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1944:	90 91 b7 03 	lds	r25, 0x03B7
    1948:	80 91 b8 03 	lds	r24, 0x03B8
    194c:	98 17       	cp	r25, r24
    194e:	61 f0       	breq	.+24     	; 0x1968 <__vector_19+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1950:	e0 91 b8 03 	lds	r30, 0x03B8
    1954:	ef 5f       	subi	r30, 0xFF	; 255
    1956:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1958:	e0 93 b8 03 	sts	0x03B8, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    195c:	ff 27       	eor	r31, r31
    195e:	e9 58       	subi	r30, 0x89	; 137
    1960:	fc 4f       	sbci	r31, 0xFC	; 252
    1962:	80 81       	ld	r24, Z
    1964:	8c b9       	out	0x0c, r24	; 12
    1966:	01 c0       	rjmp	.+2      	; 0x196a <__vector_19+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1968:	55 98       	cbi	0x0a, 5	; 10
    196a:	ff 91       	pop	r31
    196c:	ef 91       	pop	r30
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    197c:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
    197e:	10 92 b7 03 	sts	0x03B7, r1
    UART_TxTail = 0;
    1982:	10 92 b8 03 	sts	0x03B8, r1
    UART_RxHead = 0;
    1986:	10 92 b9 03 	sts	0x03B9, r1
    UART_RxTail = 0;
    198a:	10 92 ba 03 	sts	0x03BA, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    198e:	97 ff       	sbrs	r25, 7
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	8b b9       	out	0x0b, r24	; 11
   		baudrate &= ~0x8000;
    1996:	3f 77       	andi	r19, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    1998:	83 2f       	mov	r24, r19
    199a:	99 27       	eor	r25, r25
    199c:	80 93 90 00 	sts	0x0090, r24
    UBRR0L = (unsigned char) baudrate;
    19a0:	29 b9       	out	0x09, r18	; 9

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    19a2:	88 e9       	ldi	r24, 0x98	; 152
    19a4:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    19a6:	86 e0       	ldi	r24, 0x06	; 6
    19a8:	80 93 95 00 	sts	0x0095, r24
    19ac:	08 95       	ret

000019ae <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    19ae:	90 91 b9 03 	lds	r25, 0x03B9
    19b2:	80 91 ba 03 	lds	r24, 0x03BA
    19b6:	98 17       	cp	r25, r24
    19b8:	19 f4       	brne	.+6      	; 0x19c0 <uart_getc+0x12>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    19c0:	e0 91 ba 03 	lds	r30, 0x03BA
    19c4:	ef 5f       	subi	r30, 0xFF	; 255
    19c6:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
    19c8:	e0 93 ba 03 	sts	0x03BA, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    19cc:	ff 27       	eor	r31, r31
    19ce:	e9 56       	subi	r30, 0x69	; 105
    19d0:	fc 4f       	sbci	r31, 0xFC	; 252
    19d2:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
    19d4:	80 91 bb 03 	lds	r24, 0x03BB
    19d8:	99 27       	eor	r25, r25
    19da:	98 2f       	mov	r25, r24
    19dc:	88 27       	eor	r24, r24
    19de:	82 0f       	add	r24, r18
    19e0:	91 1d       	adc	r25, r1

}/* uart_getc */
    19e2:	08 95       	ret

000019e4 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    19e4:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    19e6:	90 91 b7 03 	lds	r25, 0x03B7
    19ea:	9f 5f       	subi	r25, 0xFF	; 255
    19ec:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    19ee:	80 91 b8 03 	lds	r24, 0x03B8
    19f2:	98 17       	cp	r25, r24
    19f4:	e1 f3       	breq	.-8      	; 0x19ee <uart_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    19f6:	e9 2f       	mov	r30, r25
    19f8:	ff 27       	eor	r31, r31
    19fa:	e9 58       	subi	r30, 0x89	; 137
    19fc:	fc 4f       	sbci	r31, 0xFC	; 252
    19fe:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
    1a00:	90 93 b7 03 	sts	0x03B7, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1a04:	55 9a       	sbi	0x0a, 5	; 10
    1a06:	08 95       	ret

00001a08 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <uart_puts+0xe>
    while (*s) 
      uart_putc(*s++);
    1a10:	21 96       	adiw	r28, 0x01	; 1
    1a12:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1a16:	88 81       	ld	r24, Y
    1a18:	88 23       	and	r24, r24
    1a1a:	d1 f7       	brne	.-12     	; 0x1a10 <uart_puts+0x8>
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <uart_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
    1a2a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <uart_putc>
    1a2e:	fe 01       	movw	r30, r28
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1a30:	21 96       	adiw	r28, 0x01	; 1
    1a32:	84 91       	lpm	r24, Z
    1a34:	88 23       	and	r24, r24
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <uart_puts_p+0x8>
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <__vector_30>:
SIGNAL(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    1a3e:	1f 92       	push	r1
    1a40:	0f 92       	push	r0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	0f 92       	push	r0
    1a46:	11 24       	eor	r1, r1
    1a48:	2f 93       	push	r18
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    1a52:	90 91 9b 00 	lds	r25, 0x009B
    data = UART1_DATA;
    1a56:	20 91 9c 00 	lds	r18, 0x009C
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    1a5a:	e0 91 fe 03 	lds	r30, 0x03FE
    1a5e:	ef 5f       	subi	r30, 0xFF	; 255
    1a60:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
    1a62:	80 91 ff 03 	lds	r24, 0x03FF
    1a66:	e8 17       	cp	r30, r24
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <__vector_30+0x30>
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <__vector_30+0x40>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    1a6e:	89 2f       	mov	r24, r25
    1a70:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    1a72:	e0 93 fe 03 	sts	0x03FE, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    1a76:	ff 27       	eor	r31, r31
    1a78:	e4 52       	subi	r30, 0x24	; 36
    1a7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7c:	20 83       	st	Z, r18
    }
    UART1_LastRxError = lastRxError;   
    1a7e:	80 93 00 04 	sts	0x0400, r24
    1a82:	ff 91       	pop	r31
    1a84:	ef 91       	pop	r30
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_31>:
SIGNAL(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	ef 93       	push	r30
    1aa6:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    1aa8:	90 91 fc 03 	lds	r25, 0x03FC
    1aac:	80 91 fd 03 	lds	r24, 0x03FD
    1ab0:	98 17       	cp	r25, r24
    1ab2:	69 f0       	breq	.+26     	; 0x1ace <__vector_31+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    1ab4:	e0 91 fd 03 	lds	r30, 0x03FD
    1ab8:	ef 5f       	subi	r30, 0xFF	; 255
    1aba:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
    1abc:	e0 93 fd 03 	sts	0x03FD, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    1ac0:	ff 27       	eor	r31, r31
    1ac2:	e4 54       	subi	r30, 0x44	; 68
    1ac4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 93 9c 00 	sts	0x009C, r24
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <__vector_31+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    1ace:	80 91 9a 00 	lds	r24, 0x009A
    1ad2:	8f 7d       	andi	r24, 0xDF	; 223
    1ad4:	80 93 9a 00 	sts	0x009A, r24
    1ad8:	ff 91       	pop	r31
    1ada:	ef 91       	pop	r30
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	0f 90       	pop	r0
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	0f 90       	pop	r0
    1ae6:	1f 90       	pop	r1
    1ae8:	18 95       	reti

00001aea <uart1_init>:
Purpose:  initialize UART1 and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    1aea:	9c 01       	movw	r18, r24
    UART1_TxHead = 0;
    1aec:	10 92 fc 03 	sts	0x03FC, r1
    UART1_TxTail = 0;
    1af0:	10 92 fd 03 	sts	0x03FD, r1
    UART1_RxHead = 0;
    1af4:	10 92 fe 03 	sts	0x03FE, r1
    UART1_RxTail = 0;
    1af8:	10 92 ff 03 	sts	0x03FF, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    1afc:	97 ff       	sbrs	r25, 7
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <uart1_init+0x1e>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	80 93 9b 00 	sts	0x009B, r24
      baudrate &= ~0x8000;
    1b06:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
    1b08:	83 2f       	mov	r24, r19
    1b0a:	99 27       	eor	r25, r25
    1b0c:	80 93 98 00 	sts	0x0098, r24
    UBRR1L = (unsigned char) baudrate;
    1b10:	20 93 99 00 	sts	0x0099, r18

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
    1b14:	88 e9       	ldi	r24, 0x98	; 152
    1b16:	80 93 9a 00 	sts	0x009A, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
    #else
    UCSR1C = (3<<UCSZ10);
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	80 93 9d 00 	sts	0x009D, r24
    1b20:	08 95       	ret

00001b22 <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
    1b22:	90 91 fe 03 	lds	r25, 0x03FE
    1b26:	80 91 ff 03 	lds	r24, 0x03FF
    1b2a:	98 17       	cp	r25, r24
    1b2c:	19 f4       	brne	.+6      	; 0x1b34 <uart1_getc+0x12>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	08 95       	ret
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    1b34:	e0 91 ff 03 	lds	r30, 0x03FF
    1b38:	ef 5f       	subi	r30, 0xFF	; 255
    1b3a:	ef 71       	andi	r30, 0x1F	; 31
    UART1_RxTail = tmptail; 
    1b3c:	e0 93 ff 03 	sts	0x03FF, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    1b40:	ff 27       	eor	r31, r31
    1b42:	e4 52       	subi	r30, 0x24	; 36
    1b44:	fc 4f       	sbci	r31, 0xFC	; 252
    1b46:	20 81       	ld	r18, Z
    
    return (UART1_LastRxError << 8) + data;
    1b48:	80 91 00 04 	lds	r24, 0x0400
    1b4c:	99 27       	eor	r25, r25
    1b4e:	98 2f       	mov	r25, r24
    1b50:	88 27       	eor	r24, r24
    1b52:	82 0f       	add	r24, r18
    1b54:	91 1d       	adc	r25, r1

}/* uart1_getc */
    1b56:	08 95       	ret

00001b58 <uart1_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart1_putc(unsigned char data)
{
    1b58:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    1b5a:	90 91 fc 03 	lds	r25, 0x03FC
    1b5e:	9f 5f       	subi	r25, 0xFF	; 255
    1b60:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
    1b62:	80 91 fd 03 	lds	r24, 0x03FD
    1b66:	98 17       	cp	r25, r24
    1b68:	e1 f3       	breq	.-8      	; 0x1b62 <uart1_putc+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    1b6a:	e9 2f       	mov	r30, r25
    1b6c:	ff 27       	eor	r31, r31
    1b6e:	e4 54       	subi	r30, 0x44	; 68
    1b70:	fc 4f       	sbci	r31, 0xFC	; 252
    1b72:	20 83       	st	Z, r18
    UART1_TxHead = tmphead;
    1b74:	90 93 fc 03 	sts	0x03FC, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    1b78:	80 91 9a 00 	lds	r24, 0x009A
    1b7c:	80 62       	ori	r24, 0x20	; 32
    1b7e:	80 93 9a 00 	sts	0x009A, r24
    1b82:	08 95       	ret

00001b84 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	ec 01       	movw	r28, r24
    1b8a:	03 c0       	rjmp	.+6      	; 0x1b92 <uart1_puts+0xe>
    while (*s) 
      uart1_putc(*s++);
    1b8c:	21 96       	adiw	r28, 0x01	; 1
    1b8e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    1b92:	88 81       	ld	r24, Y
    1b94:	88 23       	and	r24, r24
    1b96:	d1 f7       	brne	.-12     	; 0x1b8c <uart1_puts+0x8>
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	ec 01       	movw	r28, r24
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <uart1_puts_p+0xc>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart1_putc(c);
    1ba6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <uart1_putc>
    1baa:	fe 01       	movw	r30, r28
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1bac:	21 96       	adiw	r28, 0x01	; 1
    1bae:	84 91       	lpm	r24, Z
    1bb0:	88 23       	and	r24, r24
    1bb2:	c9 f7       	brne	.-14     	; 0x1ba6 <uart1_puts_p+0x8>
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <spi_putc>:
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bba:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1bbc:	77 9b       	sbis	0x0e, 7	; 14
    1bbe:	fe cf       	rjmp	.-4      	; 0x1bbc <spi_putc+0x2>
		;
	
	return SPDR;
    1bc0:	8f b1       	in	r24, 0x0f	; 15
}
    1bc2:	99 27       	eor	r25, r25
    1bc4:	08 95       	ret

00001bc6 <mcp2515_write_register>:

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
    1bc6:	98 2f       	mov	r25, r24
	RESET(MCP2515_CS);
    1bc8:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1bce:	77 9b       	sbis	0x0e, 7	; 14
    1bd0:	fe cf       	rjmp	.-4      	; 0x1bce <mcp2515_write_register+0x8>
		;
	
	return SPDR;
    1bd2:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bd4:	9f b9       	out	0x0f, r25	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1bd6:	77 9b       	sbis	0x0e, 7	; 14
    1bd8:	fe cf       	rjmp	.-4      	; 0x1bd6 <mcp2515_write_register+0x10>
		;
	
	return SPDR;
    1bda:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bdc:	6f b9       	out	0x0f, r22	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1bde:	77 9b       	sbis	0x0e, 7	; 14
    1be0:	fe cf       	rjmp	.-4      	; 0x1bde <mcp2515_write_register+0x18>
		;
	
	return SPDR;
    1be2:	8f b1       	in	r24, 0x0f	; 15
	
	spi_putc(SPI_WRITE);
	spi_putc(adress);
	spi_putc(data);
	
	SET(MCP2515_CS);
    1be4:	c0 9a       	sbi	0x18, 0	; 24
    1be6:	08 95       	ret

00001be8 <mcp2515_read_register>:
}

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
    1be8:	98 2f       	mov	r25, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
    1bea:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1bf0:	77 9b       	sbis	0x0e, 7	; 14
    1bf2:	fe cf       	rjmp	.-4      	; 0x1bf0 <mcp2515_read_register+0x8>
		;
	
	return SPDR;
    1bf4:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bf6:	9f b9       	out	0x0f, r25	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1bf8:	77 9b       	sbis	0x0e, 7	; 14
    1bfa:	fe cf       	rjmp	.-4      	; 0x1bf8 <mcp2515_read_register+0x10>
		;
	
	return SPDR;
    1bfc:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c02:	77 9b       	sbis	0x0e, 7	; 14
    1c04:	fe cf       	rjmp	.-4      	; 0x1c02 <mcp2515_read_register+0x1a>
		;
	
	return SPDR;
    1c06:	8f b1       	in	r24, 0x0f	; 15
	spi_putc(SPI_READ);
	spi_putc(adress);
	
	data = spi_putc(0xff);	
	
	SET(MCP2515_CS);
    1c08:	c0 9a       	sbi	0x18, 0	; 24
	
	return data;
}
    1c0a:	99 27       	eor	r25, r25
    1c0c:	08 95       	ret

00001c0e <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
    1c0e:	98 2f       	mov	r25, r24
	RESET(MCP2515_CS);
    1c10:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1c12:	85 e0       	ldi	r24, 0x05	; 5
    1c14:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c16:	77 9b       	sbis	0x0e, 7	; 14
    1c18:	fe cf       	rjmp	.-4      	; 0x1c16 <mcp2515_bit_modify+0x8>
		;
	
	return SPDR;
    1c1a:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1c1c:	9f b9       	out	0x0f, r25	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c1e:	77 9b       	sbis	0x0e, 7	; 14
    1c20:	fe cf       	rjmp	.-4      	; 0x1c1e <mcp2515_bit_modify+0x10>
		;
	
	return SPDR;
    1c22:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1c24:	6f b9       	out	0x0f, r22	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c26:	77 9b       	sbis	0x0e, 7	; 14
    1c28:	fe cf       	rjmp	.-4      	; 0x1c26 <mcp2515_bit_modify+0x18>
		;
	
	return SPDR;
    1c2a:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1c2c:	4f b9       	out	0x0f, r20	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c2e:	77 9b       	sbis	0x0e, 7	; 14
    1c30:	fe cf       	rjmp	.-4      	; 0x1c2e <mcp2515_bit_modify+0x20>
		;
	
	return SPDR;
    1c32:	8f b1       	in	r24, 0x0f	; 15
	spi_putc(SPI_BIT_MODIFY);
	spi_putc(adress);
	spi_putc(mask);
	spi_putc(data);
	
	SET(MCP2515_CS);
    1c34:	c0 9a       	sbi	0x18, 0	; 24
    1c36:	08 95       	ret

00001c38 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
    1c38:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1c3a:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c3c:	77 9b       	sbis	0x0e, 7	; 14
    1c3e:	fe cf       	rjmp	.-4      	; 0x1c3c <mcp2515_read_status+0x4>
		;
	
	return SPDR;
    1c40:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1c46:	77 9b       	sbis	0x0e, 7	; 14
    1c48:	fe cf       	rjmp	.-4      	; 0x1c46 <mcp2515_read_status+0xe>
		;
	
	return SPDR;
    1c4a:	8f b1       	in	r24, 0x0f	; 15
	RESET(MCP2515_CS);
	
	spi_putc(type);
	data = spi_putc(0xff);
	
	SET(MCP2515_CS);
    1c4c:	c0 9a       	sbi	0x18, 0	; 24
	
	return data;
}
    1c4e:	99 27       	eor	r25, r25
    1c50:	08 95       	ret

00001c52 <mcp2515_check_message>:

// ----------------------------------------------------------------------------
// check if there are any new messages waiting

uint8_t mcp2515_check_message(void) {
	return (!IS_SET(MCP2515_INT));
    1c52:	81 b1       	in	r24, 0x01	; 1
    1c54:	99 27       	eor	r25, r25
    1c56:	26 e0       	ldi	r18, 0x06	; 6
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	2a 95       	dec	r18
    1c5e:	e1 f7       	brne	.-8      	; 0x1c58 <mcp2515_check_message+0x6>
    1c60:	80 95       	com	r24
    1c62:	90 95       	com	r25
}
    1c64:	81 70       	andi	r24, 0x01	; 1
    1c66:	90 70       	andi	r25, 0x00	; 0
    1c68:	08 95       	ret

00001c6a <mcp2515_check_free_buffer>:
// ----------------------------------------------------------------------------
// check if there is a free buffer to send messages

bool mcp2515_check_free_buffer(void)
{
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
    1c6a:	80 ea       	ldi	r24, 0xA0	; 160
    1c6c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <mcp2515_read_status>
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	84 75       	andi	r24, 0x54	; 84
    1c74:	84 35       	cpi	r24, 0x54	; 84
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <mcp2515_check_free_buffer+0x10>
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	98 27       	eor	r25, r24
		// all buffers used
		return false;
	}
	
	return true;
}
    1c7e:	89 2f       	mov	r24, r25
    1c80:	99 27       	eor	r25, r25
    1c82:	08 95       	ret

00001c84 <mcp2515_send_extmessage>:
	spi_putc(SPI_RTS | 0x01);
	SET(MCP2515_CS);

}*/
uint8_t mcp2515_send_extmessage(tExtendedCAN *message)
{
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	21 97       	sbiw	r28, 0x01	; 1
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
    1c9e:	80 ea       	ldi	r24, 0xA0	; 160
    1ca0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <mcp2515_read_status>
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	82 fd       	sbrc	r24, 2
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <mcp2515_send_extmessage+0x2c>
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0c c0       	rjmp	.+24     	; 0x1cc8 <mcp2515_send_extmessage+0x44>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	84 fd       	sbrc	r24, 4
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <mcp2515_send_extmessage+0x36>
    1cb6:	92 e0       	ldi	r25, 0x02	; 2
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <mcp2515_send_extmessage+0x44>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	86 ff       	sbrs	r24, 6
    1cbe:	03 c0       	rjmp	.+6      	; 0x1cc6 <mcp2515_send_extmessage+0x42>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	4f c0       	rjmp	.+158    	; 0x1d64 <mcp2515_send_extmessage+0xe0>
    1cc6:	94 e0       	ldi	r25, 0x04	; 4
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
    1cc8:	c0 98       	cbi	0x18, 0	; 24
	spi_putc(SPI_WRITE_TX | address);
    1cca:	89 2f       	mov	r24, r25
    1ccc:	80 64       	ori	r24, 0x40	; 64
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1cce:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1cd0:	77 9b       	sbis	0x0e, 7	; 14
    1cd2:	fe cf       	rjmp	.-4      	; 0x1cd0 <mcp2515_send_extmessage+0x4c>
		;
	
	return SPDR;
    1cd4:	8f b1       	in	r24, 0x0f	; 15
	}
	
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE_TX | address);
	
	spi_putc(message->id[0]);
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 81       	ld	r24, Z
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1cda:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1cdc:	77 9b       	sbis	0x0e, 7	; 14
    1cde:	fe cf       	rjmp	.-4      	; 0x1cdc <mcp2515_send_extmessage+0x58>
		;
	
	return SPDR;
    1ce0:	8f b1       	in	r24, 0x0f	; 15
	
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE_TX | address);
	
	spi_putc(message->id[0]);
	spi_putc(message->id[1]);
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	81 81       	ldd	r24, Z+1	; 0x01
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1ce6:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ce8:	77 9b       	sbis	0x0e, 7	; 14
    1cea:	fe cf       	rjmp	.-4      	; 0x1ce8 <mcp2515_send_extmessage+0x64>
		;
	
	return SPDR;
    1cec:	8f b1       	in	r24, 0x0f	; 15
	spi_putc(SPI_WRITE_TX | address);
	
	spi_putc(message->id[0]);
	spi_putc(message->id[1]);
	
	spi_putc(message->id[2]);
    1cee:	f8 01       	movw	r30, r16
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1cf2:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1cf4:	77 9b       	sbis	0x0e, 7	; 14
    1cf6:	fe cf       	rjmp	.-4      	; 0x1cf4 <mcp2515_send_extmessage+0x70>
		;
	
	return SPDR;
    1cf8:	8f b1       	in	r24, 0x0f	; 15
	
	spi_putc(message->id[0]);
	spi_putc(message->id[1]);
	
	spi_putc(message->id[2]);
	spi_putc(message->id[3]);
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	83 81       	ldd	r24, Z+3	; 0x03
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1cfe:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1d00:	77 9b       	sbis	0x0e, 7	; 14
    1d02:	fe cf       	rjmp	.-4      	; 0x1d00 <mcp2515_send_extmessage+0x7c>
		;
	
	return SPDR;
    1d04:	8f b1       	in	r24, 0x0f	; 15
	spi_putc(message->id[1]);
	
	spi_putc(message->id[2]);
	spi_putc(message->id[3]);
	
	uint8_t length = message->header.length & 0x0f;
    1d06:	f8 01       	movw	r30, r16
    1d08:	84 81       	ldd	r24, Z+4	; 0x04
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	26 95       	lsr	r18
    1d0e:	2f 70       	andi	r18, 0x0F	; 15
	
	if (message->header.rtr) {
    1d10:	80 ff       	sbrs	r24, 0
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <mcp2515_send_extmessage+0x9c>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
    1d14:	20 64       	ori	r18, 0x40	; 64
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1d16:	2f b9       	out	0x0f, r18	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1d18:	77 9b       	sbis	0x0e, 7	; 14
    1d1a:	fe cf       	rjmp	.-4      	; 0x1d18 <mcp2515_send_extmessage+0x94>
		;
	
	return SPDR;
    1d1c:	8f b1       	in	r24, 0x0f	; 15
    1d1e:	11 c0       	rjmp	.+34     	; 0x1d42 <mcp2515_send_extmessage+0xbe>
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1d20:	2f b9       	out	0x0f, r18	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1d22:	77 9b       	sbis	0x0e, 7	; 14
    1d24:	fe cf       	rjmp	.-4      	; 0x1d22 <mcp2515_send_extmessage+0x9e>
		;
	
	return SPDR;
    1d26:	8f b1       	in	r24, 0x0f	; 15
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <mcp2515_send_extmessage+0xba>
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
			spi_putc(message->data[i]);
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	e3 0f       	add	r30, r19
    1d30:	f1 1d       	adc	r31, r1
    1d32:	85 81       	ldd	r24, Z+5	; 0x05
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1d34:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1d36:	77 9b       	sbis	0x0e, 7	; 14
    1d38:	fe cf       	rjmp	.-4      	; 0x1d36 <mcp2515_send_extmessage+0xb2>
		;
	
	return SPDR;
    1d3a:	8f b1       	in	r24, 0x0f	; 15
	else {
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
    1d3c:	3f 5f       	subi	r19, 0xFF	; 255
    1d3e:	32 17       	cp	r19, r18
    1d40:	a9 f7       	brne	.-22     	; 0x1d2c <mcp2515_send_extmessage+0xa8>
			spi_putc(message->data[i]);
		}
	}
	SET(MCP2515_CS);
    1d42:	c0 9a       	sbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d44:	85 e0       	ldi	r24, 0x05	; 5
    1d46:	8a 95       	dec	r24
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <mcp2515_send_extmessage+0xc2>
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
    1d4a:	c0 98       	cbi	0x18, 0	; 24
	address = (address == 0) ? 1 : address;
    1d4c:	99 23       	and	r25, r25
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <mcp2515_send_extmessage+0xce>
    1d50:	91 e0       	ldi	r25, 0x01	; 1
	spi_putc(SPI_RTS | address);
    1d52:	89 2f       	mov	r24, r25
    1d54:	80 68       	ori	r24, 0x80	; 128
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1d56:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1d58:	77 9b       	sbis	0x0e, 7	; 14
    1d5a:	fe cf       	rjmp	.-4      	; 0x1d58 <mcp2515_send_extmessage+0xd4>
		;
	
	return SPDR;
    1d5c:	8f b1       	in	r24, 0x0f	; 15
	
	// send message
	RESET(MCP2515_CS);
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
    1d5e:	c0 9a       	sbi	0x18, 0	; 24
	
	return address;
    1d60:	89 2f       	mov	r24, r25
    1d62:	99 27       	eor	r25, r25
    1d64:	21 96       	adiw	r28, 0x01	; 1
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <mcp2515_send_message>:
	return (status & 0x07) + 1;
}

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	21 97       	sbiw	r28, 0x01	; 1
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
    1d94:	80 ea       	ldi	r24, 0xA0	; 160
    1d96:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <mcp2515_read_status>
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	82 fd       	sbrc	r24, 2
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <mcp2515_send_message+0x2c>
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0c c0       	rjmp	.+24     	; 0x1dbe <mcp2515_send_message+0x44>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	84 fd       	sbrc	r24, 4
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <mcp2515_send_message+0x36>
    1dac:	42 e0       	ldi	r20, 0x02	; 2
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <mcp2515_send_message+0x44>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	86 ff       	sbrs	r24, 6
    1db4:	03 c0       	rjmp	.+6      	; 0x1dbc <mcp2515_send_message+0x42>
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	54 c0       	rjmp	.+168    	; 0x1e64 <mcp2515_send_message+0xea>
    1dbc:	44 e0       	ldi	r20, 0x04	; 4
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
    1dbe:	c0 98       	cbi	0x18, 0	; 24
	spi_putc(SPI_WRITE_TX | address);
    1dc0:	84 2f       	mov	r24, r20
    1dc2:	80 64       	ori	r24, 0x40	; 64
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1dc4:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1dc6:	77 9b       	sbis	0x0e, 7	; 14
    1dc8:	fe cf       	rjmp	.-4      	; 0x1dc6 <mcp2515_send_message+0x4c>
		;
	
	return SPDR;
    1dca:	8f b1       	in	r24, 0x0f	; 15
	}
	
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE_TX | address);
	
	spi_putc(message->id >> 3);
    1dcc:	f8 01       	movw	r30, r16
    1dce:	20 81       	ld	r18, Z
    1dd0:	31 81       	ldd	r19, Z+1	; 0x01
    1dd2:	c9 01       	movw	r24, r18
    1dd4:	33 e0       	ldi	r19, 0x03	; 3
    1dd6:	96 95       	lsr	r25
    1dd8:	87 95       	ror	r24
    1dda:	3a 95       	dec	r19
    1ddc:	e1 f7       	brne	.-8      	; 0x1dd6 <mcp2515_send_message+0x5c>
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1dde:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1de0:	77 9b       	sbis	0x0e, 7	; 14
    1de2:	fe cf       	rjmp	.-4      	; 0x1de0 <mcp2515_send_message+0x66>
		;
	
	return SPDR;
    1de4:	8f b1       	in	r24, 0x0f	; 15
	
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE_TX | address);
	
	spi_putc(message->id >> 3);
    spi_putc(message->id << 5);
    1de6:	82 2f       	mov	r24, r18
    1de8:	82 95       	swap	r24
    1dea:	88 0f       	add	r24, r24
    1dec:	80 7e       	andi	r24, 0xE0	; 224
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1dee:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1df0:	77 9b       	sbis	0x0e, 7	; 14
    1df2:	fe cf       	rjmp	.-4      	; 0x1df0 <mcp2515_send_message+0x76>
		;
	
	return SPDR;
    1df4:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1df6:	1f b8       	out	0x0f, r1	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1df8:	77 9b       	sbis	0x0e, 7	; 14
    1dfa:	fe cf       	rjmp	.-4      	; 0x1df8 <mcp2515_send_message+0x7e>
		;
	
	return SPDR;
    1dfc:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1dfe:	1f b8       	out	0x0f, r1	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1e00:	77 9b       	sbis	0x0e, 7	; 14
    1e02:	fe cf       	rjmp	.-4      	; 0x1e00 <mcp2515_send_message+0x86>
		;
	
	return SPDR;
    1e04:	8f b1       	in	r24, 0x0f	; 15
    spi_putc(message->id << 5);
	
	spi_putc(0);
	spi_putc(0);
	
	uint8_t length = message->header.length & 0x0f;
    1e06:	f8 01       	movw	r30, r16
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	96 95       	lsr	r25
    1e0e:	9f 70       	andi	r25, 0x0F	; 15
	
	if (message->header.rtr) {
    1e10:	80 ff       	sbrs	r24, 0
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <mcp2515_send_message+0xa6>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
    1e14:	90 64       	ori	r25, 0x40	; 64
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1e16:	9f b9       	out	0x0f, r25	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1e18:	77 9b       	sbis	0x0e, 7	; 14
    1e1a:	fe cf       	rjmp	.-4      	; 0x1e18 <mcp2515_send_message+0x9e>
		;
	
	return SPDR;
    1e1c:	8f b1       	in	r24, 0x0f	; 15
    1e1e:	11 c0       	rjmp	.+34     	; 0x1e42 <mcp2515_send_message+0xc8>
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1e20:	9f b9       	out	0x0f, r25	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1e22:	77 9b       	sbis	0x0e, 7	; 14
    1e24:	fe cf       	rjmp	.-4      	; 0x1e22 <mcp2515_send_message+0xa8>
		;
	
	return SPDR;
    1e26:	8f b1       	in	r24, 0x0f	; 15
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <mcp2515_send_message+0xc4>
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
			spi_putc(message->data[i]);
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f1 1d       	adc	r31, r1
    1e32:	83 81       	ldd	r24, Z+3	; 0x03
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1e34:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1e36:	77 9b       	sbis	0x0e, 7	; 14
    1e38:	fe cf       	rjmp	.-4      	; 0x1e36 <mcp2515_send_message+0xbc>
		;
	
	return SPDR;
    1e3a:	8f b1       	in	r24, 0x0f	; 15
	else {
		// set message length
		spi_putc(length);
		
		// data
		for (uint8_t i=0;i<length;i++) {
    1e3c:	2f 5f       	subi	r18, 0xFF	; 255
    1e3e:	29 17       	cp	r18, r25
    1e40:	a9 f7       	brne	.-22     	; 0x1e2c <mcp2515_send_message+0xb2>
			spi_putc(message->data[i]);
		}
	}
	SET(MCP2515_CS);
    1e42:	c0 9a       	sbi	0x18, 0	; 24
    1e44:	85 e0       	ldi	r24, 0x05	; 5
    1e46:	8a 95       	dec	r24
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <mcp2515_send_message+0xcc>
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
    1e4a:	c0 98       	cbi	0x18, 0	; 24
	address = (address == 0) ? 1 : address;
    1e4c:	44 23       	and	r20, r20
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <mcp2515_send_message+0xd8>
    1e50:	41 e0       	ldi	r20, 0x01	; 1
	spi_putc(SPI_RTS | address);
    1e52:	84 2f       	mov	r24, r20
    1e54:	80 68       	ori	r24, 0x80	; 128
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1e56:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1e58:	77 9b       	sbis	0x0e, 7	; 14
    1e5a:	fe cf       	rjmp	.-4      	; 0x1e58 <mcp2515_send_message+0xde>
		;
	
	return SPDR;
    1e5c:	8f b1       	in	r24, 0x0f	; 15
	
	// send message
	RESET(MCP2515_CS);
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
    1e5e:	c0 9a       	sbi	0x18, 0	; 24
	
	return address;
    1e60:	84 2f       	mov	r24, r20
    1e62:	99 27       	eor	r25, r25
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <mcp2515_get_extmessage>:
	
	return (status & 0x07) + 1;
}

uint8_t mcp2515_get_extmessage(tExtendedCAN *message)
{
    1e7a:	0f 93       	push	r16
    1e7c:	1f 93       	push	r17
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	21 97       	sbiw	r28, 0x01	; 1
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	8c 01       	movw	r16, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
    1e94:	80 eb       	ldi	r24, 0xB0	; 176
    1e96:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <mcp2515_read_status>
    1e9a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
    1e9c:	de 01       	movw	r26, r28
    1e9e:	11 96       	adiw	r26, 0x01	; 1
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	86 ff       	sbrs	r24, 6
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <mcp2515_get_extmessage+0x30>
    1ea6:	80 e9       	ldi	r24, 0x90	; 144
    1ea8:	07 c0       	rjmp	.+14     	; 0x1eb8 <mcp2515_get_extmessage+0x3e>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	87 fd       	sbrc	r24, 7
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <mcp2515_get_extmessage+0x3c>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	56 c0       	rjmp	.+172    	; 0x1f62 <mcp2515_get_extmessage+0xe8>
    1eb6:	84 e9       	ldi	r24, 0x94	; 148
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
    1eb8:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1eba:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ebc:	77 9b       	sbis	0x0e, 7	; 14
    1ebe:	fe cf       	rjmp	.-4      	; 0x1ebc <mcp2515_get_extmessage+0x42>
		;
	
	return SPDR;
    1ec0:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ec6:	77 9b       	sbis	0x0e, 7	; 14
    1ec8:	fe cf       	rjmp	.-4      	; 0x1ec6 <mcp2515_get_extmessage+0x4c>
		;
	
	return SPDR;
    1eca:	8f b1       	in	r24, 0x0f	; 15

	RESET(MCP2515_CS);
	spi_putc(addr);
	
	// read id
	message->id[0]  = (char) spi_putc(0xff);
    1ecc:	f8 01       	movw	r30, r16
    1ece:	80 83       	st	Z, r24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ed4:	77 9b       	sbis	0x0e, 7	; 14
    1ed6:	fe cf       	rjmp	.-4      	; 0x1ed4 <mcp2515_get_extmessage+0x5a>
		;
	
	return SPDR;
    1ed8:	8f b1       	in	r24, 0x0f	; 15
	RESET(MCP2515_CS);
	spi_putc(addr);
	
	// read id
	message->id[0]  = (char) spi_putc(0xff);
	message->id[1]  = (char) spi_putc(0xff);
    1eda:	f8 01       	movw	r30, r16
    1edc:	81 83       	std	Z+1, r24	; 0x01
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ee2:	77 9b       	sbis	0x0e, 7	; 14
    1ee4:	fe cf       	rjmp	.-4      	; 0x1ee2 <mcp2515_get_extmessage+0x68>
		;
	
	return SPDR;
    1ee6:	8f b1       	in	r24, 0x0f	; 15
	
	// read id
	message->id[0]  = (char) spi_putc(0xff);
	message->id[1]  = (char) spi_putc(0xff);
	
	message->id[2] = spi_putc(0xff);
    1ee8:	f8 01       	movw	r30, r16
    1eea:	82 83       	std	Z+2, r24	; 0x02
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1eec:	8f ef       	ldi	r24, 0xFF	; 255
    1eee:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ef0:	77 9b       	sbis	0x0e, 7	; 14
    1ef2:	fe cf       	rjmp	.-4      	; 0x1ef0 <mcp2515_get_extmessage+0x76>
		;
	
	return SPDR;
    1ef4:	8f b1       	in	r24, 0x0f	; 15
	// read id
	message->id[0]  = (char) spi_putc(0xff);
	message->id[1]  = (char) spi_putc(0xff);
	
	message->id[2] = spi_putc(0xff);
	message->id[3] = spi_putc(0xff);
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	83 83       	std	Z+3, r24	; 0x03
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1efe:	77 9b       	sbis	0x0e, 7	; 14
    1f00:	fe cf       	rjmp	.-4      	; 0x1efe <mcp2515_get_extmessage+0x84>
		;
	
	return SPDR;
    1f02:	4f b1       	in	r20, 0x0f	; 15
	
	message->id[2] = spi_putc(0xff);
	message->id[3] = spi_putc(0xff);
	
	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
    1f04:	4f 70       	andi	r20, 0x0F	; 15
	
	message->header.length = length;
    1f06:	34 2f       	mov	r19, r20
    1f08:	33 0f       	add	r19, r19
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	24 81       	ldd	r18, Z+4	; 0x04
    1f0e:	20 7e       	andi	r18, 0xE0	; 224
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
    1f10:	8c 91       	ld	r24, X
    1f12:	99 27       	eor	r25, r25
    1f14:	53 e0       	ldi	r21, 0x03	; 3
    1f16:	96 95       	lsr	r25
    1f18:	87 95       	ror	r24
    1f1a:	5a 95       	dec	r21
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <mcp2515_get_extmessage+0x9c>
    1f1e:	81 70       	andi	r24, 0x01	; 1
    1f20:	23 2b       	or	r18, r19
    1f22:	28 2b       	or	r18, r24
    1f24:	24 83       	std	Z+4, r18	; 0x04
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0a c0       	rjmp	.+20     	; 0x1f3e <mcp2515_get_extmessage+0xc4>
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1f2e:	77 9b       	sbis	0x0e, 7	; 14
    1f30:	fe cf       	rjmp	.-4      	; 0x1f2e <mcp2515_get_extmessage+0xb4>
		;
	
	return SPDR;
    1f32:	8f b1       	in	r24, 0x0f	; 15
	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
	
	// read data
	for (uint8_t i=0;i<length;i++) {
		message->data[i] = spi_putc(0xff);
    1f34:	f8 01       	movw	r30, r16
    1f36:	e9 0f       	add	r30, r25
    1f38:	f1 1d       	adc	r31, r1
    1f3a:	85 83       	std	Z+5, r24	; 0x05
	
	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
	
	// read data
	for (uint8_t i=0;i<length;i++) {
    1f3c:	9f 5f       	subi	r25, 0xFF	; 255
    1f3e:	94 17       	cp	r25, r20
    1f40:	a1 f7       	brne	.-24     	; 0x1f2a <mcp2515_get_extmessage+0xb0>
		message->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
    1f42:	c0 9a       	sbi	0x18, 0	; 24
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
    1f44:	8c 91       	ld	r24, X
    1f46:	86 ff       	sbrs	r24, 6
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <mcp2515_get_extmessage+0xd6>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <mcp2515_get_extmessage+0xda>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	62 e0       	ldi	r22, 0x02	; 2
    1f54:	8c e2       	ldi	r24, 0x2C	; 44
    1f56:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <mcp2515_bit_modify>
	}
	
	return (status & 0x07) + 1;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	87 70       	andi	r24, 0x07	; 7
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	99 27       	eor	r25, r25
    1f62:	21 96       	adiw	r28, 0x01	; 1
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	08 95       	ret

00001f78 <mcp2515_get_message>:
	return true;
}

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	21 97       	sbiw	r28, 0x01	; 1
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	8c 01       	movw	r16, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
    1f92:	80 eb       	ldi	r24, 0xB0	; 176
    1f94:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <mcp2515_read_status>
    1f98:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
    1f9a:	de 01       	movw	r26, r28
    1f9c:	11 96       	adiw	r26, 0x01	; 1
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	86 ff       	sbrs	r24, 6
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <mcp2515_get_message+0x30>
    1fa4:	80 e9       	ldi	r24, 0x90	; 144
    1fa6:	07 c0       	rjmp	.+14     	; 0x1fb6 <mcp2515_get_message+0x3e>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	87 fd       	sbrc	r24, 7
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <mcp2515_get_message+0x3c>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	5d c0       	rjmp	.+186    	; 0x206e <mcp2515_get_message+0xf6>
    1fb4:	84 e9       	ldi	r24, 0x94	; 148
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
    1fb6:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1fb8:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1fba:	77 9b       	sbis	0x0e, 7	; 14
    1fbc:	fe cf       	rjmp	.-4      	; 0x1fba <mcp2515_get_message+0x42>
		;
	
	return SPDR;
    1fbe:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1fc4:	77 9b       	sbis	0x0e, 7	; 14
    1fc6:	fe cf       	rjmp	.-4      	; 0x1fc4 <mcp2515_get_message+0x4c>
		;
	
	return SPDR;
    1fc8:	2f b1       	in	r18, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1fce:	77 9b       	sbis	0x0e, 7	; 14
    1fd0:	fe cf       	rjmp	.-4      	; 0x1fce <mcp2515_get_message+0x56>
		;
	
	return SPDR;
    1fd2:	8f b1       	in	r24, 0x0f	; 15
	RESET(MCP2515_CS);
	spi_putc(addr);
	
	// read id
	message->id  = (uint16_t) spi_putc(0xff) << 3;
	message->id |=            spi_putc(0xff) >> 5;
    1fd4:	82 95       	swap	r24
    1fd6:	86 95       	lsr	r24
    1fd8:	87 70       	andi	r24, 0x07	; 7
    1fda:	99 27       	eor	r25, r25
    1fdc:	33 27       	eor	r19, r19
    1fde:	73 e0       	ldi	r23, 0x03	; 3
    1fe0:	22 0f       	add	r18, r18
    1fe2:	33 1f       	adc	r19, r19
    1fe4:	7a 95       	dec	r23
    1fe6:	e1 f7       	brne	.-8      	; 0x1fe0 <mcp2515_get_message+0x68>
    1fe8:	82 2b       	or	r24, r18
    1fea:	93 2b       	or	r25, r19
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1ff6:	77 9b       	sbis	0x0e, 7	; 14
    1ff8:	fe cf       	rjmp	.-4      	; 0x1ff6 <mcp2515_get_message+0x7e>
		;
	
	return SPDR;
    1ffa:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    1ffc:	8f ef       	ldi	r24, 0xFF	; 255
    1ffe:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    2000:	77 9b       	sbis	0x0e, 7	; 14
    2002:	fe cf       	rjmp	.-4      	; 0x2000 <mcp2515_get_message+0x88>
		;
	
	return SPDR;
    2004:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    200a:	77 9b       	sbis	0x0e, 7	; 14
    200c:	fe cf       	rjmp	.-4      	; 0x200a <mcp2515_get_message+0x92>
		;
	
	return SPDR;
    200e:	4f b1       	in	r20, 0x0f	; 15
	
	spi_putc(0xff);
	spi_putc(0xff);
	
	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
    2010:	4f 70       	andi	r20, 0x0F	; 15
	
	message->header.length = length;
    2012:	34 2f       	mov	r19, r20
    2014:	33 0f       	add	r19, r19
    2016:	f8 01       	movw	r30, r16
    2018:	22 81       	ldd	r18, Z+2	; 0x02
    201a:	20 7e       	andi	r18, 0xE0	; 224
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
    201c:	8c 91       	ld	r24, X
    201e:	99 27       	eor	r25, r25
    2020:	63 e0       	ldi	r22, 0x03	; 3
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	6a 95       	dec	r22
    2028:	e1 f7       	brne	.-8      	; 0x2022 <mcp2515_get_message+0xaa>
    202a:	81 70       	andi	r24, 0x01	; 1
    202c:	23 2b       	or	r18, r19
    202e:	28 2b       	or	r18, r24
    2030:	22 83       	std	Z+2, r18	; 0x02
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	0a c0       	rjmp	.+20     	; 0x204a <mcp2515_get_message+0xd2>
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    203a:	77 9b       	sbis	0x0e, 7	; 14
    203c:	fe cf       	rjmp	.-4      	; 0x203a <mcp2515_get_message+0xc2>
		;
	
	return SPDR;
    203e:	8f b1       	in	r24, 0x0f	; 15
	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
	
	// read data
	for (uint8_t i=0;i<length;i++) {
		message->data[i] = spi_putc(0xff);
    2040:	f8 01       	movw	r30, r16
    2042:	e9 0f       	add	r30, r25
    2044:	f1 1d       	adc	r31, r1
    2046:	83 83       	std	Z+3, r24	; 0x03
	
	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
	
	// read data
	for (uint8_t i=0;i<length;i++) {
    2048:	9f 5f       	subi	r25, 0xFF	; 255
    204a:	94 17       	cp	r25, r20
    204c:	a1 f7       	brne	.-24     	; 0x2036 <mcp2515_get_message+0xbe>
		message->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
    204e:	c0 9a       	sbi	0x18, 0	; 24
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
    2050:	8c 91       	ld	r24, X
    2052:	86 ff       	sbrs	r24, 6
    2054:	03 c0       	rjmp	.+6      	; 0x205c <mcp2515_get_message+0xe4>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <mcp2515_get_message+0xe8>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	62 e0       	ldi	r22, 0x02	; 2
    2060:	8c e2       	ldi	r24, 0x2C	; 44
    2062:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <mcp2515_bit_modify>
	}
	
	return (status & 0x07) + 1;
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	87 70       	andi	r24, 0x07	; 7
    206a:	8f 5f       	subi	r24, 0xFF	; 255
    206c:	99 27       	eor	r25, r25
    206e:	21 96       	adiw	r28, 0x01	; 1
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	08 95       	ret

00002084 <mcp2515_init>:
}

// -------------------------------------------------------------------------
bool mcp2515_init(void)
{
	SET(MCP2515_CS);
    2084:	c0 9a       	sbi	0x18, 0	; 24
	SET_OUTPUT(MCP2515_CS);
    2086:	b8 9a       	sbi	0x17, 0	; 23
	
	RESET(P_SCK);
    2088:	c1 98       	cbi	0x18, 1	; 24
	RESET(P_MOSI);
    208a:	c2 98       	cbi	0x18, 2	; 24
	RESET(P_MISO);
    208c:	c3 98       	cbi	0x18, 3	; 24
	
	SET_OUTPUT(P_SCK);
    208e:	b9 9a       	sbi	0x17, 1	; 23
	SET_OUTPUT(P_MOSI);
    2090:	ba 9a       	sbi	0x17, 2	; 23
	SET_INPUT(P_MISO);
    2092:	bb 98       	cbi	0x17, 3	; 23
	
	SET_INPUT(MCP2515_INT);
    2094:	16 98       	cbi	0x02, 6	; 2
	SET(MCP2515_INT);
    2096:	1e 9a       	sbi	0x03, 6	; 3
	
	// active SPI master interface
	SPCR = (1<<SPE)|(1<<MSTR) | (0<<SPR1)|(1<<SPR0);
    2098:	81 e5       	ldi	r24, 0x51	; 81
    209a:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0;
    209c:	1e b8       	out	0x0e, r1	; 14
	
	// reset MCP2515 by software reset.
	// After this he is in configuration mode.
	RESET(MCP2515_CS);
    209e:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20a0:	80 ec       	ldi	r24, 0xC0	; 192
    20a2:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20a4:	77 9b       	sbis	0x0e, 7	; 14
    20a6:	fe cf       	rjmp	.-4      	; 0x20a4 <mcp2515_init+0x20>
		;
	
	return SPDR;
    20a8:	8f b1       	in	r24, 0x0f	; 15
	
	// reset MCP2515 by software reset.
	// After this he is in configuration mode.
	RESET(MCP2515_CS);
	spi_putc(SPI_RESET);
	SET(MCP2515_CS);
    20aa:	c0 9a       	sbi	0x18, 0	; 24
    20ac:	85 e3       	ldi	r24, 0x35	; 53
    20ae:	8a 95       	dec	r24
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <mcp2515_init+0x2a>
	
	// wait a little bit until the MCP2515 has restarted
	_delay_us(10);
	
	// load CNF1..3 Register
	RESET(MCP2515_CS);
    20b2:	c0 98       	cbi	0x18, 0	; 24
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20b8:	77 9b       	sbis	0x0e, 7	; 14
    20ba:	fe cf       	rjmp	.-4      	; 0x20b8 <mcp2515_init+0x34>
		;
	
	return SPDR;
    20bc:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20be:	88 e2       	ldi	r24, 0x28	; 40
    20c0:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20c2:	77 9b       	sbis	0x0e, 7	; 14
    20c4:	fe cf       	rjmp	.-4      	; 0x20c2 <mcp2515_init+0x3e>
		;
	
	return SPDR;
    20c6:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20cc:	77 9b       	sbis	0x0e, 7	; 14
    20ce:	fe cf       	rjmp	.-4      	; 0x20cc <mcp2515_init+0x48>
		;
	
	return SPDR;
    20d0:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20d2:	80 e9       	ldi	r24, 0x90	; 144
    20d4:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20d6:	77 9b       	sbis	0x0e, 7	; 14
    20d8:	fe cf       	rjmp	.-4      	; 0x20d6 <mcp2515_init+0x52>
		;
	
	return SPDR;
    20da:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20dc:	1f b8       	out	0x0f, r1	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20de:	77 9b       	sbis	0x0e, 7	; 14
    20e0:	fe cf       	rjmp	.-4      	; 0x20de <mcp2515_init+0x5a>
		;
	
	return SPDR;
    20e2:	8f b1       	in	r24, 0x0f	; 15
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
    20e4:	83 e0       	ldi	r24, 0x03	; 3
    20e6:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    20e8:	77 9b       	sbis	0x0e, 7	; 14
    20ea:	fe cf       	rjmp	.-4      	; 0x20e8 <mcp2515_init+0x64>
		;
	
	return SPDR;
    20ec:	8f b1       	in	r24, 0x0f	; 15
	//ENDY: Hier kann man Bitrate ändern -> einfach ersten 2 Klammren weg
	spi_putc(0);
	//spi_putc((1<<BRP2)|(1<<BRP1)|(1<<BRP0));
	// activate interrupts
	spi_putc((1<<RX1IE)|(1<<RX0IE));
	SET(MCP2515_CS);
    20ee:	c0 9a       	sbi	0x18, 0	; 24
	
	// test if we could read back the value => is the chip accessible?
	//if (mcp2515_read_register(CNF1) != ((1<<BRP2)|(1<<BRP1)|(1<<BRP0))) {
	//	return false;
	//}
	if (mcp2515_read_register(CNF1) != 0) {
    20f0:	8a e2       	ldi	r24, 0x2A	; 42
    20f2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <mcp2515_read_register>
    20f6:	88 23       	and	r24, r24
    20f8:	19 f0       	breq	.+6      	; 0x2100 <mcp2515_init+0x7c>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	08 95       	ret
		return false;
	}

	// deaktivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0x0F);
    2100:	6f e0       	ldi	r22, 0x0F	; 15
    2102:	8c e0       	ldi	r24, 0x0C	; 12
    2104:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <mcp2515_write_register>
	
	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	8d e0       	ldi	r24, 0x0D	; 13
    210c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <mcp2515_write_register>
	
	// turn off filters => receive any message
	mcp2515_write_register(RXB0CTRL, (1<<RXM1)|(1<<RXM0));
    2110:	60 e6       	ldi	r22, 0x60	; 96
    2112:	80 e6       	ldi	r24, 0x60	; 96
    2114:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, (1<<RXM1)|(1<<RXM0));
    2118:	60 e6       	ldi	r22, 0x60	; 96
    211a:	80 e7       	ldi	r24, 0x70	; 112
    211c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <mcp2515_write_register>
	
	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	8f e0       	ldi	r24, 0x0F	; 15
    2124:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <mcp2515_write_register>
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
	
	return true;
}
    212c:	08 95       	ret

0000212e <memset>:
    212e:	dc 01       	movw	r26, r24
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <memset+0x6>
    2132:	6d 93       	st	X+, r22
    2134:	41 50       	subi	r20, 0x01	; 1
    2136:	50 40       	sbci	r21, 0x00	; 0
    2138:	e0 f7       	brcc	.-8      	; 0x2132 <memset+0x4>
    213a:	08 95       	ret

0000213c <__udivmodqi4>:
    213c:	99 1b       	sub	r25, r25
    213e:	79 e0       	ldi	r23, 0x09	; 9
    2140:	04 c0       	rjmp	.+8      	; 0x214a <__udivmodqi4_ep>

00002142 <__udivmodqi4_loop>:
    2142:	99 1f       	adc	r25, r25
    2144:	96 17       	cp	r25, r22
    2146:	08 f0       	brcs	.+2      	; 0x214a <__udivmodqi4_ep>
    2148:	96 1b       	sub	r25, r22

0000214a <__udivmodqi4_ep>:
    214a:	88 1f       	adc	r24, r24
    214c:	7a 95       	dec	r23
    214e:	c9 f7       	brne	.-14     	; 0x2142 <__udivmodqi4_loop>
    2150:	80 95       	com	r24
    2152:	08 95       	ret

00002154 <__eeprom_read_byte_1C1D1E>:
    2154:	e1 99       	sbic	0x1c, 1	; 28
    2156:	fe cf       	rjmp	.-4      	; 0x2154 <__eeprom_read_byte_1C1D1E>
    2158:	bf bb       	out	0x1f, r27	; 31
    215a:	ae bb       	out	0x1e, r26	; 30
    215c:	e0 9a       	sbi	0x1c, 0	; 28
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	0d b2       	in	r0, 0x1d	; 29
    2162:	08 95       	ret

00002164 <__eeprom_write_byte_1C1D1E>:
    2164:	e1 99       	sbic	0x1c, 1	; 28
    2166:	fe cf       	rjmp	.-4      	; 0x2164 <__eeprom_write_byte_1C1D1E>
    2168:	bf bb       	out	0x1f, r27	; 31
    216a:	ae bb       	out	0x1e, r26	; 30
    216c:	0d ba       	out	0x1d, r0	; 29
    216e:	11 96       	adiw	r26, 0x01	; 1
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	e2 9a       	sbi	0x1c, 2	; 28
    2176:	e1 9a       	sbi	0x1c, 1	; 28
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	08 95       	ret

0000217c <_exit>:
    217c:	ff cf       	rjmp	.-2      	; 0x217c <_exit>
