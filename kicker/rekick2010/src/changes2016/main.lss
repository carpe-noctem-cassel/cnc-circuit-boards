
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00800060  000023f0  00002484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ff  00800216  00800216  0000263a  2**0
                  ALLOC
  3 .stab         00008424  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b02  00000000  00000000  0000aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d562  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_4>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__vector_13>
      38:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

00000054 <__c.2042>:
      54:	55 4e 44 45 46 00                                   UNDEF.

0000005a <__c.2040>:
      5a:	45 78 74 65 72 6e 61 6c 00                          External.

00000063 <__c.2038>:
      63:	42 52 4f 57 4e 20 4f 55 54 00                       BROWN OUT.

0000006d <__c.2036>:
      6d:	57 41 54 43 48 44 4f 47 00                          WATCHDOG.

00000076 <__c.2034>:
      76:	4a 54 41 47 00                                      JTAG.

0000007b <__c.2032>:
      7b:	50 6f 77 65 72 20 4f 6e 00                          Power On.

00000084 <can_filter>:
      84:	00 08 00 60 00 08 00 00 00 08 00 00 00 08 00 00     ...`............
      94:	00 08 00 00 00 08 00 00 00 08 ff ff 00 08 ff ff     ................

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf e5       	ldi	r28, 0x5F	; 95
      aa:	d8 e0       	ldi	r29, 0x08	; 8
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	12 e0       	ldi	r17, 0x02	; 2
      b2:	a0 e6       	ldi	r26, 0x60	; 96
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	e0 ef       	ldi	r30, 0xF0	; 240
      b8:	f3 e2       	ldi	r31, 0x23	; 35
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a6 31       	cpi	r26, 0x16	; 22
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	14 e0       	ldi	r17, 0x04	; 4
      c8:	a6 e1       	ldi	r26, 0x16	; 22
      ca:	b2 e0       	ldi	r27, 0x02	; 2
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a5 31       	cpi	r26, 0x15	; 21
      d2:	b1 07       	cpc	r27, r17
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <main>
      da:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <check_hw_reset>:
 *
 * @param mcucsr The register which holds the data.
 * @returns      A string with the output.
 */
char *check_hw_reset(unsigned char mcucsr) {
	if (mcucsr & (1 << PORF))
      e2:	80 fd       	sbrc	r24, 0
      e4:	0b c0       	rjmp	.+22     	; 0xfc <check_hw_reset+0x1a>
		return PSTR("Power On");
	else if (mcucsr & (1 << JTRF))
      e6:	84 fd       	sbrc	r24, 4
      e8:	0c c0       	rjmp	.+24     	; 0x102 <check_hw_reset+0x20>
		return PSTR("JTAG");
	else if (mcucsr & (1 << WDRF))
      ea:	83 fd       	sbrc	r24, 3
      ec:	0d c0       	rjmp	.+26     	; 0x108 <check_hw_reset+0x26>
		return PSTR("WATCHDOG");
	else if (mcucsr & (1 << BORF))
      ee:	82 fd       	sbrc	r24, 2
      f0:	0e c0       	rjmp	.+28     	; 0x10e <check_hw_reset+0x2c>
		return PSTR("BROWN OUT");
	else if (mcucsr & (1 << EXTRF))
      f2:	81 ff       	sbrs	r24, 1
      f4:	0f c0       	rjmp	.+30     	; 0x114 <check_hw_reset+0x32>
		return PSTR("External");
      f6:	8a e5       	ldi	r24, 0x5A	; 90
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	08 95       	ret
 * @param mcucsr The register which holds the data.
 * @returns      A string with the output.
 */
char *check_hw_reset(unsigned char mcucsr) {
	if (mcucsr & (1 << PORF))
		return PSTR("Power On");
      fc:	8b e7       	ldi	r24, 0x7B	; 123
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	08 95       	ret
	else if (mcucsr & (1 << JTRF))
		return PSTR("JTAG");
     102:	86 e7       	ldi	r24, 0x76	; 118
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	08 95       	ret
	else if (mcucsr & (1 << WDRF))
		return PSTR("WATCHDOG");
     108:	8d e6       	ldi	r24, 0x6D	; 109
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	08 95       	ret
	else if (mcucsr & (1 << BORF))
		return PSTR("BROWN OUT");
     10e:	83 e6       	ldi	r24, 0x63	; 99
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	08 95       	ret
	else if (mcucsr & (1 << EXTRF))
		return PSTR("External");
	else
		return PSTR("UNDEF");
     114:	84 e5       	ldi	r24, 0x54	; 84
     116:	90 e0       	ldi	r25, 0x00	; 0
}
     118:	08 95       	ret

0000011a <spi_putc>:
// Schreibt/liest ein Byte ueber den Hardware SPI Bus

uint8_t spi_putc( uint8_t data )
{
	// put byte in send-buffer
	SPDR = data;
     11a:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
     11c:	77 9b       	sbis	0x0e, 7	; 14
     11e:	fe cf       	rjmp	.-4      	; 0x11c <spi_putc+0x2>
		;
	
	return SPDR;
     120:	8f b1       	in	r24, 0x0f	; 15
}
     122:	08 95       	ret

00000124 <mcp2515_write_register>:

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	18 2f       	mov	r17, r24
	RESET(MCP2515_CS);
     132:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(SPI_WRITE);
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	69 83       	std	Y+1, r22	; 0x01
     138:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(adress);
     13c:	81 2f       	mov	r24, r17
     13e:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(data);
     142:	69 81       	ldd	r22, Y+1	; 0x01
     144:	86 2f       	mov	r24, r22
     146:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	SET(MCP2515_CS);
     14a:	c4 9a       	sbi	0x18, 4	; 24
}
     14c:	0f 90       	pop	r0
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	08 95       	ret

00000156 <mcp2515_read_register>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
     156:	cf 93       	push	r28
     158:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
     15a:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(SPI_READ);
     15c:	83 e0       	ldi	r24, 0x03	; 3
     15e:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(adress);
     162:	8c 2f       	mov	r24, r28
     164:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	data = spi_putc(0xff);	
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	SET(MCP2515_CS);
     16e:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <mcp2515_bit_modify+0x8>
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	18 2f       	mov	r17, r24
	RESET(MCP2515_CS);
     182:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(SPI_BIT_MODIFY);
     184:	85 e0       	ldi	r24, 0x05	; 5
     186:	4a 83       	std	Y+2, r20	; 0x02
     188:	69 83       	std	Y+1, r22	; 0x01
     18a:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(adress);
     18e:	81 2f       	mov	r24, r17
     190:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(mask);
     194:	69 81       	ldd	r22, Y+1	; 0x01
     196:	86 2f       	mov	r24, r22
     198:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(data);
     19c:	4a 81       	ldd	r20, Y+2	; 0x02
     19e:	84 2f       	mov	r24, r20
     1a0:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	SET(MCP2515_CS);
     1a4:	c4 9a       	sbi	0x18, 4	; 24
}
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	08 95       	ret

000001b2 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
     1b2:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(type);
     1b4:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	data = spi_putc(0xff);
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	SET(MCP2515_CS);
     1be:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
     1c0:	08 95       	ret

000001c2 <mcp2515_init>:

// -------------------------------------------------------------------------
bool mcp2515_init(void)
{
	SET(MCP2515_CS);
     1c2:	c4 9a       	sbi	0x18, 4	; 24
	SET_OUTPUT(MCP2515_CS);
     1c4:	bc 9a       	sbi	0x17, 4	; 23
	
	RESET(P_SCK);
     1c6:	c7 98       	cbi	0x18, 7	; 24
	RESET(P_MOSI);
     1c8:	c5 98       	cbi	0x18, 5	; 24
	RESET(P_MISO);
     1ca:	c6 98       	cbi	0x18, 6	; 24
	
	SET_OUTPUT(P_SCK);
     1cc:	bf 9a       	sbi	0x17, 7	; 23
	SET_OUTPUT(P_MOSI);
     1ce:	bd 9a       	sbi	0x17, 5	; 23
	SET_INPUT(P_MISO);
     1d0:	be 98       	cbi	0x17, 6	; 23
	
	SET_INPUT(MCP2515_INT);
     1d2:	ba 98       	cbi	0x17, 2	; 23
	SET(MCP2515_INT);
     1d4:	c2 9a       	sbi	0x18, 2	; 24
	
	// active SPI master interface
	SPCR = (1<<SPE)|(1<<MSTR) | (0<<SPR1)|(1<<SPR0);
     1d6:	81 e5       	ldi	r24, 0x51	; 81
     1d8:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0;
     1da:	1e b8       	out	0x0e, r1	; 14
	
	// reset MCP2515 by software reset.
	// After this he is in configuration mode.
	RESET(MCP2515_CS);
     1dc:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_RESET);
     1de:	80 ec       	ldi	r24, 0xC0	; 192
     1e0:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	SET(MCP2515_CS);
     1e4:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e6:	85 e3       	ldi	r24, 0x35	; 53
     1e8:	8a 95       	dec	r24
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <mcp2515_init+0x26>
     1ec:	00 00       	nop
	
	// wait a little bit until the MCP2515 has restarted
	_delay_us(10);
	
	// load CNF1..3 Register
	RESET(MCP2515_CS);
     1ee:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_WRITE);
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(CNF3);
     1f6:	88 e2       	ldi	r24, 0x28	; 40
     1f8:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	spi_putc((1<<PHSEG21));		// Bitrate 125 kbps at 16 MHz
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc((1<<BTLMODE)|(1<<PHSEG11));
     202:	80 e9       	ldi	r24, 0x90	; 144
     204:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>

	//ENDY: Hier kann man Bitrate ändern -> einfach ersten 2 Klammren weg
	spi_putc(0);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	// activate interrupts
	spi_putc((1<<RX1IE)|(1<<RX0IE));
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	SET(MCP2515_CS);
     214:	c4 9a       	sbi	0x18, 4	; 24
	
	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != 0) {
     216:	8a e2       	ldi	r24, 0x2A	; 42
     218:	0e 94 ab 00 	call	0x156	; 0x156 <mcp2515_read_register>
     21c:	81 11       	cpse	r24, r1
     21e:	16 c0       	rjmp	.+44     	; 0x24c <mcp2515_init+0x8a>
		return false;
	}
	
	// deaktivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	8c e0       	ldi	r24, 0x0C	; 12
     224:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_write_register>
	
	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	8d e0       	ldi	r24, 0x0D	; 13
     22c:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_write_register>

	// FILTERING ENABLED
	// RXM1 && !RXM0: Receive only valid messages with extended identifiers that meet filter criteria
	// BUKT: Rollover Enable bit -> Data from buffer 0 to buffer1
	// ONLY FILTER 0 is enabled
	mcp2515_write_register(RXB0CTRL, (1<<RXM1)|(1<<BUKT));
     230:	64 e4       	ldi	r22, 0x44	; 68
     232:	80 e6       	ldi	r24, 0x60	; 96
     234:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, (1<<RXM1));
     238:	60 e4       	ldi	r22, 0x40	; 64
     23a:	80 e7       	ldi	r24, 0x70	; 112
     23c:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_write_register>
	
	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	8f e0       	ldi	r24, 0x0F	; 15
     244:	0e 94 92 00 	call	0x124	; 0x124 <mcp2515_write_register>
	
	return true;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	08 95       	ret
	spi_putc((1<<RX1IE)|(1<<RX0IE));
	SET(MCP2515_CS);
	
	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != 0) {
		return false;
     24c:	80 e0       	ldi	r24, 0x00	; 0
	
	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
	
	return true;
}
     24e:	08 95       	ret

00000250 <mcp2515_check_message>:

// ----------------------------------------------------------------------------
// check if there are any new messages waiting

uint8_t mcp2515_check_message(void) {
	return (!IS_SET(MCP2515_INT));
     250:	86 b3       	in	r24, 0x16	; 22
     252:	82 fb       	bst	r24, 2
     254:	88 27       	eor	r24, r24
     256:	80 f9       	bld	r24, 0
}
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	89 27       	eor	r24, r25
     25c:	08 95       	ret

0000025e <mcp2515_check_free_buffer>:
// ----------------------------------------------------------------------------
// check if there is a free buffer to send messages

bool mcp2515_check_free_buffer(void)
{
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
     25e:	80 ea       	ldi	r24, 0xA0	; 160
     260:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_read_status>
	
	if ((status & 0x54) == 0x54) {
     264:	98 2f       	mov	r25, r24
     266:	94 75       	andi	r25, 0x54	; 84
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	94 35       	cpi	r25, 0x54	; 84
     26c:	09 f4       	brne	.+2      	; 0x270 <mcp2515_check_free_buffer+0x12>
     26e:	80 e0       	ldi	r24, 0x00	; 0
		// all buffers used
		return false;
	}
	
	return true;
}
     270:	08 95       	ret

00000272 <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	1f 92       	push	r1
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	8c 01       	movw	r16, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
     288:	80 eb       	ldi	r24, 0xB0	; 176
     28a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_read_status>
     28e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	86 fd       	sbrc	r24, 6
     294:	05 c0       	rjmp	.+10     	; 0x2a0 <mcp2515_get_message+0x2e>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	87 ff       	sbrs	r24, 7
     29a:	50 c0       	rjmp	.+160    	; 0x33c <mcp2515_get_message+0xca>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
     29c:	84 e9       	ldi	r24, 0x94	; 148
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <mcp2515_get_message+0x30>
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = SPI_READ_RX;
     2a0:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
     2a2:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(addr);
     2a4:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	// read id
	message->id  = (uint16_t) spi_putc(0xff) << 3;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     2ae:	98 e0       	ldi	r25, 0x08	; 8
     2b0:	89 9f       	mul	r24, r25
     2b2:	70 01       	movw	r14, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	f8 01       	movw	r30, r16
     2b8:	f1 82       	std	Z+1, r15	; 0x01
     2ba:	e0 82       	st	Z, r14
	message->id |=            spi_putc(0xff) >> 5;
     2bc:	8f ef       	ldi	r24, 0xFF	; 255
     2be:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     2c2:	82 95       	swap	r24
     2c4:	86 95       	lsr	r24
     2c6:	87 70       	andi	r24, 0x07	; 7
     2c8:	e8 2a       	or	r14, r24
     2ca:	f8 01       	movw	r30, r16
     2cc:	f1 82       	std	Z+1, r15	; 0x01
     2ce:	e0 82       	st	Z, r14
	
	spi_putc(0xff);
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(0xff);
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
     2d8:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     2e2:	8f 70       	andi	r24, 0x0F	; 15
     2e4:	d8 2e       	mov	r13, r24
	
	message->header.length = length;
     2e6:	88 0f       	add	r24, r24
     2e8:	f8 01       	movw	r30, r16
     2ea:	92 81       	ldd	r25, Z+2	; 0x02
     2ec:	91 7e       	andi	r25, 0xE1	; 225
     2ee:	98 2b       	or	r25, r24
     2f0:	92 83       	std	Z+2, r25	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	83 fb       	bst	r24, 3
     2f6:	88 27       	eor	r24, r24
     2f8:	80 f9       	bld	r24, 0
     2fa:	80 fb       	bst	r24, 0
     2fc:	90 f9       	bld	r25, 0
     2fe:	92 83       	std	Z+2, r25	; 0x02
	
	// read data
	for (uint8_t i=0;i<length;i++) {
     300:	e1 2c       	mov	r14, r1
     302:	f1 2c       	mov	r15, r1
     304:	ed 14       	cp	r14, r13
     306:	58 f4       	brcc	.+22     	; 0x31e <mcp2515_get_message+0xac>
		message->data[i] = spi_putc(0xff);
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     30e:	f8 01       	movw	r30, r16
     310:	ee 0d       	add	r30, r14
     312:	ff 1d       	adc	r31, r15
     314:	83 83       	std	Z+3, r24	; 0x03
     316:	ff ef       	ldi	r31, 0xFF	; 255
     318:	ef 1a       	sub	r14, r31
     31a:	ff 0a       	sbc	r15, r31
     31c:	f3 cf       	rjmp	.-26     	; 0x304 <mcp2515_get_message+0x92>
	}
	SET(MCP2515_CS);
     31e:	c4 9a       	sbi	0x18, 4	; 24
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
     320:	89 81       	ldd	r24, Y+1	; 0x01
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     322:	40 e0       	ldi	r20, 0x00	; 0
		message->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
     324:	86 ff       	sbrs	r24, 6
     326:	02 c0       	rjmp	.+4      	; 0x32c <mcp2515_get_message+0xba>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	01 c0       	rjmp	.+2      	; 0x32e <mcp2515_get_message+0xbc>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	8c e2       	ldi	r24, 0x2C	; 44
     330:	0e 94 ba 00 	call	0x174	; 0x174 <mcp2515_bit_modify>
	}
	
	return (status & 0x07) + 1;
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	87 70       	andi	r24, 0x07	; 7
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	01 c0       	rjmp	.+2      	; 0x33e <mcp2515_get_message+0xcc>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
	}
	else {
		// Error: no message available
		return 0;
     33c:	80 e0       	ldi	r24, 0x00	; 0
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
	}
	
	return (status & 0x07) + 1;
}
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	08 95       	ret

00000350 <mcp2515_get_extmessage>:

uint8_t mcp2515_get_extmessage(tExtendedCAN *message)
{
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	1f 92       	push	r1
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	8c 01       	movw	r16, r24
	// read status
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
     366:	80 eb       	ldi	r24, 0xB0	; 176
     368:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_read_status>
     36c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	86 fd       	sbrc	r24, 6
     372:	05 c0       	rjmp	.+10     	; 0x37e <mcp2515_get_extmessage+0x2e>
		// message in buffer 0
		addr = SPI_READ_RX;
	}
	else if (bit_is_set(status,7)) {
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	87 ff       	sbrs	r24, 7
     378:	4a c0       	rjmp	.+148    	; 0x40e <mcp2515_get_extmessage+0xbe>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
     37a:	84 e9       	ldi	r24, 0x94	; 148
     37c:	01 c0       	rjmp	.+2      	; 0x380 <mcp2515_get_extmessage+0x30>
	uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
	uint8_t addr;
	
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = SPI_READ_RX;
     37e:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	RESET(MCP2515_CS);
     380:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(addr);
     382:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	// read id
	message->id[0]  = (char) spi_putc(0xff);
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     38c:	f8 01       	movw	r30, r16
     38e:	80 83       	st	Z, r24
	message->id[1]  = (char) spi_putc(0xff);
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     396:	f8 01       	movw	r30, r16
     398:	81 83       	std	Z+1, r24	; 0x01
	
	message->id[2] = spi_putc(0xff);
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     3a0:	f8 01       	movw	r30, r16
     3a2:	82 83       	std	Z+2, r24	; 0x02
	message->id[3] = spi_putc(0xff);
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     3aa:	f8 01       	movw	r30, r16
     3ac:	83 83       	std	Z+3, r24	; 0x03
	
	// read DLC
	uint8_t length = spi_putc(0xff) & 0x0f;
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     3b4:	8f 70       	andi	r24, 0x0F	; 15
     3b6:	d8 2e       	mov	r13, r24
	
	message->header.length = length;
     3b8:	88 0f       	add	r24, r24
     3ba:	f8 01       	movw	r30, r16
     3bc:	94 81       	ldd	r25, Z+4	; 0x04
     3be:	91 7e       	andi	r25, 0xE1	; 225
     3c0:	98 2b       	or	r25, r24
     3c2:	94 83       	std	Z+4, r25	; 0x04
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	83 fb       	bst	r24, 3
     3c8:	88 27       	eor	r24, r24
     3ca:	80 f9       	bld	r24, 0
     3cc:	80 fb       	bst	r24, 0
     3ce:	90 f9       	bld	r25, 0
     3d0:	94 83       	std	Z+4, r25	; 0x04
	
	// read data
	for (uint8_t i=0;i<length;i++) {
     3d2:	e1 2c       	mov	r14, r1
     3d4:	f1 2c       	mov	r15, r1
     3d6:	ed 14       	cp	r14, r13
     3d8:	58 f4       	brcc	.+22     	; 0x3f0 <mcp2515_get_extmessage+0xa0>
		message->data[i] = spi_putc(0xff);
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     3e0:	f8 01       	movw	r30, r16
     3e2:	ee 0d       	add	r30, r14
     3e4:	ff 1d       	adc	r31, r15
     3e6:	85 83       	std	Z+5, r24	; 0x05
     3e8:	ff ef       	ldi	r31, 0xFF	; 255
     3ea:	ef 1a       	sub	r14, r31
     3ec:	ff 0a       	sbc	r15, r31
     3ee:	f3 cf       	rjmp	.-26     	; 0x3d6 <mcp2515_get_extmessage+0x86>
	}
	SET(MCP2515_CS);
     3f0:	c4 9a       	sbi	0x18, 4	; 24
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     3f4:	40 e0       	ldi	r20, 0x00	; 0
		message->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
	
	// clear interrupt flag
	if (bit_is_set(status, 6)) {
     3f6:	86 ff       	sbrs	r24, 6
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <mcp2515_get_extmessage+0xae>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <mcp2515_get_extmessage+0xb0>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
     3fe:	62 e0       	ldi	r22, 0x02	; 2
     400:	8c e2       	ldi	r24, 0x2C	; 44
     402:	0e 94 ba 00 	call	0x174	; 0x174 <mcp2515_bit_modify>
	}
	
	return (status & 0x07) + 1;
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	87 70       	andi	r24, 0x07	; 7
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	01 c0       	rjmp	.+2      	; 0x410 <mcp2515_get_extmessage+0xc0>
		// message in buffer 1
		addr = SPI_READ_RX | 0x04;
	}
	else {
		// Error: no message available
		return 0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
	}
	
	return (status & 0x07) + 1;
}
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	08 95       	ret

00000422 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	1f 92       	push	r1
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
     43a:	80 ea       	ldi	r24, 0xA0	; 160
     43c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_read_status>
     440:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	82 ff       	sbrs	r24, 2
     446:	09 c0       	rjmp	.+18     	; 0x45a <mcp2515_send_message+0x38>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	84 ff       	sbrs	r24, 4
     44c:	08 c0       	rjmp	.+16     	; 0x45e <mcp2515_send_message+0x3c>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	86 fd       	sbrc	r24, 6
     452:	53 c0       	rjmp	.+166    	; 0x4fa <mcp2515_send_message+0xd8>
		address = 0x04;
     454:	44 e0       	ldi	r20, 0x04	; 4
     456:	d4 2e       	mov	r13, r20
     458:	04 c0       	rjmp	.+8      	; 0x462 <mcp2515_send_message+0x40>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
		address = 0x00;
     45a:	d1 2c       	mov	r13, r1
     45c:	02 c0       	rjmp	.+4      	; 0x462 <mcp2515_send_message+0x40>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
     45e:	32 e0       	ldi	r19, 0x02	; 2
     460:	d3 2e       	mov	r13, r19
	else {
		// all buffer used => could not send message
		return 0;
	}
	
	RESET(MCP2515_CS);
     462:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_WRITE_TX | address);
     464:	8d 2d       	mov	r24, r13
     466:	80 64       	ori	r24, 0x40	; 64
     468:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	spi_putc(message->id >> 3);
     46c:	f8 01       	movw	r30, r16
     46e:	80 81       	ld	r24, Z
     470:	91 81       	ldd	r25, Z+1	; 0x01
     472:	23 e0       	ldi	r18, 0x03	; 3
     474:	96 95       	lsr	r25
     476:	87 95       	ror	r24
     478:	2a 95       	dec	r18
     47a:	e1 f7       	brne	.-8      	; 0x474 <mcp2515_send_message+0x52>
     47c:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
    spi_putc(message->id << 5);
     480:	f8 01       	movw	r30, r16
     482:	80 81       	ld	r24, Z
     484:	82 95       	swap	r24
     486:	88 0f       	add	r24, r24
     488:	80 7e       	andi	r24, 0xE0	; 224
     48a:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	spi_putc(0);
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(0);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	uint8_t length = message->header.length & 0x0f;
     49a:	f8 01       	movw	r30, r16
     49c:	82 81       	ldd	r24, Z+2	; 0x02
     49e:	c8 2e       	mov	r12, r24
     4a0:	c6 94       	lsr	r12
     4a2:	fc 2d       	mov	r31, r12
     4a4:	ff 70       	andi	r31, 0x0F	; 15
     4a6:	cf 2e       	mov	r12, r31
	
	if (message->header.rtr) {
     4a8:	80 ff       	sbrs	r24, 0
     4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <mcp2515_send_message+0x94>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
     4ac:	8f 2f       	mov	r24, r31
     4ae:	80 64       	ori	r24, 0x40	; 64
     4b0:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <mcp2515_send_message+0xb6>
	}
	else {
		// set message length
		spi_putc(length);
     4b6:	8f 2f       	mov	r24, r31
     4b8:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
		
		// data
		for (uint8_t i=0;i<length;i++) {
     4bc:	e1 2c       	mov	r14, r1
     4be:	f1 2c       	mov	r15, r1
     4c0:	ec 14       	cp	r14, r12
     4c2:	50 f4       	brcc	.+20     	; 0x4d8 <mcp2515_send_message+0xb6>
     4c4:	f8 01       	movw	r30, r16
     4c6:	ee 0d       	add	r30, r14
     4c8:	ff 1d       	adc	r31, r15
			spi_putc(message->data[i]);
     4ca:	83 81       	ldd	r24, Z+3	; 0x03
     4cc:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	e8 1a       	sub	r14, r24
     4d4:	f8 0a       	sbc	r15, r24
     4d6:	f4 cf       	rjmp	.-24     	; 0x4c0 <mcp2515_send_message+0x9e>
		}
	}
	SET(MCP2515_CS);
     4d8:	c4 9a       	sbi	0x18, 4	; 24
     4da:	95 e0       	ldi	r25, 0x05	; 5
     4dc:	9a 95       	dec	r25
     4de:	f1 f7       	brne	.-4      	; 0x4dc <mcp2515_send_message+0xba>
     4e0:	00 00       	nop
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
     4e2:	c4 98       	cbi	0x18, 4	; 24
	address = (address == 0) ? 1 : address;
     4e4:	d1 10       	cpse	r13, r1
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <mcp2515_send_message+0xca>
     4e8:	dd 24       	eor	r13, r13
     4ea:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
     4ec:	8d 2d       	mov	r24, r13
     4ee:	80 68       	ori	r24, 0x80	; 128
     4f0:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	SET(MCP2515_CS);
     4f4:	c4 9a       	sbi	0x18, 4	; 24
	
	return address;
     4f6:	8d 2d       	mov	r24, r13
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <mcp2515_send_message+0xda>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
	
	return address;
}
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	08 95       	ret

00000510 <generate_extCAN_ID>:
	spi_putc(SPI_RTS | 0x01);
	SET(MCP2515_CS);

}*/

void generate_extCAN_ID(uint8_t *bytes, char *resultchars) {
     510:	fc 01       	movw	r30, r24
     512:	db 01       	movw	r26, r22

	resultchars[0] = (bytes[0] << 3) | (bytes[1] >> 5);
     514:	80 81       	ld	r24, Z
     516:	28 e0       	ldi	r18, 0x08	; 8
     518:	82 9f       	mul	r24, r18
     51a:	c0 01       	movw	r24, r0
     51c:	11 24       	eor	r1, r1
     51e:	91 81       	ldd	r25, Z+1	; 0x01
     520:	92 95       	swap	r25
     522:	96 95       	lsr	r25
     524:	97 70       	andi	r25, 0x07	; 7
     526:	98 2b       	or	r25, r24
     528:	9c 93       	st	X, r25
	resultchars[1] = (bytes[1] & 0x03) | 0x0C | ((bytes[1] & 0xFC) << 3);
     52a:	81 81       	ldd	r24, Z+1	; 0x01
     52c:	28 2f       	mov	r18, r24
     52e:	23 70       	andi	r18, 0x03	; 3
     530:	2c 60       	ori	r18, 0x0C	; 12
     532:	8c 7f       	andi	r24, 0xFC	; 252
     534:	38 e0       	ldi	r19, 0x08	; 8
     536:	83 9f       	mul	r24, r19
     538:	c0 01       	movw	r24, r0
     53a:	11 24       	eor	r1, r1
     53c:	28 2b       	or	r18, r24
     53e:	11 96       	adiw	r26, 0x01	; 1
     540:	2c 93       	st	X, r18
     542:	11 97       	sbiw	r26, 0x01	; 1
	resultchars[2] = bytes[2];
     544:	82 81       	ldd	r24, Z+2	; 0x02
     546:	12 96       	adiw	r26, 0x02	; 2
     548:	8c 93       	st	X, r24
     54a:	12 97       	sbiw	r26, 0x02	; 2
	resultchars[3] = bytes[3];
     54c:	83 81       	ldd	r24, Z+3	; 0x03
     54e:	13 96       	adiw	r26, 0x03	; 3
     550:	8c 93       	st	X, r24
     552:	08 95       	ret

00000554 <mcp2515_send_extmessage>:

}


uint8_t mcp2515_send_extmessage(tExtendedCAN *message)
{
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	1f 92       	push	r1
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	8c 01       	movw	r16, r24
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
     56c:	80 ea       	ldi	r24, 0xA0	; 160
     56e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <mcp2515_read_status>
     572:	89 83       	std	Y+1, r24	; 0x01
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	82 ff       	sbrs	r24, 2
     578:	09 c0       	rjmp	.+18     	; 0x58c <mcp2515_send_extmessage+0x38>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	84 ff       	sbrs	r24, 4
     57e:	08 c0       	rjmp	.+16     	; 0x590 <mcp2515_send_extmessage+0x3c>
		address = 0x02;
	} 
	else if (bit_is_clear(status, 6)) {
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	86 fd       	sbrc	r24, 6
     584:	4c c0       	rjmp	.+152    	; 0x61e <mcp2515_send_extmessage+0xca>
		address = 0x04;
     586:	64 e0       	ldi	r22, 0x04	; 4
     588:	d6 2e       	mov	r13, r22
     58a:	04 c0       	rjmp	.+8      	; 0x594 <mcp2515_send_extmessage+0x40>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (bit_is_clear(status, 2)) {
		address = 0x00;
     58c:	d1 2c       	mov	r13, r1
     58e:	02 c0       	rjmp	.+4      	; 0x594 <mcp2515_send_extmessage+0x40>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
     590:	52 e0       	ldi	r21, 0x02	; 2
     592:	d5 2e       	mov	r13, r21
	else {
		// all buffer used => could not send message
		return 0;
	}

	RESET(MCP2515_CS);
     594:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_WRITE_TX | address);
     596:	8d 2d       	mov	r24, r13
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	spi_putc(message->id[0]);
     59e:	f8 01       	movw	r30, r16
     5a0:	80 81       	ld	r24, Z
     5a2:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(message->id[1]);
     5a6:	f8 01       	movw	r30, r16
     5a8:	81 81       	ldd	r24, Z+1	; 0x01
     5aa:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	spi_putc(message->id[2]);
     5ae:	f8 01       	movw	r30, r16
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	spi_putc(message->id[3]);
     5b6:	f8 01       	movw	r30, r16
     5b8:	83 81       	ldd	r24, Z+3	; 0x03
     5ba:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	
	uint8_t length = message->header.length & 0x0f;
     5be:	f8 01       	movw	r30, r16
     5c0:	84 81       	ldd	r24, Z+4	; 0x04
     5c2:	c8 2e       	mov	r12, r24
     5c4:	c6 94       	lsr	r12
     5c6:	fc 2d       	mov	r31, r12
     5c8:	ff 70       	andi	r31, 0x0F	; 15
     5ca:	cf 2e       	mov	r12, r31
	
	if (message->header.rtr) {
     5cc:	80 ff       	sbrs	r24, 0
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <mcp2515_send_extmessage+0x86>
		// a rtr-frame has a length, but contains no data
		spi_putc((1<<RTR) | length);
     5d0:	8f 2f       	mov	r24, r31
     5d2:	80 64       	ori	r24, 0x40	; 64
     5d4:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     5d8:	11 c0       	rjmp	.+34     	; 0x5fc <mcp2515_send_extmessage+0xa8>
	}
	else {
		// set message length
		spi_putc(length);
     5da:	8f 2f       	mov	r24, r31
     5dc:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
		
		// data
		for (uint8_t i=0;i<length;i++) {
     5e0:	e1 2c       	mov	r14, r1
     5e2:	f1 2c       	mov	r15, r1
     5e4:	ec 14       	cp	r14, r12
     5e6:	50 f4       	brcc	.+20     	; 0x5fc <mcp2515_send_extmessage+0xa8>
     5e8:	f8 01       	movw	r30, r16
     5ea:	ee 0d       	add	r30, r14
     5ec:	ff 1d       	adc	r31, r15
			spi_putc(message->data[i]);
     5ee:	85 81       	ldd	r24, Z+5	; 0x05
     5f0:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	e8 1a       	sub	r14, r24
     5f8:	f8 0a       	sbc	r15, r24
     5fa:	f4 cf       	rjmp	.-24     	; 0x5e4 <mcp2515_send_extmessage+0x90>
		}
	}
	SET(MCP2515_CS);
     5fc:	c4 9a       	sbi	0x18, 4	; 24
     5fe:	95 e0       	ldi	r25, 0x05	; 5
     600:	9a 95       	dec	r25
     602:	f1 f7       	brne	.-4      	; 0x600 <mcp2515_send_extmessage+0xac>
     604:	00 00       	nop
	
	_delay_us(1);
	
	// send message
	RESET(MCP2515_CS);
     606:	c4 98       	cbi	0x18, 4	; 24
	address = (address == 0) ? 1 : address;
     608:	d1 10       	cpse	r13, r1
     60a:	02 c0       	rjmp	.+4      	; 0x610 <mcp2515_send_extmessage+0xbc>
     60c:	dd 24       	eor	r13, r13
     60e:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
     610:	8d 2d       	mov	r24, r13
     612:	80 68       	ori	r24, 0x80	; 128
     614:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
	SET(MCP2515_CS);
     618:	c4 9a       	sbi	0x18, 4	; 24
	
	return address;
     61a:	8d 2d       	mov	r24, r13
     61c:	01 c0       	rjmp	.+2      	; 0x620 <mcp2515_send_extmessage+0xcc>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
     61e:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	spi_putc(SPI_RTS | address);
	SET(MCP2515_CS);
	
	return address;
}
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	08 95       	ret

00000634 <mcp2515_static_filter>:

void mcp2515_static_filter(PGM_P filter)
{
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
	mcp2515_bit_modify(CANCTRL, 0xe0, (1<<REQOP2));
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	60 ee       	ldi	r22, 0xE0	; 224
     646:	8f e0       	ldi	r24, 0x0F	; 15
     648:	0e 94 ba 00 	call	0x174	; 0x174 <mcp2515_bit_modify>
     64c:	10 e0       	ldi	r17, 0x00	; 0
	
	uint8_t index = 0;
	for (uint8_t i=0;i<3;i++)
     64e:	f1 2c       	mov	r15, r1

void mcp2515_static_filter(PGM_P filter)
{
	mcp2515_bit_modify(CANCTRL, 0xe0, (1<<REQOP2));
	
	uint8_t index = 0;
     650:	e1 2c       	mov	r14, r1
	for (uint8_t i=0;i<3;i++)
	{
		RESET(MCP2515_CS);
     652:	c4 98       	cbi	0x18, 4	; 24
		spi_putc(SPI_WRITE);
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
		spi_putc(RXF0SIDH + i*0x10);
     65a:	81 2f       	mov	r24, r17
     65c:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
		
		for (uint8_t j=0;j<12;j++) 
     660:	00 e0       	ldi	r16, 0x00	; 0
		{
			if (i == 2 && j >= 0x08)
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	f8 12       	cpse	r15, r24
     666:	02 c0       	rjmp	.+4      	; 0x66c <mcp2515_static_filter+0x38>
     668:	08 30       	cpi	r16, 0x08	; 8
     66a:	50 f4       	brcc	.+20     	; 0x680 <mcp2515_static_filter+0x4c>
				break;
			
			spi_putc(pgm_read_byte(&filter[index]));
     66c:	fe 01       	movw	r30, r28
     66e:	ee 0d       	add	r30, r14
     670:	f1 1d       	adc	r31, r1
     672:	84 91       	lpm	r24, Z
     674:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_putc>
			index++;
     678:	e3 94       	inc	r14
	{
		RESET(MCP2515_CS);
		spi_putc(SPI_WRITE);
		spi_putc(RXF0SIDH + i*0x10);
		
		for (uint8_t j=0;j<12;j++) 
     67a:	0f 5f       	subi	r16, 0xFF	; 255
     67c:	0c 30       	cpi	r16, 0x0C	; 12
     67e:	89 f7       	brne	.-30     	; 0x662 <mcp2515_static_filter+0x2e>
			
			spi_putc(pgm_read_byte(&filter[index]));
			index++;
		}
		
		SET(MCP2515_CS);
     680:	c4 9a       	sbi	0x18, 4	; 24
void mcp2515_static_filter(PGM_P filter)
{
	mcp2515_bit_modify(CANCTRL, 0xe0, (1<<REQOP2));
	
	uint8_t index = 0;
	for (uint8_t i=0;i<3;i++)
     682:	f3 94       	inc	r15
     684:	10 5f       	subi	r17, 0xF0	; 240
     686:	10 33       	cpi	r17, 0x30	; 48
     688:	21 f7       	brne	.-56     	; 0x652 <mcp2515_static_filter+0x1e>
		}
		
		SET(MCP2515_CS);
	}
	
	mcp2515_bit_modify(CANCTRL, 0xe0, 0);
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	60 ee       	ldi	r22, 0xE0	; 224
     68e:	8f e0       	ldi	r24, 0x0F	; 15
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
		}
		
		SET(MCP2515_CS);
	}
	
	mcp2515_bit_modify(CANCTRL, 0xe0, 0);
     69c:	0c 94 ba 00 	jmp	0x174	; 0x174 <mcp2515_bit_modify>

000006a0 <booster_send_info>:
	struct BOOSTER_STATE state;		//< the state of the booster
	uint16_t supply_voltage;		//< the adc value from the supply voltage. Not the real value!
	uint16_t  capacitors_voltage;	//< the voltage of the capacitors (Volt)
};

void booster_send_info(void) {
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <booster_send_info+0x6>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <booster_send_info+0x8>
     6a8:	1f 92       	push	r1
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62

	struct BOOSTER_INFO info;
	
	info.state.power_state = ( (IS_SET(POWER_NORM) && !IS_SET(POWER_INV) ) > 0);
     6ae:	99 9b       	sbis	0x13, 1	; 19
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <booster_send_info+0x20>
     6b2:	23 b3       	in	r18, 0x13	; 19
     6b4:	31 e0       	ldi	r19, 0x01	; 1
     6b6:	23 27       	eor	r18, r19
     6b8:	82 2f       	mov	r24, r18
     6ba:	81 70       	andi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <booster_send_info+0x24>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	18 16       	cp	r1, r24
     6c8:	19 06       	cpc	r1, r25
     6ca:	0c f0       	brlt	.+2      	; 0x6ce <booster_send_info+0x2e>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	20 fb       	bst	r18, 0
     6d2:	85 f9       	bld	r24, 5
     6d4:	89 83       	std	Y+1, r24	; 0x01
	info.state.pwm_state = ((PWM_IS_ENABLED) > 0);
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0f b4       	in	r0, 0x2f	; 47
     6da:	05 fe       	sbrs	r0, 5
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	90 fb       	bst	r25, 0
     6e2:	84 f9       	bld	r24, 4
     6e4:	89 83       	std	Y+1, r24	; 0x01
	info.state.release_state = (IS_SET(RELEASE) > 0);
     6e6:	99 b3       	in	r25, 0x19	; 25
     6e8:	93 fb       	bst	r25, 3
     6ea:	99 27       	eor	r25, r25
     6ec:	90 f9       	bld	r25, 0
     6ee:	90 fb       	bst	r25, 0
     6f0:	83 f9       	bld	r24, 3
	info.state.error_state = voltage_error_t.error;
     6f2:	90 91 16 02 	lds	r25, 0x0216
     6f6:	90 fb       	bst	r25, 0
     6f8:	82 f9       	bld	r24, 2
     6fa:	89 83       	std	Y+1, r24	; 0x01
	
	info.supply_voltage = get_supply_raw_voltage();
     6fc:	0e 94 8a 07 	call	0xf14	; 0xf14 <get_supply_raw_voltage>
     700:	9b 83       	std	Y+3, r25	; 0x03
     702:	8a 83       	std	Y+2, r24	; 0x02
	info.capacitors_voltage = get_capacitors_voltage();
     704:	0e 94 0d 07 	call	0xe1a	; 0xe1a <get_capacitors_voltage>
     708:	9d 83       	std	Y+5, r25	; 0x05
     70a:	8c 83       	std	Y+4, r24	; 0x04

	can_put_cmd(CMD_STATE, (uint8_t *)&info, 5);
     70c:	45 e0       	ldi	r20, 0x05	; 5
     70e:	be 01       	movw	r22, r28
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	82 ef       	ldi	r24, 0xF2	; 242
     716:	0e 94 0a 0a 	call	0x1414	; 0x1414 <can_put_cmd>
}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <booster_pwm_enable>:

void booster_pwm_enable(void) {

	if (booster_pwm_lock)
     72a:	80 91 64 00 	lds	r24, 0x0064
     72e:	81 11       	cpse	r24, r1
     730:	0e c0       	rjmp	.+28     	; 0x74e <booster_pwm_enable+0x24>
		return;

	// save timestamp
	pwm_start = timer_get_ms();
     732:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     736:	60 93 22 02 	sts	0x0222, r22
     73a:	70 93 23 02 	sts	0x0223, r23
     73e:	80 93 24 02 	sts	0x0224, r24
     742:	90 93 25 02 	sts	0x0225, r25

	TCCR1A |= (1 << COM1B1);
     746:	8f b5       	in	r24, 0x2f	; 47
     748:	80 62       	ori	r24, 0x20	; 32
     74a:	8f bd       	out	0x2f, r24	; 47
	RESET(LED_RED1); // PORT off - LED on
     74c:	af 98       	cbi	0x15, 7	; 21
     74e:	08 95       	ret

00000750 <booster_pwm_disable>:
}

void booster_pwm_disable(void) {

	// visual that the pwm is off
	pwm_start = 0;
     750:	10 92 22 02 	sts	0x0222, r1
     754:	10 92 23 02 	sts	0x0223, r1
     758:	10 92 24 02 	sts	0x0224, r1
     75c:	10 92 25 02 	sts	0x0225, r1

	TCCR1A &= ~(1 << COM1B1);
     760:	8f b5       	in	r24, 0x2f	; 47
     762:	8f 7d       	andi	r24, 0xDF	; 223
     764:	8f bd       	out	0x2f, r24	; 47
	// Make sure the output port ist disabled
	PORTD &= ~(1 << PD4);
     766:	94 98       	cbi	0x12, 4	; 18
	SET(LED_RED1); // PORT on - LED off
     768:	af 9a       	sbi	0x15, 7	; 21
     76a:	08 95       	ret

0000076c <booster_disable>:
}

// disables power supply, locks the booster and dischages the capacitors
void booster_disable(void) {
	booster_pwm_lock = 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 64 00 	sts	0x0064, r24
	booster_pwm_disable();
     772:	0e 94 a8 03 	call	0x750	; 0x750 <booster_pwm_disable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     776:	8f e1       	ldi	r24, 0x1F	; 31
     778:	9e e4       	ldi	r25, 0x4E	; 78
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <booster_disable+0xe>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <booster_disable+0x14>
     780:	00 00       	nop
	_delay_ms(5);
	RESET(POWER_NORM);
     782:	a9 98       	cbi	0x15, 1	; 21
	RESET(POWER_INV);
     784:	a8 98       	cbi	0x15, 0	; 21
	RESET(NOT_DISCHARGE);
     786:	c0 98       	cbi	0x18, 0	; 24
     788:	08 95       	ret

0000078a <booster_enable>:
}

void booster_enable(void) {
	SET(NOT_DISCHARGE);
     78a:	c0 9a       	sbi	0x18, 0	; 24
	SET(POWER_NORM);
     78c:	a9 9a       	sbi	0x15, 1	; 21
	RESET(POWER_INV);
     78e:	a8 98       	cbi	0x15, 0	; 21
	//_delay_ms(500);
	if(init == 0) {
     790:	80 91 1c 02 	lds	r24, 0x021C
     794:	81 11       	cpse	r24, r1
     796:	0d c0       	rjmp	.+26     	; 0x7b2 <booster_enable+0x28>
		init = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 1c 02 	sts	0x021C, r24
		uint8_t sreg = SREG;
     79e:	2f b7       	in	r18, 0x3f	; 63
		cli();
     7a0:	f8 94       	cli
		pending_us10 = 50000; //500ms * 100
     7a2:	80 e5       	ldi	r24, 0x50	; 80
     7a4:	93 ec       	ldi	r25, 0xC3	; 195
     7a6:	90 93 66 00 	sts	0x0066, r25
     7aa:	80 93 65 00 	sts	0x0065, r24
		SREG=sreg;
     7ae:	2f bf       	out	0x3f, r18	; 63
     7b0:	08 95       	ret
	}
	else {
		if( pending_us10 <= 0)
     7b2:	80 91 65 00 	lds	r24, 0x0065
     7b6:	90 91 66 00 	lds	r25, 0x0066
     7ba:	89 2b       	or	r24, r25
     7bc:	69 f4       	brne	.+26     	; 0x7d8 <booster_enable+0x4e>
		{
			init = 0;
     7be:	10 92 1c 02 	sts	0x021C, r1
			debug("Enable");
     7c2:	8b e6       	ldi	r24, 0x6B	; 107
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
			booster_pwm_lock = 0;
     7ca:	10 92 64 00 	sts	0x0064, r1
			booster_pwm_enable();
     7ce:	0e 94 95 03 	call	0x72a	; 0x72a <booster_pwm_enable>
			RESET(LED_GREEN1);
     7d2:	ae 98       	cbi	0x15, 6	; 21
			booster_auto_off = 0;
     7d4:	10 92 63 00 	sts	0x0063, r1
     7d8:	08 95       	ret

000007da <booster_set_max_voltage>:
		}
	}
}

void booster_set_max_voltage(uint16_t voltageIn) {
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
/*char stmp[16];
sprintf(stmp,"v2: %uV",voltageIn);
debug(stmp);*/
	if (voltageIn > 330u) {
     7e0:	cb 34       	cpi	r28, 0x4B	; 75
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	d8 07       	cpc	r29, r24
     7e6:	20 f0       	brcs	.+8      	; 0x7f0 <booster_set_max_voltage+0x16>
		error("Cannot set max voltage");
     7e8:	82 e7       	ldi	r24, 0x72	; 114
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 2d 0b 	call	0x165a	; 0x165a <error>
	}

	max_voltage = voltageIn;
     7f0:	d0 93 61 00 	sts	0x0061, r29
     7f4:	c0 93 60 00 	sts	0x0060, r28
}
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <booster_can_kick>:

uint8_t booster_can_kick(void) {
	if ( IS_SET(POWER_NORM) && !IS_SET(POWER_INV) ) {
     7fe:	99 9b       	sbis	0x13, 1	; 19
     800:	04 c0       	rjmp	.+8      	; 0x80a <booster_can_kick+0xc>
     802:	83 b3       	in	r24, 0x13	; 19
     804:	80 95       	com	r24
     806:	81 70       	andi	r24, 0x01	; 1
     808:	08 95       	ret
		return 1;
	}
	else {
		return 0;
     80a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     80c:	08 95       	ret

0000080e <booster_ctrl>:

void booster_ctrl(void) {
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
	
	uint16_t capacitors = get_capacitors_voltage();
     81e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <get_capacitors_voltage>
     822:	ec 01       	movw	r28, r24
	uint32_t time_now = timer_get_ms();
     824:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     828:	6b 01       	movw	r12, r22
     82a:	7c 01       	movw	r14, r24
	static uint32_t last_msg = 0;

	if (time_now < PING_TIMEOUT) {
     82c:	68 3e       	cpi	r22, 0xE8	; 232
     82e:	23 e0       	ldi	r18, 0x03	; 3
     830:	72 07       	cpc	r23, r18
     832:	81 05       	cpc	r24, r1
     834:	91 05       	cpc	r25, r1
     836:	08 f4       	brcc	.+2      	; 0x83a <booster_ctrl+0x2c>
     838:	30 c1       	rjmp	.+608    	; 0xa9a <__stack+0x23b>
		return;
	}
	
	// lock booster if an error occurret
	if (voltage_error_t.error) {
     83a:	80 91 16 02 	lds	r24, 0x0216
     83e:	80 ff       	sbrs	r24, 0
     840:	29 c0       	rjmp	.+82     	; 0x894 <__stack+0x35>
		booster_disable();
     842:	0e 94 b6 03 	call	0x76c	; 0x76c <booster_disable>
		uint32_t time_now = timer_get_ms();
     846:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     84a:	6b 01       	movw	r12, r22
     84c:	7c 01       	movw	r14, r24
		if (time_now - last_msg > 1000) {
     84e:	80 91 26 02 	lds	r24, 0x0226
     852:	90 91 27 02 	lds	r25, 0x0227
     856:	a0 91 28 02 	lds	r26, 0x0228
     85a:	b0 91 29 02 	lds	r27, 0x0229
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	da 01       	movw	r26, r20
     86c:	c9 01       	movw	r24, r18
     86e:	89 3e       	cpi	r24, 0xE9	; 233
     870:	93 40       	sbci	r25, 0x03	; 3
     872:	a1 05       	cpc	r26, r1
     874:	b1 05       	cpc	r27, r1
     876:	08 f4       	brcc	.+2      	; 0x87a <__stack+0x1b>
     878:	10 c1       	rjmp	.+544    	; 0xa9a <__stack+0x23b>
			warning("Critical error. Booster disabled!");
     87a:	89 e8       	ldi	r24, 0x89	; 137
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <warning>
			last_msg = time_now;
     882:	c0 92 26 02 	sts	0x0226, r12
     886:	d0 92 27 02 	sts	0x0227, r13
     88a:	e0 92 28 02 	sts	0x0228, r14
     88e:	f0 92 29 02 	sts	0x0229, r15
     892:	03 c1       	rjmp	.+518    	; 0xa9a <__stack+0x23b>
		}
		return;
	}

	// check supply voltage
	if (get_supply_voltage() < MINIMUM_SUPPLY_VOLTAGE) {
     894:	0e 94 79 07 	call	0xef2	; 0xef2 <get_supply_voltage>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	48 e8       	ldi	r20, 0x88	; 136
     89e:	51 e4       	ldi	r21, 0x41	; 65
     8a0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__cmpsf2>
     8a4:	87 ff       	sbrs	r24, 7
     8a6:	47 c0       	rjmp	.+142    	; 0x936 <__stack+0xd7>
		// disable booster
		if (timer_get_ms() - voltage_error_t.last_error < 1000)
     8a8:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     8ac:	00 91 17 02 	lds	r16, 0x0217
     8b0:	10 91 18 02 	lds	r17, 0x0218
     8b4:	20 91 19 02 	lds	r18, 0x0219
     8b8:	30 91 1a 02 	lds	r19, 0x021A
     8bc:	60 1b       	sub	r22, r16
     8be:	71 0b       	sbc	r23, r17
     8c0:	82 0b       	sbc	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	68 3e       	cpi	r22, 0xE8	; 232
     8c6:	73 40       	sbci	r23, 0x03	; 3
     8c8:	81 05       	cpc	r24, r1
     8ca:	91 05       	cpc	r25, r1
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <__stack+0x71>
     8ce:	e5 c0       	rjmp	.+458    	; 0xa9a <__stack+0x23b>
			return;
		booster_pwm_lock = 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 64 00 	sts	0x0064, r24
		booster_pwm_disable();
     8d6:	0e 94 a8 03 	call	0x750	; 0x750 <booster_pwm_disable>
     8da:	8f e1       	ldi	r24, 0x1F	; 31
     8dc:	9e e4       	ldi	r25, 0x4E	; 78
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <__stack+0x7f>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <__stack+0x85>
     8e4:	00 00       	nop
		_delay_ms(5);
		RESET(POWER_NORM);
     8e6:	a9 98       	cbi	0x15, 1	; 21
		RESET(POWER_INV);
     8e8:	a8 98       	cbi	0x15, 0	; 21
		voltage_error_t.warn++;
     8ea:	20 91 16 02 	lds	r18, 0x0216
     8ee:	82 2f       	mov	r24, r18
     8f0:	86 95       	lsr	r24
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	8f 77       	andi	r24, 0x7F	; 127
     8f6:	98 2f       	mov	r25, r24
     8f8:	99 0f       	add	r25, r25
     8fa:	21 70       	andi	r18, 0x01	; 1
     8fc:	29 2b       	or	r18, r25
     8fe:	20 93 16 02 	sts	0x0216, r18

		if (voltage_error_t.warn >= 5) {
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	05 97       	sbiw	r24, 0x05	; 5
     906:	44 f0       	brlt	.+16     	; 0x918 <__stack+0xb9>
			voltage_error_t.error = 1;
     908:	21 60       	ori	r18, 0x01	; 1
     90a:	20 93 16 02 	sts	0x0216, r18
			booster_disable();
     90e:	0e 94 b6 03 	call	0x76c	; 0x76c <booster_disable>
			warning("Supply voltage is too low. Booster disabled.");
     912:	8b ea       	ldi	r24, 0xAB	; 171
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0xbd>
		}
		else {
			warning("Supply voltage is too low.");
     918:	88 ed       	ldi	r24, 0xD8	; 216
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <warning>
		}

		voltage_error_t.last_error = timer_get_ms();
     920:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     924:	60 93 17 02 	sts	0x0217, r22
     928:	70 93 18 02 	sts	0x0218, r23
     92c:	80 93 19 02 	sts	0x0219, r24
     930:	90 93 1a 02 	sts	0x021A, r25
		
		return;
     934:	b2 c0       	rjmp	.+356    	; 0xa9a <__stack+0x23b>
	}
	else {
		// check for reenable
		if (voltage_error_t.warn) {
     936:	80 91 16 02 	lds	r24, 0x0216
     93a:	8e 7f       	andi	r24, 0xFE	; 254
     93c:	09 f1       	breq	.+66     	; 0x980 <__stack+0x121>
			if (timer_get_ms() - voltage_error_t.last_error < 5000)
     93e:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     942:	00 91 17 02 	lds	r16, 0x0217
     946:	10 91 18 02 	lds	r17, 0x0218
     94a:	20 91 19 02 	lds	r18, 0x0219
     94e:	30 91 1a 02 	lds	r19, 0x021A
     952:	60 1b       	sub	r22, r16
     954:	71 0b       	sbc	r23, r17
     956:	82 0b       	sbc	r24, r18
     958:	93 0b       	sbc	r25, r19
     95a:	68 38       	cpi	r22, 0x88	; 136
     95c:	73 41       	sbci	r23, 0x13	; 19
     95e:	81 05       	cpc	r24, r1
     960:	91 05       	cpc	r25, r1
     962:	08 f4       	brcc	.+2      	; 0x966 <__stack+0x107>
     964:	9a c0       	rjmp	.+308    	; 0xa9a <__stack+0x23b>
				return;
			warning("Reenable booster.");
     966:	83 ef       	ldi	r24, 0xF3	; 243
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <warning>
			SET(POWER_NORM);
     96e:	a9 9a       	sbi	0x15, 1	; 21
			RESET(POWER_INV);
     970:	a8 98       	cbi	0x15, 0	; 21
			booster_pwm_lock = 0;
     972:	10 92 64 00 	sts	0x0064, r1
			voltage_error_t.warn = 0;
     976:	80 91 16 02 	lds	r24, 0x0216
     97a:	81 70       	andi	r24, 0x01	; 1
     97c:	80 93 16 02 	sts	0x0216, r24
		}
	}
		
	// check how long the charge takes time
	if (pwm_start > 0) { // pwm enabled?
     980:	80 91 22 02 	lds	r24, 0x0222
     984:	90 91 23 02 	lds	r25, 0x0223
     988:	a0 91 24 02 	lds	r26, 0x0224
     98c:	b0 91 25 02 	lds	r27, 0x0225
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	a1 05       	cpc	r26, r1
     994:	b1 05       	cpc	r27, r1
     996:	f1 f0       	breq	.+60     	; 0x9d4 <__stack+0x175>
		if ((time_now - pwm_start) > MAX_BOOST_TIME) {
     998:	a7 01       	movw	r20, r14
     99a:	96 01       	movw	r18, r12
     99c:	28 1b       	sub	r18, r24
     99e:	39 0b       	sbc	r19, r25
     9a0:	4a 0b       	sbc	r20, r26
     9a2:	5b 0b       	sbc	r21, r27
     9a4:	da 01       	movw	r26, r20
     9a6:	c9 01       	movw	r24, r18
     9a8:	81 33       	cpi	r24, 0x31	; 49
     9aa:	95 47       	sbci	r25, 0x75	; 117
     9ac:	a1 05       	cpc	r26, r1
     9ae:	b1 05       	cpc	r27, r1
     9b0:	88 f0       	brcs	.+34     	; 0x9d4 <__stack+0x175>
			uint16_t cv = get_capacitors_voltage();
     9b2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <get_capacitors_voltage>
			if (cv < 17) {
     9b6:	41 97       	sbiw	r24, 0x11	; 17
     9b8:	18 f4       	brcc	.+6      	; 0x9c0 <__stack+0x161>
				warning("Check cable between ReKick and booster!");
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0x165>
				voltage_error_t.error = 1;
			}
			else {
				warning("Charging took too long. Lock ReKick!");
     9c0:	8d e2       	ldi	r24, 0x2D	; 45
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <warning>
				voltage_error_t.error = 1;
     9c8:	80 91 16 02 	lds	r24, 0x0216
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	80 93 16 02 	sts	0x0216, r24
     9d2:	63 c0       	rjmp	.+198    	; 0xa9a <__stack+0x23b>
			return;
		}
	}

	// disables the booster stage if we did not get a heartbeat from the laptop.
	if (time_now - last_heartbeat < PING_TIMEOUT || manual_mode) {
     9d4:	80 91 1e 02 	lds	r24, 0x021E
     9d8:	90 91 1f 02 	lds	r25, 0x021F
     9dc:	a0 91 20 02 	lds	r26, 0x0220
     9e0:	b0 91 21 02 	lds	r27, 0x0221
     9e4:	c8 1a       	sub	r12, r24
     9e6:	d9 0a       	sbc	r13, r25
     9e8:	ea 0a       	sbc	r14, r26
     9ea:	fb 0a       	sbc	r15, r27
     9ec:	80 91 63 00 	lds	r24, 0x0063
     9f0:	48 ee       	ldi	r20, 0xE8	; 232
     9f2:	c4 16       	cp	r12, r20
     9f4:	43 e0       	ldi	r20, 0x03	; 3
     9f6:	d4 06       	cpc	r13, r20
     9f8:	e1 04       	cpc	r14, r1
     9fa:	f1 04       	cpc	r15, r1
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <__stack+0x1a9>
     9fe:	90 91 1d 02 	lds	r25, 0x021D
     a02:	99 23       	and	r25, r25
     a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x1a9>
     a06:	41 c0       	rjmp	.+130    	; 0xa8a <__stack+0x22b>
		if (booster_auto_off) {
     a08:	81 11       	cpse	r24, r1
			//wait 0.5sec till dc-dc is loaded (interrupt)
			//char deb[8];
			//sprintf(deb, "pen%d\n", pending_ms);
			//debug(deb);
			booster_enable();
     a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <booster_enable>
		}

		if (!auto_boost)
     a0e:	80 91 62 00 	lds	r24, 0x0062
     a12:	88 23       	and	r24, r24
     a14:	09 f4       	brne	.+2      	; 0xa18 <__stack+0x1b9>
     a16:	41 c0       	rjmp	.+130    	; 0xa9a <__stack+0x23b>
			return;

		if (capacitors >= max_voltage && PWM_IS_ENABLED) {
     a18:	80 91 60 00 	lds	r24, 0x0060
     a1c:	90 91 61 00 	lds	r25, 0x0061
     a20:	c8 17       	cp	r28, r24
     a22:	d9 07       	cpc	r29, r25
     a24:	a8 f0       	brcs	.+42     	; 0xa50 <__stack+0x1f1>
     a26:	0f b4       	in	r0, 0x2f	; 47
     a28:	05 fe       	sbrs	r0, 5
     a2a:	12 c0       	rjmp	.+36     	; 0xa50 <__stack+0x1f1>
						debug("A disab");
					booster_pwm_disable();
				}
			}
*/
			if (manual_mode)
     a2c:	80 91 1d 02 	lds	r24, 0x021D
     a30:	88 23       	and	r24, r24
     a32:	21 f0       	breq	.+8      	; 0xa3c <__stack+0x1dd>
				debug("A disab");
     a34:	82 e5       	ldi	r24, 0x52	; 82
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
			booster_auto_off = 1;
		}
	}


}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
				}
			}
*/
			if (manual_mode)
				debug("A disab");
			booster_pwm_disable();
     a4c:	0c 94 a8 03 	jmp	0x750	; 0x750 <booster_pwm_disable>
		}
		else if (capacitors <= max_voltage - 10 &&
     a50:	0a 97       	sbiw	r24, 0x0a	; 10
     a52:	8c 17       	cp	r24, r28
     a54:	9d 07       	cpc	r25, r29
     a56:	08 f1       	brcs	.+66     	; 0xa9a <__stack+0x23b>
     a58:	80 91 64 00 	lds	r24, 0x0064
     a5c:	81 11       	cpse	r24, r1
     a5e:	1d c0       	rjmp	.+58     	; 0xa9a <__stack+0x23b>
				(booster_pwm_lock == 0) &&
     a60:	0f b4       	in	r0, 0x2f	; 47
     a62:	05 fc       	sbrc	r0, 5
     a64:	1a c0       	rjmp	.+52     	; 0xa9a <__stack+0x23b>
				!PWM_IS_ENABLED) {
			if (manual_mode)
     a66:	80 91 1d 02 	lds	r24, 0x021D
     a6a:	88 23       	and	r24, r24
     a6c:	21 f0       	breq	.+8      	; 0xa76 <__stack+0x217>
				debug("A enab");
     a6e:	8a e5       	ldi	r24, 0x5A	; 90
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
			booster_auto_off = 1;
		}
	}


}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
		else if (capacitors <= max_voltage - 10 &&
				(booster_pwm_lock == 0) &&
				!PWM_IS_ENABLED) {
			if (manual_mode)
				debug("A enab");
			booster_pwm_enable();
     a86:	0c 94 95 03 	jmp	0x72a	; 0x72a <booster_pwm_enable>

		}
	}
	else {
		// disable everything
		if (!booster_auto_off) {
     a8a:	81 11       	cpse	r24, r1
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <__stack+0x23b>
			booster_disable();
     a8e:	0e 94 b6 03 	call	0x76c	; 0x76c <booster_disable>
			SET(LED_GREEN1);
     a92:	ae 9a       	sbi	0x15, 6	; 21
			booster_auto_off = 1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 63 00 	sts	0x0063, r24
		}
	}


}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <booster_init>:

// TODO: booster is disabled by default
void booster_init(void) {

	// set PWM channel as output and disable
	SET_OUTPUT(PWM_BOOST);
     aac:	8c 9a       	sbi	0x11, 4	; 17
	RESET(PWM_BOOST);
     aae:	94 98       	cbi	0x12, 4	; 18

	// Init PWM but dont connect the output port => disabled
	// Phase Correct, TOP is OCR1A, Update OCR1x at TOP, prescaler 8
	// Clear OC1B on Compare Match when upcounting. Set OC1B on Compare
	// Match when downcounting.
	TCCR1A = (1 << WGM11) | (1 << WGM10);
     ab0:	83 e0       	ldi	r24, 0x03	; 3
     ab2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1 << CS10);
     ab4:	81 e1       	ldi	r24, 0x11	; 17
     ab6:	8e bd       	out	0x2e, r24	; 46

	// timing for the pwm
	OCR1A = 104; // Obergrenze -> 13us Periode	
     ab8:	88 e6       	ldi	r24, 0x68	; 104
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	9b bd       	out	0x2b, r25	; 43
     abe:	8a bd       	out	0x2a, r24	; 42
	//OCR1B = 52;
	OCR1B = 32;
     ac0:	80 e2       	ldi	r24, 0x20	; 32
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	99 bd       	out	0x29, r25	; 41
     ac6:	88 bd       	out	0x28, r24	; 40
	//OCR1A = 114;
	//OCR1B = 33;

	// Status LED red shows red
	SET_OUTPUT(LED_RED1);
     ac8:	a7 9a       	sbi	0x14, 7	; 20
	SET(LED_RED1); // PORT on - LED off
     aca:	af 9a       	sbi	0x15, 7	; 21
	SET_OUTPUT(LED_GREEN1);
     acc:	a6 9a       	sbi	0x14, 6	; 20
	SET(LED_GREEN1); // PORT on - LED off
     ace:	ae 9a       	sbi	0x15, 6	; 21

	booster_pwm_disable();
     ad0:	0e 94 a8 03 	call	0x750	; 0x750 <booster_pwm_disable>
     ad4:	8f e1       	ldi	r24, 0x1F	; 31
     ad6:	9e e4       	ldi	r25, 0x4E	; 78
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <booster_init+0x2c>
     adc:	00 c0       	rjmp	.+0      	; 0xade <booster_init+0x32>
     ade:	00 00       	nop
	_delay_ms(5);

	// Booster power is disabled per default
	SET_OUTPUT(POWER_NORM);
     ae0:	a1 9a       	sbi	0x14, 1	; 20
	SET_OUTPUT(POWER_INV);
     ae2:	a0 9a       	sbi	0x14, 0	; 20
	RESET(POWER_NORM);
     ae4:	a9 98       	cbi	0x15, 1	; 21
	RESET(POWER_INV);
     ae6:	a8 98       	cbi	0x15, 0	; 21

	// disable discharging
	SET_OUTPUT(NOT_DISCHARGE);
     ae8:	b8 9a       	sbi	0x17, 0	; 23
	SET(NOT_DISCHARGE);
     aea:	c0 9a       	sbi	0x18, 0	; 24

	// per default the booster is off
	booster_auto_off = 1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 63 00 	sts	0x0063, r24
     af2:	08 95       	ret

00000af4 <__vector_4>:
#define TIME_BETWEEN_TWO_SHOTS	200 // ms

volatile uint16_t pending_us10 = 1;

// called every 10us
ISR(TIMER2_COMP_vect) {
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
	static uint8_t uscnt = 0;
	//TOGGLE(TEST);
	if (pending_us10 > 0) { // && ++uscnt > 100) {
     b16:	80 91 65 00 	lds	r24, 0x0065
     b1a:	90 91 66 00 	lds	r25, 0x0066
     b1e:	89 2b       	or	r24, r25
     b20:	49 f0       	breq	.+18     	; 0xb34 <__vector_4+0x40>
		//uscnt = 0;
		pending_us10--;
     b22:	80 91 65 00 	lds	r24, 0x0065
     b26:	90 91 66 00 	lds	r25, 0x0066
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	90 93 66 00 	sts	0x0066, r25
     b30:	80 93 65 00 	sts	0x0065, r24

	}
	if (++uscnt > 100) {
     b34:	80 91 35 02 	lds	r24, 0x0235
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 35 02 	sts	0x0235, r24
     b3e:	85 36       	cpi	r24, 0x65	; 101
     b40:	20 f0       	brcs	.+8      	; 0xb4a <__vector_4+0x56>
		timer_incTimer();
     b42:	0e 94 8f 07 	call	0xf1e	; 0xf1e <timer_incTimer>
		uscnt = 0;
     b46:	10 92 35 02 	sts	0x0235, r1

	}

}
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <kicker_init>:

	//debug
	//SET_OUTPUT(TEST);

	// Init PWM
	TIMSK |= (1 << OCIE2);
     b6c:	89 b7       	in	r24, 0x39	; 57
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	89 bf       	out	0x39, r24	; 57
	TCCR2 |= (1 << WGM21) | (1 << CS20);
     b72:	85 b5       	in	r24, 0x25	; 37
     b74:	89 60       	ori	r24, 0x09	; 9
     b76:	85 bd       	out	0x25, r24	; 37
	OCR2 = F_CPU/100000;
     b78:	80 ea       	ldi	r24, 0xA0	; 160
     b7a:	83 bd       	out	0x23, r24	; 35
	
	// configure the port to release the kicker
	SET_OUTPUT(RELEASE);
     b7c:	d3 9a       	sbi	0x1a, 3	; 26
	RESET(RELEASE);
     b7e:	db 98       	cbi	0x1b, 3	; 27
     b80:	08 95       	ret

00000b82 <kicker_add_kick_job>:
}

// save the message
// the kick is done by kicker_task_handler
void kicker_add_kick_job(uint16_t us10) {
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	ec 01       	movw	r28, r24
	kick_job.timestamp = timer_get_ms();
     b88:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     b8c:	60 93 2a 02 	sts	0x022A, r22
     b90:	70 93 2b 02 	sts	0x022B, r23
     b94:	80 93 2c 02 	sts	0x022C, r24
     b98:	90 93 2d 02 	sts	0x022D, r25
	kick_job.release_time = us10;
     b9c:	d0 93 33 02 	sts	0x0233, r29
     ba0:	c0 93 32 02 	sts	0x0232, r28

	return;
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <kicker_add_kick_job_forced>:

// save the message
// the kick is done by kicker_task_handler
void kicker_add_kick_job_forced(uint16_t us10, uint8_t forceVoltage) {
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	ec 01       	movw	r28, r24
     bb2:	16 2f       	mov	r17, r22
	if (forceVoltage > max_voltage || forceVoltage < max_voltage - 10) {
     bb4:	20 91 60 00 	lds	r18, 0x0060
     bb8:	26 17       	cp	r18, r22
     bba:	40 f0       	brcs	.+16     	; 0xbcc <kicker_add_kick_job_forced+0x22>
     bbc:	86 2f       	mov	r24, r22
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	2a 50       	subi	r18, 0x0A	; 10
     bc4:	31 09       	sbc	r19, r1
     bc6:	82 17       	cp	r24, r18
     bc8:	93 07       	cpc	r25, r19
     bca:	3c f4       	brge	.+14     	; 0xbda <kicker_add_kick_job_forced+0x30>
		warning("Cannot reach this voltage");
     bcc:	81 e6       	ldi	r24, 0x61	; 97
     bce:	91 e0       	ldi	r25, 0x01	; 1
	kick_job.timestamp = timer_get_ms();
	kick_job.release_time = us10;
	kick_job.at_voltage = forceVoltage;

	return;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17

// save the message
// the kick is done by kicker_task_handler
void kicker_add_kick_job_forced(uint16_t us10, uint8_t forceVoltage) {
	if (forceVoltage > max_voltage || forceVoltage < max_voltage - 10) {
		warning("Cannot reach this voltage");
     bd6:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <warning>
		return;
	}

	kick_job.timestamp = timer_get_ms();
     bda:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     bde:	60 93 2a 02 	sts	0x022A, r22
     be2:	70 93 2b 02 	sts	0x022B, r23
     be6:	80 93 2c 02 	sts	0x022C, r24
     bea:	90 93 2d 02 	sts	0x022D, r25
	kick_job.release_time = us10;
     bee:	d0 93 33 02 	sts	0x0233, r29
     bf2:	c0 93 32 02 	sts	0x0232, r28
	kick_job.at_voltage = forceVoltage;
     bf6:	10 93 34 02 	sts	0x0234, r17

	return;
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	08 95       	ret

00000c02 <kicker_kick_handler>:

// handle the kick job
// _not_ thread safe
void kicker_kick_handler(void) {
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	6e 97       	sbiw	r28, 0x1e	; 30
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	uint8_t sreg;
	//uint8_t i;
	uint32_t time_now = timer_get_ms();
     c22:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     c26:	6b 01       	movw	r12, r22
     c28:	7c 01       	movw	r14, r24

	// no job to do if timestamp is 0
	if (kick_job.timestamp == 0)
     c2a:	80 91 2a 02 	lds	r24, 0x022A
     c2e:	90 91 2b 02 	lds	r25, 0x022B
     c32:	a0 91 2c 02 	lds	r26, 0x022C
     c36:	b0 91 2d 02 	lds	r27, 0x022D
     c3a:	89 2b       	or	r24, r25
     c3c:	8a 2b       	or	r24, r26
     c3e:	8b 2b       	or	r24, r27
     c40:	09 f4       	brne	.+2      	; 0xc44 <kicker_kick_handler+0x42>
     c42:	b1 c0       	rjmp	.+354    	; 0xda6 <kicker_kick_handler+0x1a4>
		return;

	// time between shots
	if (time_now - kick_job.last_kick < TIME_BETWEEN_TWO_SHOTS) {
     c44:	80 91 2e 02 	lds	r24, 0x022E
     c48:	90 91 2f 02 	lds	r25, 0x022F
     c4c:	a0 91 30 02 	lds	r26, 0x0230
     c50:	b0 91 31 02 	lds	r27, 0x0231
     c54:	a7 01       	movw	r20, r14
     c56:	96 01       	movw	r18, r12
     c58:	28 1b       	sub	r18, r24
     c5a:	39 0b       	sbc	r19, r25
     c5c:	4a 0b       	sbc	r20, r26
     c5e:	5b 0b       	sbc	r21, r27
     c60:	28 3c       	cpi	r18, 0xC8	; 200
     c62:	31 05       	cpc	r19, r1
     c64:	41 05       	cpc	r20, r1
     c66:	51 05       	cpc	r21, r1
     c68:	28 f1       	brcs	.+74     	; 0xcb4 <kicker_kick_handler+0xb2>
		kick_job.timestamp = 0;
		return;
	}

	// handle forced_voltage
	if (kick_job.at_voltage > 0) {
     c6a:	10 91 34 02 	lds	r17, 0x0234
     c6e:	11 23       	and	r17, r17
     c70:	51 f0       	breq	.+20     	; 0xc86 <kicker_kick_handler+0x84>
		int16_t delta = (((int16_t) kick_job.at_voltage) - ((int16_t)get_capacitors_voltage()));
     c72:	0e 94 0d 07 	call	0xe1a	; 0xe1a <get_capacitors_voltage>
     c76:	21 2f       	mov	r18, r17
     c78:	30 e0       	ldi	r19, 0x00	; 0
		if (abs(delta) > EPSILON_FORCED_VOLTAGE)
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	09 f0       	breq	.+2      	; 0xc82 <kicker_kick_handler+0x80>
     c80:	92 c0       	rjmp	.+292    	; 0xda6 <kicker_kick_handler+0x1a4>
			return;
		kick_job.at_voltage = 0;
     c82:	10 92 34 02 	sts	0x0234, r1
	}

	// the job expires after some milliseconds
	if (time_now - kick_job.timestamp > KICK_TASK_EXPIRE) {
     c86:	80 91 2a 02 	lds	r24, 0x022A
     c8a:	90 91 2b 02 	lds	r25, 0x022B
     c8e:	a0 91 2c 02 	lds	r26, 0x022C
     c92:	b0 91 2d 02 	lds	r27, 0x022D
     c96:	c8 1a       	sub	r12, r24
     c98:	d9 0a       	sbc	r13, r25
     c9a:	ea 0a       	sbc	r14, r26
     c9c:	fb 0a       	sbc	r15, r27
     c9e:	31 ed       	ldi	r19, 0xD1	; 209
     ca0:	c3 16       	cp	r12, r19
     ca2:	37 e0       	ldi	r19, 0x07	; 7
     ca4:	d3 06       	cpc	r13, r19
     ca6:	e1 04       	cpc	r14, r1
     ca8:	f1 04       	cpc	r15, r1
     caa:	68 f0       	brcs	.+26     	; 0xcc6 <kicker_kick_handler+0xc4>
		warning("Kick job expired.");
     cac:	8b e7       	ldi	r24, 0x7B	; 123
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <warning>
		kick_job.timestamp = 0;
     cb4:	10 92 2a 02 	sts	0x022A, r1
     cb8:	10 92 2b 02 	sts	0x022B, r1
     cbc:	10 92 2c 02 	sts	0x022C, r1
     cc0:	10 92 2d 02 	sts	0x022D, r1
		return;
     cc4:	70 c0       	rjmp	.+224    	; 0xda6 <kicker_kick_handler+0x1a4>
	}

	// check if the booster is enabled
	if (!booster_can_kick()) {
     cc6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <booster_can_kick>
     cca:	81 11       	cpse	r24, r1
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <kicker_kick_handler+0xd6>
		debug("Cannot kick. Booster state is disabled.");
     cce:	8d e8       	ldi	r24, 0x8D	; 141
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
		return;
     cd6:	67 c0       	rjmp	.+206    	; 0xda6 <kicker_kick_handler+0x1a4>
	}
	//kick_job.timestamp = timer_get_ms(); //DEBUGGING
	booster_pwm_disable();
     cd8:	0e 94 a8 03 	call	0x750	; 0x750 <booster_pwm_disable>
	SET(RELEASE);
     cdc:	db 9a       	sbi	0x1b, 3	; 27
	sreg = SREG;
     cde:	2f b7       	in	r18, 0x3f	; 63
	cli();
     ce0:	f8 94       	cli
	pending_us10 = kick_job.release_time;
     ce2:	80 91 32 02 	lds	r24, 0x0232
     ce6:	90 91 33 02 	lds	r25, 0x0233
     cea:	90 93 66 00 	sts	0x0066, r25
     cee:	80 93 65 00 	sts	0x0065, r24
	SREG=sreg;
     cf2:	2f bf       	out	0x3f, r18	; 63
	for(;;) {
		if((pending_us10 <= 0) && ((pending_us10 & 0xFF) == 0)) break; //double check for handling race condition
     cf4:	80 91 65 00 	lds	r24, 0x0065
     cf8:	90 91 66 00 	lds	r25, 0x0066
     cfc:	89 2b       	or	r24, r25
     cfe:	d1 f7       	brne	.-12     	; 0xcf4 <kicker_kick_handler+0xf2>
     d00:	80 91 65 00 	lds	r24, 0x0065
     d04:	90 91 66 00 	lds	r25, 0x0066
     d08:	81 11       	cpse	r24, r1
     d0a:	f4 cf       	rjmp	.-24     	; 0xcf4 <kicker_kick_handler+0xf2>
	}
	RESET(RELEASE);
     d0c:	db 98       	cbi	0x1b, 3	; 27
	OCR1A = 104;
     d0e:	88 e6       	ldi	r24, 0x68	; 104
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9b bd       	out	0x2b, r25	; 43
     d14:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 32;		
     d16:	80 e2       	ldi	r24, 0x20	; 32
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	99 bd       	out	0x29, r25	; 41
     d1c:	88 bd       	out	0x28, r24	; 40
	if (auto_boost)
     d1e:	80 91 62 00 	lds	r24, 0x0062
     d22:	81 11       	cpse	r24, r1
		booster_pwm_enable();
     d24:	0e 94 95 03 	call	0x72a	; 0x72a <booster_pwm_enable>

	// debug time between kicker message and release
	char out[30];
	uint32_t delta = timer_get_ms() - kick_job.timestamp;
     d28:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     d2c:	c0 90 2a 02 	lds	r12, 0x022A
     d30:	d0 90 2b 02 	lds	r13, 0x022B
     d34:	e0 90 2c 02 	lds	r14, 0x022C
     d38:	f0 90 2d 02 	lds	r15, 0x022D
     d3c:	6c 19       	sub	r22, r12
     d3e:	7d 09       	sbc	r23, r13
     d40:	8e 09       	sbc	r24, r14
     d42:	9f 09       	sbc	r25, r15
	if (delta > 65000)
     d44:	69 3e       	cpi	r22, 0xE9	; 233
     d46:	4d ef       	ldi	r20, 0xFD	; 253
     d48:	74 07       	cpc	r23, r20
     d4a:	81 05       	cpc	r24, r1
     d4c:	91 05       	cpc	r25, r1
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <kicker_kick_handler+0x154>
		delta = 0;
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	cb 01       	movw	r24, r22
	sprintf(out, "Kicktime: %u ms", (uint16_t)delta);
     d56:	7f 93       	push	r23
     d58:	6f 93       	push	r22
     d5a:	85 eb       	ldi	r24, 0xB5	; 181
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	8e 01       	movw	r16, r28
     d64:	0f 5f       	subi	r16, 0xFF	; 255
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	1f 93       	push	r17
     d6a:	0f 93       	push	r16
     d6c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <sprintf>
	debug(out);
     d70:	c8 01       	movw	r24, r16
     d72:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>

	// everything fine
	kick_job.timestamp = 0;
     d76:	10 92 2a 02 	sts	0x022A, r1
     d7a:	10 92 2b 02 	sts	0x022B, r1
     d7e:	10 92 2c 02 	sts	0x022C, r1
     d82:	10 92 2d 02 	sts	0x022D, r1
	kick_job.last_kick = timer_get_ms();
     d86:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
     d8a:	60 93 2e 02 	sts	0x022E, r22
     d8e:	70 93 2f 02 	sts	0x022F, r23
     d92:	80 93 30 02 	sts	0x0230, r24
     d96:	90 93 31 02 	sts	0x0231, r25

	return;
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
}
     da6:	6e 96       	adiw	r28, 0x1e	; 30
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	08 95       	ret

00000dc4 <kicker_task_handler>:

void kicker_task_handler(void) {
	kicker_kick_handler();
     dc4:	0c 94 01 06 	jmp	0xc02	; 0xc02 <kicker_kick_handler>

00000dc8 <toggle_status_led>:
// use AVCC as reference
#define ADCREF  (1 << REFS0)

void toggle_status_led(void) {
	
	PORTD ^= (1 << PD6);
     dc8:	82 b3       	in	r24, 0x12	; 18
     dca:	90 e4       	ldi	r25, 0x40	; 64
     dcc:	89 27       	eor	r24, r25
     dce:	82 bb       	out	0x12, r24	; 18
     dd0:	08 95       	ret

00000dd2 <read_adc>:

	uint8_t i;
	uint16_t res = 0;

	// wait for end of last (test-) conversion
	while (ADCSRA & (1 << ADSC));
     dd2:	36 99       	sbic	0x06, 6	; 6
     dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <read_adc>
     dd6:	47 e0       	ldi	r20, 0x07	; 7
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0

	// read channel
	for (i = 0; i < 7; i++) {
		ADCSRA |= (1 << ADSC);
     ddc:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1 << ADSC));
     dde:	36 99       	sbic	0x06, 6	; 6
     de0:	fe cf       	rjmp	.-4      	; 0xdde <read_adc+0xc>
		res += ADCW;
     de2:	24 b1       	in	r18, 0x04	; 4
     de4:	35 b1       	in	r19, 0x05	; 5
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	41 50       	subi	r20, 0x01	; 1

	// wait for end of last (test-) conversion
	while (ADCSRA & (1 << ADSC));

	// read channel
	for (i = 0; i < 7; i++) {
     dec:	b9 f7       	brne	.-18     	; 0xddc <read_adc+0xa>
		ADCSRA |= (1 << ADSC);
		while (ADCSRA & (1 << ADSC));
		res += ADCW;
	}
	res /= 7;
     dee:	67 e0       	ldi	r22, 0x07	; 7
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     df6:	cb 01       	movw	r24, r22

	return res;
}
     df8:	08 95       	ret

00000dfa <select_adc_channel>:

void select_adc_channel(uint8_t mux) {

	uint8_t last_channel, new_channel;

	last_channel = ADMUX;
     dfa:	97 b1       	in	r25, 0x07	; 7
	new_channel = ADCREF | mux;
     dfc:	80 64       	ori	r24, 0x40	; 64

	// change channel
	if (last_channel != new_channel) {
     dfe:	98 17       	cp	r25, r24
     e00:	11 f0       	breq	.+4      	; 0xe06 <select_adc_channel+0xc>
		ADMUX = new_channel;
     e02:	87 b9       	out	0x07, r24	; 7
		// start a test-conversion, but do not wait
		ADCSRA |= (1 << ADSC);
     e04:	36 9a       	sbi	0x06, 6	; 6
     e06:	08 95       	ret

00000e08 <ports_init>:
}

void ports_init(void) {

	// select adc multiplexer channel
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     e08:	87 e8       	ldi	r24, 0x87	; 135
     e0a:	86 b9       	out	0x06, r24	; 6
	ADMUX = ADCREF;
     e0c:	80 e4       	ldi	r24, 0x40	; 64
     e0e:	87 b9       	out	0x07, r24	; 7
	select_adc_channel(6);
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	0e 94 fd 06 	call	0xdfa	; 0xdfa <select_adc_channel>

	// Set green status led on 
	DDRD |= (1 << DDD6); 
     e16:	8e 9a       	sbi	0x11, 6	; 17
     e18:	08 95       	ret

00000e1a <get_capacitors_voltage>:

}

uint16_t get_capacitors_voltage(void) {
	
	select_adc_channel(6);
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <select_adc_channel>
	uint16_t ret = read_adc();
     e20:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <read_adc>

	//nase: uint16_t val = ret *0.4145; 
	//hairy:
	uint16_t val = ret * 0.4290;
     e24:	bc 01       	movw	r22, r24
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatunsisf>
     e2e:	23 ee       	ldi	r18, 0xE3	; 227
     e30:	35 ea       	ldi	r19, 0xA5	; 165
     e32:	4b ed       	ldi	r20, 0xDB	; 219
     e34:	5e e3       	ldi	r21, 0x3E	; 62
     e36:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__mulsf3>
     e3a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fixunssfsi>

	if( val < 50 )
     e3e:	62 33       	cpi	r22, 0x32	; 50
     e40:	71 05       	cpc	r23, r1
     e42:	18 f4       	brcc	.+6      	; 0xe4a <get_capacitors_voltage+0x30>
	{
		OCR1B = 5;
     e44:	25 e0       	ldi	r18, 0x05	; 5
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <get_capacitors_voltage+0x3a>
		OCR1A = 104;
	}
	else if( val < 70 )
     e4a:	66 34       	cpi	r22, 0x46	; 70
     e4c:	71 05       	cpc	r23, r1
     e4e:	38 f4       	brcc	.+14     	; 0xe5e <get_capacitors_voltage+0x44>
	{
		OCR1B = 20;
     e50:	24 e1       	ldi	r18, 0x14	; 20
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	39 bd       	out	0x29, r19	; 41
     e56:	28 bd       	out	0x28, r18	; 40
		OCR1A = 104;
     e58:	28 e6       	ldi	r18, 0x68	; 104
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	46 c0       	rjmp	.+140    	; 0xeea <get_capacitors_voltage+0xd0>
	}
	else if( val > 70 && val < 90 )
     e5e:	ab 01       	movw	r20, r22
     e60:	47 54       	subi	r20, 0x47	; 71
     e62:	51 09       	sbc	r21, r1
     e64:	43 31       	cpi	r20, 0x13	; 19
     e66:	51 05       	cpc	r21, r1
     e68:	18 f4       	brcc	.+6      	; 0xe70 <get_capacitors_voltage+0x56>
	{
		OCR1B = 52;
     e6a:	24 e3       	ldi	r18, 0x34	; 52
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f2 cf       	rjmp	.-28     	; 0xe54 <get_capacitors_voltage+0x3a>
		OCR1A = 104;
	}
	else if( val > 90 && val < 120 )
     e70:	ab 01       	movw	r20, r22
     e72:	4b 55       	subi	r20, 0x5B	; 91
     e74:	51 09       	sbc	r21, r1
     e76:	4d 31       	cpi	r20, 0x1D	; 29
     e78:	51 05       	cpc	r21, r1
     e7a:	38 f4       	brcc	.+14     	; 0xe8a <get_capacitors_voltage+0x70>
	{
		OCR1B = 52;
     e7c:	24 e3       	ldi	r18, 0x34	; 52
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	39 bd       	out	0x29, r19	; 41
     e82:	28 bd       	out	0x28, r18	; 40
		OCR1A = 100;
     e84:	24 e6       	ldi	r18, 0x64	; 100
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	30 c0       	rjmp	.+96     	; 0xeea <get_capacitors_voltage+0xd0>
	}
	else if( val > 120 && val < 160 )
     e8a:	ab 01       	movw	r20, r22
     e8c:	49 57       	subi	r20, 0x79	; 121
     e8e:	51 09       	sbc	r21, r1
     e90:	47 32       	cpi	r20, 0x27	; 39
     e92:	51 05       	cpc	r21, r1
     e94:	38 f4       	brcc	.+14     	; 0xea4 <get_capacitors_voltage+0x8a>
	{
		OCR1B = 52;
     e96:	24 e3       	ldi	r18, 0x34	; 52
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	39 bd       	out	0x29, r19	; 41
     e9c:	28 bd       	out	0x28, r18	; 40
		OCR1A = 96;
     e9e:	20 e6       	ldi	r18, 0x60	; 96
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	23 c0       	rjmp	.+70     	; 0xeea <get_capacitors_voltage+0xd0>
	}
	else if( val > 160 && val < 200 )
     ea4:	ab 01       	movw	r20, r22
     ea6:	41 5a       	subi	r20, 0xA1	; 161
     ea8:	51 09       	sbc	r21, r1
     eaa:	47 32       	cpi	r20, 0x27	; 39
     eac:	51 05       	cpc	r21, r1
     eae:	38 f4       	brcc	.+14     	; 0xebe <get_capacitors_voltage+0xa4>
	{
		OCR1B = 52;
     eb0:	24 e3       	ldi	r18, 0x34	; 52
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	39 bd       	out	0x29, r19	; 41
     eb6:	28 bd       	out	0x28, r18	; 40
		OCR1A = 92;
     eb8:	2c e5       	ldi	r18, 0x5C	; 92
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	16 c0       	rjmp	.+44     	; 0xeea <get_capacitors_voltage+0xd0>
	}
	else if( val > 200 && val < 240 )
     ebe:	ab 01       	movw	r20, r22
     ec0:	49 5c       	subi	r20, 0xC9	; 201
     ec2:	51 09       	sbc	r21, r1
     ec4:	47 32       	cpi	r20, 0x27	; 39
     ec6:	51 05       	cpc	r21, r1
     ec8:	38 f4       	brcc	.+14     	; 0xed8 <get_capacitors_voltage+0xbe>
	{
		OCR1B = 52;
     eca:	24 e3       	ldi	r18, 0x34	; 52
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	39 bd       	out	0x29, r19	; 41
     ed0:	28 bd       	out	0x28, r18	; 40
		OCR1A = 90;
     ed2:	2a e5       	ldi	r18, 0x5A	; 90
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <get_capacitors_voltage+0xd0>
	}
	else if( val > 240 )
     ed8:	61 3f       	cpi	r22, 0xF1	; 241
     eda:	71 05       	cpc	r23, r1
     edc:	40 f0       	brcs	.+16     	; 0xeee <get_capacitors_voltage+0xd4>
	{
		OCR1B = 52;
     ede:	24 e3       	ldi	r18, 0x34	; 52
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	39 bd       	out	0x29, r19	; 41
     ee4:	28 bd       	out	0x28, r18	; 40
		OCR1A = 88;
     ee6:	28 e5       	ldi	r18, 0x58	; 88
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3b bd       	out	0x2b, r19	; 43
     eec:	2a bd       	out	0x2a, r18	; 42
	}

	return val;
}
     eee:	cb 01       	movw	r24, r22
     ef0:	08 95       	ret

00000ef2 <get_supply_voltage>:

float get_supply_voltage(void) {
	
	select_adc_channel(1);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <select_adc_channel>
	uint16_t ret = read_adc();
     ef8:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <read_adc>

	return ret * 0.0394629;
     efc:	bc 01       	movw	r22, r24
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatunsisf>
     f06:	2a ed       	ldi	r18, 0xDA	; 218
     f08:	33 ea       	ldi	r19, 0xA3	; 163
     f0a:	41 e2       	ldi	r20, 0x21	; 33
     f0c:	5d e3       	ldi	r21, 0x3D	; 61
     f0e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__mulsf3>
}
     f12:	08 95       	ret

00000f14 <get_supply_raw_voltage>:

uint16_t get_supply_raw_voltage(void) {
	
	select_adc_channel(1);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 fd 06 	call	0xdfa	; 0xdfa <select_adc_channel>
	uint16_t ret = read_adc();
     f1a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <read_adc>

00000f1e <timer_incTimer>:
		}
	}
}
*/
void timer_incTimer(void) {
	ticks++;
     f1e:	80 91 36 02 	lds	r24, 0x0236
     f22:	90 91 37 02 	lds	r25, 0x0237
     f26:	a0 91 38 02 	lds	r26, 0x0238
     f2a:	b0 91 39 02 	lds	r27, 0x0239
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	a1 1d       	adc	r26, r1
     f32:	b1 1d       	adc	r27, r1
     f34:	80 93 36 02 	sts	0x0236, r24
     f38:	90 93 37 02 	sts	0x0237, r25
     f3c:	a0 93 38 02 	sts	0x0238, r26
     f40:	b0 93 39 02 	sts	0x0239, r27
     f44:	08 95       	ret

00000f46 <timer_init>:
}

/**
 * Initialize the timer.
 */
void timer_init(void) {
     f46:	08 95       	ret

00000f48 <timer_trigger_callbacks>:

	uint8_t i;
	uint8_t sreg;

	for (i = 0; i < MAX_CALLBACKS; i++) {
		if (notify & (1 << (i+1)) && tlist[i].func != NULL) {
     f48:	80 91 42 02 	lds	r24, 0x0242
     f4c:	81 ff       	sbrs	r24, 1
     f4e:	13 c0       	rjmp	.+38     	; 0xf76 <timer_trigger_callbacks+0x2e>
     f50:	80 91 3c 02 	lds	r24, 0x023C
     f54:	90 91 3d 02 	lds	r25, 0x023D
     f58:	89 2b       	or	r24, r25
     f5a:	69 f0       	breq	.+26     	; 0xf76 <timer_trigger_callbacks+0x2e>
			tlist[i].func();
     f5c:	e0 91 3c 02 	lds	r30, 0x023C
     f60:	f0 91 3d 02 	lds	r31, 0x023D
     f64:	09 95       	icall
			sreg = SREG;
     f66:	9f b7       	in	r25, 0x3f	; 63
			cli();
     f68:	f8 94       	cli
			notify &= ~(1 << (i+1));
     f6a:	80 91 42 02 	lds	r24, 0x0242
     f6e:	8d 7f       	andi	r24, 0xFD	; 253
     f70:	80 93 42 02 	sts	0x0242, r24
			SREG = sreg;
     f74:	9f bf       	out	0x3f, r25	; 63

	uint8_t i;
	uint8_t sreg;

	for (i = 0; i < MAX_CALLBACKS; i++) {
		if (notify & (1 << (i+1)) && tlist[i].func != NULL) {
     f76:	80 91 42 02 	lds	r24, 0x0242
     f7a:	82 ff       	sbrs	r24, 2
     f7c:	13 c0       	rjmp	.+38     	; 0xfa4 <timer_trigger_callbacks+0x5c>
     f7e:	80 91 40 02 	lds	r24, 0x0240
     f82:	90 91 41 02 	lds	r25, 0x0241
     f86:	89 2b       	or	r24, r25
     f88:	69 f0       	breq	.+26     	; 0xfa4 <timer_trigger_callbacks+0x5c>
			tlist[i].func();
     f8a:	e0 91 40 02 	lds	r30, 0x0240
     f8e:	f0 91 41 02 	lds	r31, 0x0241
     f92:	09 95       	icall
			sreg = SREG;
     f94:	9f b7       	in	r25, 0x3f	; 63
			cli();
     f96:	f8 94       	cli
			notify &= ~(1 << (i+1));
     f98:	80 91 42 02 	lds	r24, 0x0242
     f9c:	8b 7f       	andi	r24, 0xFB	; 251
     f9e:	80 93 42 02 	sts	0x0242, r24
			SREG = sreg;
     fa2:	9f bf       	out	0x3f, r25	; 63
     fa4:	08 95       	ret

00000fa6 <timer_register>:
 * @param time_ms The period in which the callback function should be triggered.
 *                The time has to be in range ITERATION_TIME <= x <= 255*ITERATION_TIME
 * @return Yields EXIT_SUCCESS if the function could be registered. Otherwise
 *                EXIT_FAILURE.
 */
uint8_t timer_register(void (*fptr)(void), uint16_t time_ms) {
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	8c 01       	movw	r16, r24

	uint8_t i;
	uint8_t cycles;

	if (time_ms < TIMER_RES || time_ms > 255*TIMER_RES) {
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatunsisf>
     fc0:	6b 01       	movw	r12, r22
     fc2:	7c 01       	movw	r14, r24
     fc4:	2f e6       	ldi	r18, 0x6F	; 111
     fc6:	32 e1       	ldi	r19, 0x12	; 18
     fc8:	43 e8       	ldi	r20, 0x83	; 131
     fca:	50 e4       	ldi	r21, 0x40	; 64
     fcc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__cmpsf2>
     fd0:	87 fd       	sbrc	r24, 7
     fd2:	31 c0       	rjmp	.+98     	; 0x1036 <timer_register+0x90>
     fd4:	2d e5       	ldi	r18, 0x5D	; 93
     fd6:	3f e8       	ldi	r19, 0x8F	; 143
     fd8:	42 e8       	ldi	r20, 0x82	; 130
     fda:	54 e4       	ldi	r21, 0x44	; 68
     fdc:	c7 01       	movw	r24, r14
     fde:	b6 01       	movw	r22, r12
     fe0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__gesf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	3c f1       	brlt	.+78     	; 0x1036 <timer_register+0x90>
		return EXIT_FAILURE;
	}
	cycles = (uint8_t)(time_ms/TIMER_RES);

	for (i = 0; i < MAX_CALLBACKS; i++) {
		if (tlist[i].func == NULL) {
     fe8:	80 91 3c 02 	lds	r24, 0x023C
     fec:	90 91 3d 02 	lds	r25, 0x023D
     ff0:	89 2b       	or	r24, r25
     ff2:	49 f0       	breq	.+18     	; 0x1006 <timer_register+0x60>
     ff4:	80 91 40 02 	lds	r24, 0x0240
     ff8:	90 91 41 02 	lds	r25, 0x0241
     ffc:	89 2b       	or	r24, r25
     ffe:	d9 f4       	brne	.+54     	; 0x1036 <timer_register+0x90>
    1000:	c1 e0       	ldi	r28, 0x01	; 1
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <timer_register+0x64>
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t cycles;

	if (time_ms < TIMER_RES || time_ms > 255*TIMER_RES) {
		return EXIT_FAILURE;
	}
	cycles = (uint8_t)(time_ms/TIMER_RES);
    100a:	2f e6       	ldi	r18, 0x6F	; 111
    100c:	32 e1       	ldi	r19, 0x12	; 18
    100e:	43 e8       	ldi	r20, 0x83	; 131
    1010:	50 e4       	ldi	r21, 0x40	; 64
    1012:	c7 01       	movw	r24, r14
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__divsf3>
    101a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fixunssfsi>

	for (i = 0; i < MAX_CALLBACKS; i++) {
		if (tlist[i].func == NULL) {
			tlist[i].func = fptr;
    101e:	cc 0f       	add	r28, r28
    1020:	dd 1f       	adc	r29, r29
    1022:	cc 0f       	add	r28, r28
    1024:	dd 1f       	adc	r29, r29
    1026:	c6 5c       	subi	r28, 0xC6	; 198
    1028:	dd 4f       	sbci	r29, 0xFD	; 253
    102a:	1b 83       	std	Y+3, r17	; 0x03
    102c:	0a 83       	std	Y+2, r16	; 0x02
			tlist[i].counter = cycles;
    102e:	69 83       	std	Y+1, r22	; 0x01
			tlist[i].cycles = cycles; // this at the end
    1030:	68 83       	st	Y, r22
			return EXIT_SUCCESS;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <timer_register+0x92>

	uint8_t i;
	uint8_t cycles;

	if (time_ms < TIMER_RES || time_ms > 255*TIMER_RES) {
		return EXIT_FAILURE;
    1036:	81 e0       	ldi	r24, 0x01	; 1
			return EXIT_SUCCESS;
		}
	}

	return EXIT_FAILURE;
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	08 95       	ret

0000104a <timer_deregister>:
uint8_t timer_deregister(void (*fptr)(void)) {

	uint8_t i, sreg;

	for (i = 0; i < MAX_CALLBACKS; i++) {
		if (tlist[i].func == fptr) {
    104a:	20 91 3c 02 	lds	r18, 0x023C
    104e:	30 91 3d 02 	lds	r19, 0x023D
    1052:	28 17       	cp	r18, r24
    1054:	39 07       	cpc	r19, r25
    1056:	51 f0       	breq	.+20     	; 0x106c <timer_deregister+0x22>
    1058:	20 91 40 02 	lds	r18, 0x0240
    105c:	30 91 41 02 	lds	r19, 0x0241
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	29 f5       	brne	.+74     	; 0x10b0 <timer_deregister+0x66>
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <timer_deregister+0x26>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
			tlist[i].cycles = 0;
    1070:	fc 01       	movw	r30, r24
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	e6 5c       	subi	r30, 0xC6	; 198
    107c:	fd 4f       	sbci	r31, 0xFD	; 253
    107e:	10 82       	st	Z, r1
			tlist[i].counter = 0;
    1080:	11 82       	std	Z+1, r1	; 0x01
			tlist[i].func = NULL;
    1082:	13 82       	std	Z+3, r1	; 0x03
    1084:	12 82       	std	Z+2, r1	; 0x02
			sreg = SREG;
    1086:	4f b7       	in	r20, 0x3f	; 63
			cli();
    1088:	f8 94       	cli
			notify &= ~(1 << (i+1));
    108a:	50 91 42 02 	lds	r21, 0x0242
    108e:	9c 01       	movw	r18, r24
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	01 c0       	rjmp	.+2      	; 0x109e <timer_deregister+0x54>
    109c:	88 0f       	add	r24, r24
    109e:	0a 94       	dec	r0
    10a0:	ea f7       	brpl	.-6      	; 0x109c <timer_deregister+0x52>
    10a2:	80 95       	com	r24
    10a4:	85 23       	and	r24, r21
    10a6:	80 93 42 02 	sts	0x0242, r24
			SREG = sreg;
    10aa:	4f bf       	out	0x3f, r20	; 63
			return EXIT_SUCCESS;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	08 95       	ret
		}
	}

	return EXIT_FAILURE;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
}
    10b2:	08 95       	ret

000010b4 <timer_get_ticks>:
 *
 * @returns The timestamp
 */
uint32_t timer_get_ticks(void) {
	
	uint8_t sreg = SREG;
    10b4:	2f b7       	in	r18, 0x3f	; 63
	uint32_t ret = 0;

	cli();
    10b6:	f8 94       	cli
	ret = ticks;
    10b8:	60 91 36 02 	lds	r22, 0x0236
    10bc:	70 91 37 02 	lds	r23, 0x0237
    10c0:	80 91 38 02 	lds	r24, 0x0238
    10c4:	90 91 39 02 	lds	r25, 0x0239
	SREG = sreg;
    10c8:	2f bf       	out	0x3f, r18	; 63

	return ret;
}
    10ca:	08 95       	ret

000010cc <timer_get_ms>:
 *
 * @returns The time in ms.
 */
uint32_t timer_get_ms(void) {

	return timer_get_ticks();//TIMER_RES ;
    10cc:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <timer_get_ticks>

000010d0 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    10d0:	1f 92       	push	r1
    10d2:	0f 92       	push	r0
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	0f 92       	push	r0
    10d8:	11 24       	eor	r1, r1
    10da:	2f 93       	push	r18
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    10e4:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
    10e6:	9c b1       	in	r25, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
    10e8:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    10ea:	e0 91 45 02 	lds	r30, 0x0245
    10ee:	ef 5f       	subi	r30, 0xFF	; 255
    10f0:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    10f2:	20 91 44 02 	lds	r18, 0x0244
    10f6:	e2 17       	cp	r30, r18
    10f8:	39 f0       	breq	.+14     	; 0x1108 <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    10fa:	e0 93 45 02 	sts	0x0245, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	e8 5b       	subi	r30, 0xB8	; 184
    1102:	fd 4f       	sbci	r31, 0xFD	; 253
    1104:	90 83       	st	Z, r25
    1106:	01 c0       	rjmp	.+2      	; 0x110a <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1108:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    110a:	80 93 43 02 	sts	0x0243, r24
}
    110e:	ff 91       	pop	r31
    1110:	ef 91       	pop	r30
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	2f 91       	pop	r18
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1134:	90 91 47 02 	lds	r25, 0x0247
    1138:	80 91 46 02 	lds	r24, 0x0246
    113c:	98 17       	cp	r25, r24
    113e:	61 f0       	breq	.+24     	; 0x1158 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1140:	e0 91 46 02 	lds	r30, 0x0246
    1144:	ef 5f       	subi	r30, 0xFF	; 255
    1146:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1148:	e0 93 46 02 	sts	0x0246, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	e8 59       	subi	r30, 0x98	; 152
    1150:	fd 4f       	sbci	r31, 0xFD	; 253
    1152:	80 81       	ld	r24, Z
    1154:	8c b9       	out	0x0c, r24	; 12
    1156:	01 c0       	rjmp	.+2      	; 0x115a <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1158:	55 98       	cbi	0x0a, 5	; 10
    }
}
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    116c:	10 92 47 02 	sts	0x0247, r1
    UART_TxTail = 0;
    1170:	10 92 46 02 	sts	0x0246, r1
    UART_RxHead = 0;
    1174:	10 92 45 02 	sts	0x0245, r1
    UART_RxTail = 0;
    1178:	10 92 44 02 	sts	0x0244, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
    117c:	97 ff       	sbrs	r25, 7
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
    1180:	22 e0       	ldi	r18, 0x02	; 2
    1182:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
    1184:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
    1186:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
    1188:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
    118a:	88 e9       	ldi	r24, 0x98	; 152
    118c:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    118e:	86 e8       	ldi	r24, 0x86	; 134
    1190:	80 bd       	out	0x20, r24	; 32
    1192:	08 95       	ret

00001194 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1194:	90 91 45 02 	lds	r25, 0x0245
    1198:	80 91 44 02 	lds	r24, 0x0244
    119c:	98 17       	cp	r25, r24
    119e:	91 f0       	breq	.+36     	; 0x11c4 <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    11a0:	e0 91 44 02 	lds	r30, 0x0244
    11a4:	ef 5f       	subi	r30, 0xFF	; 255
    11a6:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
    11a8:	e0 93 44 02 	sts	0x0244, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	e8 5b       	subi	r30, 0xB8	; 184
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
    11b4:	80 91 43 02 	lds	r24, 0x0243
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	98 2f       	mov	r25, r24
    11bc:	88 27       	eor	r24, r24
    11be:	82 0f       	add	r24, r18
    11c0:	91 1d       	adc	r25, r1
    11c2:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
    11c8:	08 95       	ret

000011ca <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    11ca:	90 91 47 02 	lds	r25, 0x0247
    11ce:	9f 5f       	subi	r25, 0xFF	; 255
    11d0:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    11d2:	20 91 46 02 	lds	r18, 0x0246
    11d6:	92 17       	cp	r25, r18
    11d8:	e1 f3       	breq	.-8      	; 0x11d2 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    11da:	e9 2f       	mov	r30, r25
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	e8 59       	subi	r30, 0x98	; 152
    11e0:	fd 4f       	sbci	r31, 0xFD	; 253
    11e2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    11e4:	90 93 47 02 	sts	0x0247, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    11e8:	55 9a       	sbi	0x0a, 5	; 10
    11ea:	08 95       	ret

000011ec <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    while (*s) 
    11f2:	89 91       	ld	r24, Y+
    11f4:	88 23       	and	r24, r24
    11f6:	19 f0       	breq	.+6      	; 0x11fe <uart_puts+0x12>
      uart_putc(*s++);
    11f8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uart_putc>
    11fc:	fa cf       	rjmp	.-12     	; 0x11f2 <uart_puts+0x6>

}/* uart_puts */
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    120a:	84 91       	lpm	r24, Z
    120c:	ef 01       	movw	r28, r30
    120e:	21 96       	adiw	r28, 0x01	; 1
    1210:	88 23       	and	r24, r24
    1212:	21 f0       	breq	.+8      	; 0x121c <uart_puts_p+0x18>
      uart_putc(c);
    1214:	0e 94 e5 08 	call	0x11ca	; 0x11ca <uart_putc>
    1218:	fe 01       	movw	r30, r28
    121a:	f7 cf       	rjmp	.-18     	; 0x120a <uart_puts_p+0x6>

}/* uart_puts_p */
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
    1222:	80 91 45 02 	lds	r24, 0x0245
    1226:	20 91 44 02 	lds	r18, 0x0244
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	4f 96       	adiw	r24, 0x1f	; 31
    122e:	82 1b       	sub	r24, r18
    1230:	91 09       	sbc	r25, r1
    1232:	6f e1       	ldi	r22, 0x1F	; 31
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__divmodhi4>
}/* uart_available */
    123a:	08 95       	ret

0000123c <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
    123c:	80 91 44 02 	lds	r24, 0x0244
    1240:	80 93 45 02 	sts	0x0245, r24
    1244:	08 95       	ret

00001246 <can_init>:
/**
 * Initialize the can controller
 */
void can_init(void) {

	mcp2515_init();
    1246:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <mcp2515_init>

	mcp2515_static_filter(can_filter);
    124a:	84 e8       	ldi	r24, 0x84	; 132
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 1a 03 	call	0x634	; 0x634 <mcp2515_static_filter>
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2) | (1<<REQOP1) | (1<<REQOP0), 0);
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	60 ee       	ldi	r22, 0xE0	; 224
    1256:	8f e0       	ldi	r24, 0x0F	; 15
    1258:	0c 94 ba 00 	jmp	0x174	; 0x174 <mcp2515_bit_modify>

0000125c <can_test>:
/**
 * Runs a test on the can_controller
 *
 * Generates 20 messages where the id is incremented with each message.
 */
void can_test(void) {
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	61 97       	sbiw	r28, 0x11	; 17
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61

	tExtendedCAN message;
	uint8_t i;
	
	// 0x00, priority, sender, receiver
	uint8_t id[4] = {0x00, PRIORITY_NORM, REKICK_ID, ETH2CAN_ID};
    1272:	1e 86       	std	Y+14, r1	; 0x0e
    1274:	80 e4       	ldi	r24, 0x40	; 64
    1276:	8f 87       	std	Y+15, r24	; 0x0f
    1278:	80 e6       	ldi	r24, 0x60	; 96
    127a:	88 8b       	std	Y+16, r24	; 0x10

	message.header.length = 1;
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	81 7e       	andi	r24, 0xE1	; 225
    1280:	82 60       	ori	r24, 0x02	; 2
    1282:	8d 83       	std	Y+5, r24	; 0x05

	for (i = 0; i < 20; i++) {
    1284:	10 e0       	ldi	r17, 0x00	; 0
		
		id[3] = i;
    1286:	19 8b       	std	Y+17, r17	; 0x11
		generate_extCAN_ID(id, message.id);
    1288:	be 01       	movw	r22, r28
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	ce 01       	movw	r24, r28
    1290:	0e 96       	adiw	r24, 0x0e	; 14
    1292:	0e 94 88 02 	call	0x510	; 0x510 <generate_extCAN_ID>
		message.data[0] = i;
    1296:	1e 83       	std	Y+6, r17	; 0x06
		message.header.rtr = 0;
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	8e 7f       	andi	r24, 0xFE	; 254
    129c:	8d 83       	std	Y+5, r24	; 0x05

		while(mcp2515_send_extmessage(&message) == 0);
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_send_extmessage>
    12a6:	88 23       	and	r24, r24
    12a8:	d1 f3       	breq	.-12     	; 0x129e <can_test+0x42>
	// 0x00, priority, sender, receiver
	uint8_t id[4] = {0x00, PRIORITY_NORM, REKICK_ID, ETH2CAN_ID};

	message.header.length = 1;

	for (i = 0; i < 20; i++) {
    12aa:	1f 5f       	subi	r17, 0xFF	; 255
    12ac:	14 31       	cpi	r17, 0x14	; 20
    12ae:	59 f7       	brne	.-42     	; 0x1286 <can_test+0x2a>

		while(mcp2515_send_extmessage(&message) == 0);
	}

	return;
}
    12b0:	61 96       	adiw	r28, 0x11	; 17
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	08 95       	ret

000012c4 <can_receive_handler>:

/**
 * Recieve CAN Messages
 */
void can_receive_handler(void) {
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	2d 97       	sbiw	r28, 0x0d	; 13
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61

	tExtendedCAN reply;

	if (mcp2515_check_message()) {
    12d8:	0e 94 28 01 	call	0x250	; 0x250 <mcp2515_check_message>
    12dc:	88 23       	and	r24, r24
    12de:	71 f0       	breq	.+28     	; 0x12fc <can_receive_handler+0x38>
		mcp2515_get_extmessage(&reply);
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_get_extmessage>
		// soft-CAN_ID-filter
		if (reply.id[3] == REKICK_ID) {
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	80 36       	cpi	r24, 0x60	; 96
    12ec:	39 f4       	brne	.+14     	; 0x12fc <can_receive_handler+0x38>
			parse_data(&reply);
    12ee:	e0 91 69 00 	lds	r30, 0x0069
    12f2:	f0 91 6a 00 	lds	r31, 0x006A
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	09 95       	icall
		}

	}
}
    12fc:	2d 96       	adiw	r28, 0x0d	; 13
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <can_send_handler>:
 *
 * This handler send messages which are stored in the buffer.
 *
 * \see \ref can_buffer
 */
void can_send_handler(void) {
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17

	static uint32_t last_send = 0; // ms

	if (can_buffer_head == can_buffer_tail)
    1312:	90 91 8a 02 	lds	r25, 0x028A
    1316:	80 91 89 02 	lds	r24, 0x0289
    131a:	98 17       	cp	r25, r24
    131c:	99 f1       	breq	.+102    	; 0x1384 <can_send_handler+0x76>
		return;

	
	if (timer_get_ms() - last_send < SEND_DELAY)
    131e:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
    1322:	00 91 8b 02 	lds	r16, 0x028B
    1326:	10 91 8c 02 	lds	r17, 0x028C
    132a:	20 91 8d 02 	lds	r18, 0x028D
    132e:	30 91 8e 02 	lds	r19, 0x028E
    1332:	60 1b       	sub	r22, r16
    1334:	71 0b       	sbc	r23, r17
    1336:	82 0b       	sbc	r24, r18
    1338:	93 0b       	sbc	r25, r19
    133a:	6a 30       	cpi	r22, 0x0A	; 10
    133c:	71 05       	cpc	r23, r1
    133e:	81 05       	cpc	r24, r1
    1340:	91 05       	cpc	r25, r1
    1342:	00 f1       	brcs	.+64     	; 0x1384 <can_send_handler+0x76>
		return;
	

	if (mcp2515_send_extmessage(&can_buffer[can_buffer_tail]) != 0) {
    1344:	80 91 89 02 	lds	r24, 0x0289
    1348:	2d e0       	ldi	r18, 0x0D	; 13
    134a:	82 9f       	mul	r24, r18
    134c:	c0 01       	movw	r24, r0
    134e:	11 24       	eor	r1, r1
    1350:	81 57       	subi	r24, 0x71	; 113
    1352:	9d 4f       	sbci	r25, 0xFD	; 253
    1354:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_send_extmessage>
    1358:	88 23       	and	r24, r24
    135a:	a1 f0       	breq	.+40     	; 0x1384 <can_send_handler+0x76>
		if (++can_buffer_tail == CAN_MSG_BUFFER_LENGTH)
    135c:	80 91 89 02 	lds	r24, 0x0289
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	8e 31       	cpi	r24, 0x1E	; 30
    1364:	19 f0       	breq	.+6      	; 0x136c <can_send_handler+0x5e>
    1366:	80 93 89 02 	sts	0x0289, r24
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <can_send_handler+0x62>
			can_buffer_tail = 0;
    136c:	10 92 89 02 	sts	0x0289, r1
		last_send = timer_get_ms();
    1370:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
    1374:	60 93 8b 02 	sts	0x028B, r22
    1378:	70 93 8c 02 	sts	0x028C, r23
    137c:	80 93 8d 02 	sts	0x028D, r24
    1380:	90 93 8e 02 	sts	0x028E, r25
	}

}
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <can_send_message>:
 * \param msg The message structure to send
 */
void can_send_message(tExtendedCAN *msg) {

	// copy data
	memcpy(&can_buffer[can_buffer_head], msg, sizeof(tExtendedCAN));
    138a:	20 91 8a 02 	lds	r18, 0x028A
    138e:	3d e0       	ldi	r19, 0x0D	; 13
    1390:	32 9f       	mul	r19, r18
    1392:	d0 01       	movw	r26, r0
    1394:	11 24       	eor	r1, r1
    1396:	a1 57       	subi	r26, 0x71	; 113
    1398:	bd 4f       	sbci	r27, 0xFD	; 253
    139a:	fc 01       	movw	r30, r24
    139c:	01 90       	ld	r0, Z+
    139e:	0d 92       	st	X+, r0
    13a0:	3a 95       	dec	r19
    13a2:	e1 f7       	brne	.-8      	; 0x139c <can_send_message+0x12>

	if (++can_buffer_head == CAN_MSG_BUFFER_LENGTH)
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	2e 31       	cpi	r18, 0x1E	; 30
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <can_send_message+0x26>
    13aa:	20 93 8a 02 	sts	0x028A, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <can_send_message+0x2a>
		can_buffer_head = 0;
    13b0:	10 92 8a 02 	sts	0x028A, r1

	// check for buffer overflow.
	if (can_buffer_head == can_buffer_tail) {
    13b4:	80 91 8a 02 	lds	r24, 0x028A
    13b8:	90 91 89 02 	lds	r25, 0x0289
    13bc:	89 13       	cpse	r24, r25
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <can_send_message+0x44>
		// overwrite existing data
		if (++can_buffer_tail == CAN_MSG_BUFFER_LENGTH)
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	80 93 89 02 	sts	0x0289, r24
    13c6:	8e 31       	cpi	r24, 0x1E	; 30
    13c8:	11 f4       	brne	.+4      	; 0x13ce <can_send_message+0x44>
			can_buffer_tail = 0;
    13ca:	10 92 89 02 	sts	0x0289, r1
    13ce:	08 95       	ret

000013d0 <can_send_message2>:
}

/**
 * Send data without buffer
 */
void can_send_message2(tExtendedCAN *message) {
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24

	uint32_t send_ms = timer_get_ms();
    13de:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24

	while (mcp2515_send_extmessage(message) == 0) {
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 aa 02 	call	0x554	; 0x554 <mcp2515_send_extmessage>
    13ec:	81 11       	cpse	r24, r1
    13ee:	0b c0       	rjmp	.+22     	; 0x1406 <can_send_message2+0x36>
		if ((timer_get_ticks() - send_ms) > 10)
    13f0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <timer_get_ticks>
    13f4:	6c 19       	sub	r22, r12
    13f6:	7d 09       	sbc	r23, r13
    13f8:	8e 09       	sbc	r24, r14
    13fa:	9f 09       	sbc	r25, r15
    13fc:	6b 30       	cpi	r22, 0x0B	; 11
    13fe:	71 05       	cpc	r23, r1
    1400:	81 05       	cpc	r24, r1
    1402:	91 05       	cpc	r25, r1
    1404:	80 f3       	brcs	.-32     	; 0x13e6 <can_send_message2+0x16>
			return;
	}
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	08 95       	ret

00001414 <can_put_cmd>:
 *
 * \param cmd The ReKick command
 * \param str A char array which holds the message.
 * \param len The length of the message
 */
void can_put_cmd(uint8_t cmd, uint8_t* str, uint8_t len) {
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	62 97       	sbiw	r28, 0x12	; 18
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	f8 2e       	mov	r15, r24
    1430:	8b 01       	movw	r16, r22

	tExtendedCAN message;

	// 0x00, priority, sender, receiver
	uint8_t id[4] = {0x00, PRIORITY_NORM, REKICK_ID, ETH2CAN_ID};
    1432:	1e 86       	std	Y+14, r1	; 0x0e
    1434:	80 e4       	ldi	r24, 0x40	; 64
    1436:	8f 87       	std	Y+15, r24	; 0x0f
    1438:	80 e6       	ldi	r24, 0x60	; 96
    143a:	88 8b       	std	Y+16, r24	; 0x10
    143c:	19 8a       	std	Y+17, r1	; 0x11
	generate_extCAN_ID(id, message.id);
    143e:	be 01       	movw	r22, r28
    1440:	6f 5f       	subi	r22, 0xFF	; 255
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	ce 01       	movw	r24, r28
    1446:	0e 96       	adiw	r24, 0x0e	; 14
    1448:	4a 8b       	std	Y+18, r20	; 0x12
    144a:	0e 94 88 02 	call	0x510	; 0x510 <generate_extCAN_ID>
	message.header.rtr = 0;
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	9e 7f       	andi	r25, 0xFE	; 254
    1452:	9d 83       	std	Y+5, r25	; 0x05
    1454:	4a 89       	ldd	r20, Y+18	; 0x12
    1456:	24 2f       	mov	r18, r20
    1458:	48 30       	cpi	r20, 0x08	; 8
    145a:	08 f0       	brcs	.+2      	; 0x145e <can_put_cmd+0x4a>
    145c:	27 e0       	ldi	r18, 0x07	; 7
	// packet length is limited to 8 chars but one char
	// is already used for the cmd.
	if (len > 7)
		len = 7;

	message.data[0] = cmd;
    145e:	fe 82       	std	Y+6, r15	; 0x06
	memcpy(message.data+1, str, len);
    1460:	42 2f       	mov	r20, r18
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	b8 01       	movw	r22, r16
    1466:	ce 01       	movw	r24, r28
    1468:	07 96       	adiw	r24, 0x07	; 7
    146a:	2a 8b       	std	Y+18, r18	; 0x12
    146c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <memcpy>
	message.header.length = len+1;
    1470:	2a 89       	ldd	r18, Y+18	; 0x12
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	42 0f       	add	r20, r18
    1476:	4f 70       	andi	r20, 0x0F	; 15
    1478:	44 0f       	add	r20, r20
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	81 7e       	andi	r24, 0xE1	; 225
    147e:	84 2b       	or	r24, r20
    1480:	8d 83       	std	Y+5, r24	; 0x05

	// send to buffer
	can_send_message(&message);
    1482:	ce 01       	movw	r24, r28
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	0e 94 c5 09 	call	0x138a	; 0x138a <can_send_message>


	return;
}
    148a:	62 96       	adiw	r28, 0x12	; 18
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	08 95       	ret

000014a2 <split_message>:
 * Splits the message therfor it fits into 8 bytes (limit of CAN data)
 *
 * \param cmd The ReKick command
 * \param A NULL terminated string
 */
void split_message(uint8_t cmd, char *str) {
    14a2:	bf 92       	push	r11
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	c8 2e       	mov	r12, r24
    14b6:	8b 01       	movw	r16, r22

	uint8_t len = strlen(str);
    14b8:	eb 01       	movw	r28, r22
    14ba:	09 90       	ld	r0, Y+
    14bc:	00 20       	and	r0, r0
    14be:	e9 f7       	brne	.-6      	; 0x14ba <split_message+0x18>
    14c0:	21 97       	sbiw	r28, 0x01	; 1
    14c2:	c6 1b       	sub	r28, r22
    14c4:	d7 0b       	sbc	r29, r23
    14c6:	bc 2e       	mov	r11, r28
	uint8_t i;

	for (i = 0; i < len;) {
    14c8:	d1 2c       	mov	r13, r1
    14ca:	7e 01       	movw	r14, r28
    14cc:	ff 24       	eor	r15, r15
    14ce:	db 14       	cp	r13, r11
    14d0:	a0 f4       	brcc	.+40     	; 0x14fa <split_message+0x58>
		if (len-i > 7) {
    14d2:	6d 2d       	mov	r22, r13
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	97 01       	movw	r18, r14
    14d8:	26 1b       	sub	r18, r22
    14da:	37 0b       	sbc	r19, r23
    14dc:	60 0f       	add	r22, r16
    14de:	71 1f       	adc	r23, r17
    14e0:	28 30       	cpi	r18, 0x08	; 8
    14e2:	31 05       	cpc	r19, r1
    14e4:	14 f0       	brlt	.+4      	; 0x14ea <split_message+0x48>
			can_put_cmd(cmd, ((uint8_t*)str) + i, 7);
    14e6:	47 e0       	ldi	r20, 0x07	; 7
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <split_message+0x4c>
    14ea:	4c 2f       	mov	r20, r28
    14ec:	4d 19       	sub	r20, r13
		}
		else {
			can_put_cmd(cmd, ((uint8_t*)str) + i, len-i);
    14ee:	8c 2d       	mov	r24, r12
    14f0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <can_put_cmd>
		}

		i += 7;
    14f4:	87 e0       	ldi	r24, 0x07	; 7
    14f6:	d8 0e       	add	r13, r24
    14f8:	ea cf       	rjmp	.-44     	; 0x14ce <split_message+0x2c>
	}

	return;
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	08 95       	ret

0000150e <debug>:
 * \see \ref warning
 * \see \ref error
 *
 * \param str A NULL terminated string
 */
void debug(char *str) {
    150e:	cf 92       	push	r12
    1510:	df 92       	push	r13
    1512:	ef 92       	push	r14
    1514:	ff 92       	push	r15
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	bc 01       	movw	r22, r24
	else {
		split_message(CMD_MSG, str);
	}

	return;
}
    1524:	cd b6       	in	r12, 0x3d	; 61
    1526:	de b6       	in	r13, 0x3e	; 62
 *
 * \param str A NULL terminated string
 */
void debug(char *str) {

	uint8_t len = strlen(str);
    1528:	fc 01       	movw	r30, r24
    152a:	01 90       	ld	r0, Z+
    152c:	00 20       	and	r0, r0
    152e:	e9 f7       	brne	.-6      	; 0x152a <debug+0x1c>
    1530:	8f 01       	movw	r16, r30
    1532:	01 50       	subi	r16, 0x01	; 1
    1534:	11 09       	sbc	r17, r1
    1536:	08 1b       	sub	r16, r24
    1538:	19 0b       	sbc	r17, r25

	if (str[len-1] != '\n') {
    153a:	11 27       	eor	r17, r17
    153c:	fc 01       	movw	r30, r24
    153e:	e0 0f       	add	r30, r16
    1540:	f1 1f       	adc	r31, r17
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	80 81       	ld	r24, Z
    1546:	8a 30       	cpi	r24, 0x0A	; 10
    1548:	51 f1       	breq	.+84     	; 0x159e <debug+0x90>
		char newstr[len+2];
    154a:	c8 01       	movw	r24, r16
    154c:	02 96       	adiw	r24, 0x02	; 2
    154e:	2d b7       	in	r18, 0x3d	; 61
    1550:	3e b7       	in	r19, 0x3e	; 62
    1552:	28 1b       	sub	r18, r24
    1554:	39 0b       	sbc	r19, r25
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	3e bf       	out	0x3e, r19	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	2d bf       	out	0x3d, r18	; 61
    1560:	8d b7       	in	r24, 0x3d	; 61
    1562:	9e b7       	in	r25, 0x3e	; 62
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	7c 01       	movw	r14, r24
		memcpy(newstr, str, len);
    1568:	a8 01       	movw	r20, r16
    156a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <memcpy>
		newstr[len] = '\n';
    156e:	f7 01       	movw	r30, r14
    1570:	e0 0f       	add	r30, r16
    1572:	f1 1f       	adc	r31, r17
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	80 83       	st	Z, r24
		newstr[len+1] = 0x00;
    1578:	11 82       	std	Z+1, r1	; 0x01
		split_message(CMD_MSG, newstr);
    157a:	b7 01       	movw	r22, r14
    157c:	8e e3       	ldi	r24, 0x3E	; 62
    157e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <split_message>
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de be       	out	0x3e, r13	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd be       	out	0x3d, r12	; 61
	else {
		split_message(CMD_MSG, str);
	}

	return;
}
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	08 95       	ret
		newstr[len] = '\n';
		newstr[len+1] = 0x00;
		split_message(CMD_MSG, newstr);
	}
	else {
		split_message(CMD_MSG, str);
    159e:	8e e3       	ldi	r24, 0x3E	; 62
	}

	return;
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
		newstr[len] = '\n';
		newstr[len+1] = 0x00;
		split_message(CMD_MSG, newstr);
	}
	else {
		split_message(CMD_MSG, str);
    15b0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <split_message>

000015b4 <warning>:
 * \see \ref debug
 * \see \ref error
 *
 * \param str A NULL terminated string
 */
void warning(char *str) {
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	bc 01       	movw	r22, r24
	else {
		split_message(CMD_WARNING, str);
	}

	return;
}
    15ca:	cd b6       	in	r12, 0x3d	; 61
    15cc:	de b6       	in	r13, 0x3e	; 62
 *
 * \param str A NULL terminated string
 */
void warning(char *str) {

	uint8_t len = strlen(str);
    15ce:	fc 01       	movw	r30, r24
    15d0:	01 90       	ld	r0, Z+
    15d2:	00 20       	and	r0, r0
    15d4:	e9 f7       	brne	.-6      	; 0x15d0 <warning+0x1c>
    15d6:	8f 01       	movw	r16, r30
    15d8:	01 50       	subi	r16, 0x01	; 1
    15da:	11 09       	sbc	r17, r1
    15dc:	08 1b       	sub	r16, r24
    15de:	19 0b       	sbc	r17, r25

	if (str[len-1] != '\n') {
    15e0:	11 27       	eor	r17, r17
    15e2:	fc 01       	movw	r30, r24
    15e4:	e0 0f       	add	r30, r16
    15e6:	f1 1f       	adc	r31, r17
    15e8:	31 97       	sbiw	r30, 0x01	; 1
    15ea:	80 81       	ld	r24, Z
    15ec:	8a 30       	cpi	r24, 0x0A	; 10
    15ee:	51 f1       	breq	.+84     	; 0x1644 <warning+0x90>
		char newstr[len+2];
    15f0:	c8 01       	movw	r24, r16
    15f2:	02 96       	adiw	r24, 0x02	; 2
    15f4:	2d b7       	in	r18, 0x3d	; 61
    15f6:	3e b7       	in	r19, 0x3e	; 62
    15f8:	28 1b       	sub	r18, r24
    15fa:	39 0b       	sbc	r19, r25
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	3e bf       	out	0x3e, r19	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	2d bf       	out	0x3d, r18	; 61
    1606:	8d b7       	in	r24, 0x3d	; 61
    1608:	9e b7       	in	r25, 0x3e	; 62
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	7c 01       	movw	r14, r24
		memcpy(newstr, str, len);
    160e:	a8 01       	movw	r20, r16
    1610:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <memcpy>
		newstr[len] = '\n';
    1614:	f7 01       	movw	r30, r14
    1616:	e0 0f       	add	r30, r16
    1618:	f1 1f       	adc	r31, r17
    161a:	8a e0       	ldi	r24, 0x0A	; 10
    161c:	80 83       	st	Z, r24
		newstr[len+1] = 0x00;
    161e:	11 82       	std	Z+1, r1	; 0x01
		split_message(CMD_WARNING, newstr);
    1620:	b7 01       	movw	r22, r14
    1622:	82 e2       	ldi	r24, 0x22	; 34
    1624:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <split_message>
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de be       	out	0x3e, r13	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd be       	out	0x3d, r12	; 61
	else {
		split_message(CMD_WARNING, str);
	}

	return;
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	08 95       	ret
		newstr[len] = '\n';
		newstr[len+1] = 0x00;
		split_message(CMD_WARNING, newstr);
	}
	else {
		split_message(CMD_WARNING, str);
    1644:	82 e2       	ldi	r24, 0x22	; 34
	}

	return;
}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
		newstr[len] = '\n';
		newstr[len+1] = 0x00;
		split_message(CMD_WARNING, newstr);
	}
	else {
		split_message(CMD_WARNING, str);
    1656:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <split_message>

0000165a <error>:
 * \see \ref debug
 * \see \ref warning
 *
 * \param str A NULL terminated string
 */
void error(char *str) {
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	bc 01       	movw	r22, r24
	else {
		split_message(CMD_ERROR, str);
	}

	return;
}
    1670:	cd b6       	in	r12, 0x3d	; 61
    1672:	de b6       	in	r13, 0x3e	; 62
 *
 * \param str A NULL terminated string
 */
void error(char *str) {

	uint8_t len = strlen(str);
    1674:	fc 01       	movw	r30, r24
    1676:	01 90       	ld	r0, Z+
    1678:	00 20       	and	r0, r0
    167a:	e9 f7       	brne	.-6      	; 0x1676 <error+0x1c>
    167c:	8f 01       	movw	r16, r30
    167e:	01 50       	subi	r16, 0x01	; 1
    1680:	11 09       	sbc	r17, r1
    1682:	08 1b       	sub	r16, r24
    1684:	19 0b       	sbc	r17, r25

	if (str[len-1] != '\n') {
    1686:	11 27       	eor	r17, r17
    1688:	fc 01       	movw	r30, r24
    168a:	e0 0f       	add	r30, r16
    168c:	f1 1f       	adc	r31, r17
    168e:	31 97       	sbiw	r30, 0x01	; 1
    1690:	80 81       	ld	r24, Z
    1692:	8a 30       	cpi	r24, 0x0A	; 10
    1694:	51 f1       	breq	.+84     	; 0x16ea <error+0x90>
		char newstr[len+2];
    1696:	c8 01       	movw	r24, r16
    1698:	02 96       	adiw	r24, 0x02	; 2
    169a:	2d b7       	in	r18, 0x3d	; 61
    169c:	3e b7       	in	r19, 0x3e	; 62
    169e:	28 1b       	sub	r18, r24
    16a0:	39 0b       	sbc	r19, r25
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	3e bf       	out	0x3e, r19	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	2d bf       	out	0x3d, r18	; 61
    16ac:	8d b7       	in	r24, 0x3d	; 61
    16ae:	9e b7       	in	r25, 0x3e	; 62
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	7c 01       	movw	r14, r24
		memcpy(newstr, str, len);
    16b4:	a8 01       	movw	r20, r16
    16b6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <memcpy>
		newstr[len] = '\n';
    16ba:	f7 01       	movw	r30, r14
    16bc:	e0 0f       	add	r30, r16
    16be:	f1 1f       	adc	r31, r17
    16c0:	8a e0       	ldi	r24, 0x0A	; 10
    16c2:	80 83       	st	Z, r24
		newstr[len+1] = 0x00;
    16c4:	11 82       	std	Z+1, r1	; 0x01
		split_message(CMD_ERROR, newstr);
    16c6:	b7 01       	movw	r22, r14
    16c8:	81 e2       	ldi	r24, 0x21	; 33
    16ca:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <split_message>
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de be       	out	0x3e, r13	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd be       	out	0x3d, r12	; 61
	else {
		split_message(CMD_ERROR, str);
	}

	return;
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	08 95       	ret
		newstr[len] = '\n';
		newstr[len+1] = 0x00;
		split_message(CMD_ERROR, newstr);
	}
	else {
		split_message(CMD_ERROR, str);
    16ea:	81 e2       	ldi	r24, 0x21	; 33
	}

	return;
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
		newstr[len] = '\n';
		newstr[len+1] = 0x00;
		split_message(CMD_ERROR, newstr);
	}
	else {
		split_message(CMD_ERROR, str);
    16fc:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <split_message>

00001700 <parse_default>:
 *
 * This is the parser for the normal operation.
 *
 * \param m The received message
 */
void parse_default(tExtendedCAN *m) {
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <parse_default+0xa>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	8c 01       	movw	r16, r24

	volatile uint16_t tmpa = 0;
    1710:	1a 82       	std	Y+2, r1	; 0x02
    1712:	19 82       	std	Y+1, r1	; 0x01

	switch (m->data[0]) {
    1714:	fc 01       	movw	r30, r24
    1716:	85 81       	ldd	r24, Z+5	; 0x05
    1718:	80 33       	cpi	r24, 0x30	; 48
    171a:	09 f4       	brne	.+2      	; 0x171e <parse_default+0x1e>
    171c:	7e c0       	rjmp	.+252    	; 0x181a <parse_default+0x11a>
    171e:	b8 f4       	brcc	.+46     	; 0x174e <parse_default+0x4e>
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	09 f4       	brne	.+2      	; 0x1726 <parse_default+0x26>
    1724:	7a c0       	rjmp	.+244    	; 0x181a <parse_default+0x11a>
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	69 f1       	breq	.+90     	; 0x1784 <parse_default+0x84>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	09 f0       	breq	.+2      	; 0x1730 <parse_default+0x30>
    172e:	71 c0       	rjmp	.+226    	; 0x1812 <parse_default+0x112>
		case CMD_PING:
			last_heartbeat = timer_get_ms();
    1730:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
    1734:	60 93 1e 02 	sts	0x021E, r22
    1738:	70 93 1f 02 	sts	0x021F, r23
    173c:	80 93 20 02 	sts	0x0220, r24
    1740:	90 93 21 02 	sts	0x0221, r25
			can_put_cmd(CMD_PONG, NULL, 0);
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	81 ef       	ldi	r24, 0xF1	; 241
    174c:	5c c0       	rjmp	.+184    	; 0x1806 <parse_default+0x106>
 */
void parse_default(tExtendedCAN *m) {

	volatile uint16_t tmpa = 0;

	switch (m->data[0]) {
    174e:	80 34       	cpi	r24, 0x40	; 64
    1750:	09 f4       	brne	.+2      	; 0x1754 <parse_default+0x54>
    1752:	5c c0       	rjmp	.+184    	; 0x180c <parse_default+0x10c>
    1754:	18 f4       	brcc	.+6      	; 0x175c <parse_default+0x5c>
    1756:	81 33       	cpi	r24, 0x31	; 49
    1758:	c9 f1       	breq	.+114    	; 0x17cc <parse_default+0xcc>
    175a:	5b c0       	rjmp	.+182    	; 0x1812 <parse_default+0x112>
    175c:	81 34       	cpi	r24, 0x41	; 65
    175e:	09 f4       	brne	.+2      	; 0x1762 <parse_default+0x62>
    1760:	4e c0       	rjmp	.+156    	; 0x17fe <parse_default+0xfe>
    1762:	8d 36       	cpi	r24, 0x6D	; 109
    1764:	09 f0       	breq	.+2      	; 0x1768 <parse_default+0x68>
    1766:	55 c0       	rjmp	.+170    	; 0x1812 <parse_default+0x112>
			booster_send_info();
			break;
		case CMD_SET_PULSE_WIDTH: //silently ignore
			break;
		case 'm':
			debug("manual");
    1768:	8b ec       	ldi	r24, 0xCB	; 203
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
			//timer_register(print_voltage, 1000);
			manual_mode = true;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 1d 02 	sts	0x021D, r24
			parse_data = parse_manual;
    1776:	84 e1       	ldi	r24, 0x14	; 20
    1778:	9c e0       	ldi	r25, 0x0C	; 12
    177a:	90 93 6a 00 	sts	0x006A, r25
    177e:	80 93 69 00 	sts	0x0069, r24
			break;
    1782:	4b c0       	rjmp	.+150    	; 0x181a <parse_default+0x11a>
		case CMD_PING:
			last_heartbeat = timer_get_ms();
			can_put_cmd(CMD_PONG, NULL, 0);
			break;
		case CMD_KICK:
			if (timer_get_ms() > 1000) {
    1784:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
    1788:	69 3e       	cpi	r22, 0xE9	; 233
    178a:	73 40       	sbci	r23, 0x03	; 3
    178c:	81 05       	cpc	r24, r1
    178e:	91 05       	cpc	r25, r1
    1790:	08 f4       	brcc	.+2      	; 0x1794 <parse_default+0x94>
    1792:	43 c0       	rjmp	.+134    	; 0x181a <parse_default+0x11a>
				tmpa = m->data[1] + (m->data[2]<<8);
    1794:	f8 01       	movw	r30, r16
    1796:	26 81       	ldd	r18, Z+6	; 0x06
    1798:	87 81       	ldd	r24, Z+7	; 0x07
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	98 2f       	mov	r25, r24
    179e:	88 27       	eor	r24, r24
    17a0:	82 0f       	add	r24, r18
    17a2:	91 1d       	adc	r25, r1
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
				if (m->header.length == 3)
    17a8:	84 81       	ldd	r24, Z+4	; 0x04
    17aa:	8e 71       	andi	r24, 0x1E	; 30
    17ac:	86 30       	cpi	r24, 0x06	; 6
    17ae:	29 f4       	brne	.+10     	; 0x17ba <parse_default+0xba>
					kicker_add_kick_job(tmpa);
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	0e 94 c1 05 	call	0xb82	; 0xb82 <kicker_add_kick_job>
    17b8:	30 c0       	rjmp	.+96     	; 0x181a <parse_default+0x11a>
				else if (m->header.length == 4)
    17ba:	88 30       	cpi	r24, 0x08	; 8
    17bc:	71 f5       	brne	.+92     	; 0x181a <parse_default+0x11a>
					kicker_add_kick_job_forced(tmpa, m->data[3]);
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	f8 01       	movw	r30, r16
    17c4:	60 85       	ldd	r22, Z+8	; 0x08
    17c6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <kicker_add_kick_job_forced>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <parse_default+0x11a>
			}
			break;
		case CMD_SET_MAX_VOLTAGE:
			
			if (m->header.length == 3) {
    17cc:	f8 01       	movw	r30, r16
    17ce:	84 81       	ldd	r24, Z+4	; 0x04
    17d0:	8e 71       	andi	r24, 0x1E	; 30
    17d2:	86 30       	cpi	r24, 0x06	; 6
    17d4:	41 f4       	brne	.+16     	; 0x17e6 <parse_default+0xe6>

				tmpa = m->data[1] + (m->data[2]<<8);
    17d6:	26 81       	ldd	r18, Z+6	; 0x06
    17d8:	87 81       	ldd	r24, Z+7	; 0x07
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	98 2f       	mov	r25, r24
    17de:	88 27       	eor	r24, r24
    17e0:	82 0f       	add	r24, r18
    17e2:	91 1d       	adc	r25, r1
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <parse_default+0xf0>
				booster_set_max_voltage(tmpa);

			} else if (m->header.length == 2) {
    17e6:	84 30       	cpi	r24, 0x04	; 4
    17e8:	c1 f4       	brne	.+48     	; 0x181a <parse_default+0x11a>
				tmpa = ((uint16_t)(m->data[1])) & 0xFF;
    17ea:	f8 01       	movw	r30, r16
    17ec:	86 81       	ldd	r24, Z+6	; 0x06
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	89 83       	std	Y+1, r24	; 0x01
				booster_set_max_voltage(tmpa);
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	0e 94 ed 03 	call	0x7da	; 0x7da <booster_set_max_voltage>
    17fc:	0e c0       	rjmp	.+28     	; 0x181a <parse_default+0x11a>
		case CMD_GET_VERSION:
			{
				char *version = "RK" XSTRING(MAJOR) "." XSTRING(MINOR);
				uint8_t len = strlen(version);
				if (len > 7) len = 7;
				can_put_cmd(CMD_VERSION, (uint8_t*) version, len);
    17fe:	45 e0       	ldi	r20, 0x05	; 5
    1800:	65 ec       	ldi	r22, 0xC5	; 197
    1802:	71 e0       	ldi	r23, 0x01	; 1
    1804:	83 ef       	ldi	r24, 0xF3	; 243
    1806:	0e 94 0a 0a 	call	0x1414	; 0x1414 <can_put_cmd>
			}
			break;
    180a:	07 c0       	rjmp	.+14     	; 0x181a <parse_default+0x11a>
		case CMD_GET_STATE:
			booster_send_info();
    180c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <booster_send_info>
			break;
    1810:	04 c0       	rjmp	.+8      	; 0x181a <parse_default+0x11a>
			//timer_register(print_voltage, 1000);
			manual_mode = true;
			parse_data = parse_manual;
			break;
		default:
			error("Command not implemented");
    1812:	82 ed       	ldi	r24, 0xD2	; 210
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	0e 94 2d 0b 	call	0x165a	; 0x165a <error>
			break;
	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <parse_manual>:
 *
 * This is used in manual mode.
 *
 * \param m The received message.
 */
void parse_manual(tExtendedCAN *m) {
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	28 97       	sbiw	r28, 0x08	; 8
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
	char str[8];

	// set the power of a shot
	// full power is round about 3000
	// a slow pass is about 800
	if (m->data[0] == 's') {
    1840:	dc 01       	movw	r26, r24
    1842:	15 96       	adiw	r26, 0x05	; 5
    1844:	2c 91       	ld	r18, X
    1846:	15 97       	sbiw	r26, 0x05	; 5
    1848:	23 37       	cpi	r18, 0x73	; 115
    184a:	09 f0       	breq	.+2      	; 0x184e <parse_manual+0x26>
    184c:	48 c0       	rjmp	.+144    	; 0x18de <parse_manual+0xb6>
		for (i = 1; i < m->header.length; i++) {
    184e:	14 96       	adiw	r26, 0x04	; 4
    1850:	6c 91       	ld	r22, X
    1852:	66 95       	lsr	r22
    1854:	6f 70       	andi	r22, 0x0F	; 15
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	e1 e0       	ldi	r30, 0x01	; 1
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
			if (m->data[i] >= 0x30 && m->data[i] <= 0x39) {
				tmp = tmp * 10 + (m->data[i] - 0x30);
    185e:	fa e0       	ldi	r31, 0x0A	; 10

	// set the power of a shot
	// full power is round about 3000
	// a slow pass is about 800
	if (m->data[0] == 's') {
		for (i = 1; i < m->header.length; i++) {
    1860:	4e 2f       	mov	r20, r30
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	46 17       	cp	r20, r22
    1866:	57 07       	cpc	r21, r23
    1868:	fc f4       	brge	.+62     	; 0x18a8 <parse_manual+0x80>
			if (m->data[i] >= 0x30 && m->data[i] <= 0x39) {
    186a:	dc 01       	movw	r26, r24
    186c:	a4 0f       	add	r26, r20
    186e:	b5 1f       	adc	r27, r21
    1870:	15 96       	adiw	r26, 0x05	; 5
    1872:	4c 91       	ld	r20, X
    1874:	50 ed       	ldi	r21, 0xD0	; 208
    1876:	54 0f       	add	r21, r20
    1878:	5a 30       	cpi	r21, 0x0A	; 10
    187a:	88 f4       	brcc	.+34     	; 0x189e <parse_manual+0x76>
				tmp = tmp * 10 + (m->data[i] - 0x30);
    187c:	d9 01       	movw	r26, r18
    187e:	fa 9f       	mul	r31, r26
    1880:	90 01       	movw	r18, r0
    1882:	fb 9f       	mul	r31, r27
    1884:	30 0d       	add	r19, r0
    1886:	11 24       	eor	r1, r1
    1888:	20 53       	subi	r18, 0x30	; 48
    188a:	31 09       	sbc	r19, r1
    188c:	24 0f       	add	r18, r20
    188e:	31 1d       	adc	r19, r1
				if (tmp > 9999) {//254) {
    1890:	20 31       	cpi	r18, 0x10	; 16
    1892:	b7 e2       	ldi	r27, 0x27	; 39
    1894:	3b 07       	cpc	r19, r27
    1896:	30 f0       	brcs	.+12     	; 0x18a4 <parse_manual+0x7c>
					error("ERR DATE");
    1898:	8a ee       	ldi	r24, 0xEA	; 234
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	53 c0       	rjmp	.+166    	; 0x1944 <parse_manual+0x11c>
					return;
				}
			}
			else {
				error("ERR NAN");
    189e:	83 ef       	ldi	r24, 0xF3	; 243
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	50 c0       	rjmp	.+160    	; 0x1944 <parse_manual+0x11c>

	// set the power of a shot
	// full power is round about 3000
	// a slow pass is about 800
	if (m->data[0] == 's') {
		for (i = 1; i < m->header.length; i++) {
    18a4:	ef 5f       	subi	r30, 0xFF	; 255
    18a6:	dc cf       	rjmp	.-72     	; 0x1860 <parse_manual+0x38>
			else {
				error("ERR NAN");
				return;
			}
		}
		release_time = tmp;
    18a8:	30 93 68 00 	sts	0x0068, r19
    18ac:	20 93 67 00 	sts	0x0067, r18
		sprintf(str, "nt%d\n", tmp);
    18b0:	3f 93       	push	r19
    18b2:	2f 93       	push	r18
    18b4:	8b ef       	ldi	r24, 0xFB	; 251
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	9f 93       	push	r25
    18ba:	8f 93       	push	r24
    18bc:	8e 01       	movw	r16, r28
    18be:	0f 5f       	subi	r16, 0xFF	; 255
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	1f 93       	push	r17
    18c4:	0f 93       	push	r16
    18c6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <sprintf>
		debug(str);
    18ca:	c8 01       	movw	r24, r16
    18cc:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	35 c0       	rjmp	.+106    	; 0x1948 <parse_manual+0x120>
	}
	// SPACE release the kicker
	else if (m->data[0] == ' ') {
    18de:	20 32       	cpi	r18, 0x20	; 32
    18e0:	69 f4       	brne	.+26     	; 0x18fc <parse_manual+0xd4>
		if (release_time > 0)
    18e2:	80 91 67 00 	lds	r24, 0x0067
    18e6:	90 91 68 00 	lds	r25, 0x0068
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <parse_manual+0xca>
			kicker_add_kick_job(release_time);
    18ee:	0e 94 c1 05 	call	0xb82	; 0xb82 <kicker_add_kick_job>
		debug("Release");
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
    18fa:	26 c0       	rjmp	.+76     	; 0x1948 <parse_manual+0x120>
	}
	// enable auto boosting
	else if (m->data[0] == 'e') {
    18fc:	25 36       	cpi	r18, 0x65	; 101
    18fe:	21 f4       	brne	.+8      	; 0x1908 <parse_manual+0xe0>
		auto_boost = true;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 93 62 00 	sts	0x0062, r24
    1906:	20 c0       	rjmp	.+64     	; 0x1948 <parse_manual+0x120>
	}
	// force boosting. disable the software control
	// warning this may overload the capacitors if the
	// hardware disabling function fails
	else if (m->data[0] == 'w') {
    1908:	27 37       	cpi	r18, 0x77	; 119
    190a:	29 f4       	brne	.+10     	; 0x1916 <parse_manual+0xee>
		auto_boost = false;
    190c:	10 92 62 00 	sts	0x0062, r1
		booster_pwm_enable();
    1910:	0e 94 95 03 	call	0x72a	; 0x72a <booster_pwm_enable>
    1914:	19 c0       	rjmp	.+50     	; 0x1948 <parse_manual+0x120>
	}
	// disable charging but holds the power
	else if (m->data[0] == 'q') {
    1916:	21 37       	cpi	r18, 0x71	; 113
    1918:	29 f4       	brne	.+10     	; 0x1924 <parse_manual+0xfc>
		auto_boost = false;
    191a:	10 92 62 00 	sts	0x0062, r1
		booster_pwm_disable();
    191e:	0e 94 a8 03 	call	0x750	; 0x750 <booster_pwm_disable>
    1922:	12 c0       	rjmp	.+36     	; 0x1948 <parse_manual+0x120>
	}
	// switch back to AUTOMATIC MODE
	// (without the driver the rekick driver
	// (the one in c#), the system goes into standby mode)
	else if (m->data[0] == 'a') {
    1924:	21 36       	cpi	r18, 0x61	; 97
    1926:	61 f4       	brne	.+24     	; 0x1940 <parse_manual+0x118>
		//timer_deregister(print_voltage);
		auto_boost = true;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 62 00 	sts	0x0062, r24
		manual_mode = false;
    192e:	10 92 1d 02 	sts	0x021D, r1
		parse_data = parse_default;
    1932:	80 e8       	ldi	r24, 0x80	; 128
    1934:	9b e0       	ldi	r25, 0x0B	; 11
    1936:	90 93 6a 00 	sts	0x006A, r25
    193a:	80 93 69 00 	sts	0x0069, r24
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <parse_manual+0x120>
	}
	else {
		error("ERR IMPL");
    1940:	89 e0       	ldi	r24, 0x09	; 9
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	0e 94 2d 0b 	call	0x165a	; 0x165a <error>
	}

	return;
}
    1948:	28 96       	adiw	r28, 0x08	; 8
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <clear_receive_buffer>:
}

/**
 * Removes all message from the receive buffer
 */
void clear_receive_buffer(void) {
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	2d 97       	sbiw	r28, 0x0d	; 13
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61

	tExtendedCAN reply;

	while (mcp2515_check_message())
    1972:	0e 94 28 01 	call	0x250	; 0x250 <mcp2515_check_message>
    1976:	88 23       	and	r24, r24
    1978:	29 f0       	breq	.+10     	; 0x1984 <clear_receive_buffer+0x26>
		mcp2515_get_extmessage(&reply);
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_get_extmessage>
    1982:	f7 cf       	rjmp	.-18     	; 0x1972 <clear_receive_buffer+0x14>
}
    1984:	2d 96       	adiw	r28, 0x0d	; 13
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret

00001996 <print_voltage>:

/**
 * Callback function which prints the actual capacitors message
 */
void print_voltage(void) {
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	64 97       	sbiw	r28, 0x14	; 20
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
	
	char str[20];
	
	sprintf(str, "%dV", get_capacitors_voltage());
    19ae:	0e 94 0d 07 	call	0xe1a	; 0xe1a <get_capacitors_voltage>
    19b2:	9f 93       	push	r25
    19b4:	8f 93       	push	r24
    19b6:	82 e1       	ldi	r24, 0x12	; 18
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	8e 01       	movw	r16, r28
    19c0:	0f 5f       	subi	r16, 0xFF	; 255
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	1f 93       	push	r17
    19c6:	0f 93       	push	r16
    19c8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <sprintf>
	debug(str);
    19cc:	c8 01       	movw	r24, r16
    19ce:	0e 94 87 0a 	call	0x150e	; 0x150e <debug>
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
}
    19de:	64 96       	adiw	r28, 0x14	; 20
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret

000019f4 <message_handler>:
    19f4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <can_receive_handler>
    19f8:	0e 94 87 09 	call	0x130e	; 0x130e <can_send_handler>
    19fc:	80 91 1d 02 	lds	r24, 0x021D
    1a00:	88 23       	and	r24, r24
    1a02:	71 f0       	breq	.+28     	; 0x1a20 <message_handler+0x2c>
    1a04:	80 91 88 02 	lds	r24, 0x0288
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	98 0f       	add	r25, r24
    1a0c:	90 93 88 02 	sts	0x0288, r25
    1a10:	89 32       	cpi	r24, 0x29	; 41
    1a12:	30 f0       	brcs	.+12     	; 0x1a20 <message_handler+0x2c>
    1a14:	10 92 88 02 	sts	0x0288, r1
    1a18:	0e 94 cb 0c 	call	0x1996	; 0x1996 <print_voltage>
    1a1c:	0c 94 87 09 	jmp	0x130e	; 0x130e <can_send_handler>
    1a20:	08 95       	ret

00001a22 <main>:
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	1f 92       	push	r1
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	a0 9a       	sbi	0x14, 0	; 20
    1a2e:	a1 9a       	sbi	0x14, 1	; 20
    1a30:	a8 98       	cbi	0x15, 0	; 21
    1a32:	a9 98       	cbi	0x15, 1	; 21
    1a34:	84 b7       	in	r24, 0x34	; 52
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	14 be       	out	0x34, r1	; 52
    1a3a:	11 bc       	out	0x21, r1	; 33
    1a3c:	78 94       	sei
    1a3e:	0e 94 23 09 	call	0x1246	; 0x1246 <can_init>
    1a42:	0e 94 04 07 	call	0xe08	; 0xe08 <ports_init>
    1a46:	0e 94 b6 05 	call	0xb6c	; 0xb6c <kicker_init>
    1a4a:	0e 94 a3 07 	call	0xf46	; 0xf46 <timer_init>
    1a4e:	0e 94 56 05 	call	0xaac	; 0xaac <booster_init>
    1a52:	0e 94 66 08 	call	0x10cc	; 0x10cc <timer_get_ms>
    1a56:	6c 3d       	cpi	r22, 0xDC	; 220
    1a58:	75 40       	sbci	r23, 0x05	; 5
    1a5a:	81 05       	cpc	r24, r1
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	18 f4       	brcc	.+6      	; 0x1a66 <main+0x44>
    1a60:	0e 94 af 0c 	call	0x195e	; 0x195e <clear_receive_buffer>
    1a64:	f6 cf       	rjmp	.-20     	; 0x1a52 <main+0x30>
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	be 01       	movw	r22, r28
    1a6a:	6f 5f       	subi	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	84 ef       	ldi	r24, 0xF4	; 244
    1a70:	0e 94 0a 0a 	call	0x1414	; 0x1414 <can_put_cmd>
    1a74:	0e 94 a4 07 	call	0xf48	; 0xf48 <timer_trigger_callbacks>
    1a78:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <message_handler>
    1a7c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <kicker_task_handler>
    1a80:	0e 94 07 04 	call	0x80e	; 0x80e <booster_ctrl>
    1a84:	f7 cf       	rjmp	.-18     	; 0x1a74 <main+0x52>

00001a86 <__cmpsf2>:
    1a86:	d4 d0       	rcall	.+424    	; 0x1c30 <__fp_cmp>
    1a88:	08 f4       	brcc	.+2      	; 0x1a8c <__cmpsf2+0x6>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	08 95       	ret

00001a8e <__divsf3>:
    1a8e:	0c d0       	rcall	.+24     	; 0x1aa8 <__divsf3x>
    1a90:	0a c1       	rjmp	.+532    	; 0x1ca6 <__fp_round>
    1a92:	02 d1       	rcall	.+516    	; 0x1c98 <__fp_pscB>
    1a94:	40 f0       	brcs	.+16     	; 0x1aa6 <__divsf3+0x18>
    1a96:	f9 d0       	rcall	.+498    	; 0x1c8a <__fp_pscA>
    1a98:	30 f0       	brcs	.+12     	; 0x1aa6 <__divsf3+0x18>
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <__divsf3+0x16>
    1a9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <__divsf3+0x18>
    1aa0:	eb c0       	rjmp	.+470    	; 0x1c78 <__fp_inf>
    1aa2:	51 11       	cpse	r21, r1
    1aa4:	34 c1       	rjmp	.+616    	; 0x1d0e <__fp_szero>
    1aa6:	ee c0       	rjmp	.+476    	; 0x1c84 <__fp_nan>

00001aa8 <__divsf3x>:
    1aa8:	0f d1       	rcall	.+542    	; 0x1cc8 <__fp_split3>
    1aaa:	98 f3       	brcs	.-26     	; 0x1a92 <__divsf3+0x4>

00001aac <__divsf3_pse>:
    1aac:	99 23       	and	r25, r25
    1aae:	c9 f3       	breq	.-14     	; 0x1aa2 <__divsf3+0x14>
    1ab0:	55 23       	and	r21, r21
    1ab2:	b1 f3       	breq	.-20     	; 0x1aa0 <__divsf3+0x12>
    1ab4:	95 1b       	sub	r25, r21
    1ab6:	55 0b       	sbc	r21, r21
    1ab8:	bb 27       	eor	r27, r27
    1aba:	aa 27       	eor	r26, r26
    1abc:	62 17       	cp	r22, r18
    1abe:	73 07       	cpc	r23, r19
    1ac0:	84 07       	cpc	r24, r20
    1ac2:	38 f0       	brcs	.+14     	; 0x1ad2 <__divsf3_pse+0x26>
    1ac4:	9f 5f       	subi	r25, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	44 1f       	adc	r20, r20
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	a9 f3       	breq	.-22     	; 0x1abc <__divsf3_pse+0x10>
    1ad2:	33 d0       	rcall	.+102    	; 0x1b3a <__divsf3_pse+0x8e>
    1ad4:	0e 2e       	mov	r0, r30
    1ad6:	3a f0       	brmi	.+14     	; 0x1ae6 <__divsf3_pse+0x3a>
    1ad8:	e0 e8       	ldi	r30, 0x80	; 128
    1ada:	30 d0       	rcall	.+96     	; 0x1b3c <__divsf3_pse+0x90>
    1adc:	91 50       	subi	r25, 0x01	; 1
    1ade:	50 40       	sbci	r21, 0x00	; 0
    1ae0:	e6 95       	lsr	r30
    1ae2:	00 1c       	adc	r0, r0
    1ae4:	ca f7       	brpl	.-14     	; 0x1ad8 <__divsf3_pse+0x2c>
    1ae6:	29 d0       	rcall	.+82     	; 0x1b3a <__divsf3_pse+0x8e>
    1ae8:	fe 2f       	mov	r31, r30
    1aea:	27 d0       	rcall	.+78     	; 0x1b3a <__divsf3_pse+0x8e>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	bb 1f       	adc	r27, r27
    1af4:	26 17       	cp	r18, r22
    1af6:	37 07       	cpc	r19, r23
    1af8:	48 07       	cpc	r20, r24
    1afa:	ab 07       	cpc	r26, r27
    1afc:	b0 e8       	ldi	r27, 0x80	; 128
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <__divsf3_pse+0x56>
    1b00:	bb 0b       	sbc	r27, r27
    1b02:	80 2d       	mov	r24, r0
    1b04:	bf 01       	movw	r22, r30
    1b06:	ff 27       	eor	r31, r31
    1b08:	93 58       	subi	r25, 0x83	; 131
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	2a f0       	brmi	.+10     	; 0x1b18 <__divsf3_pse+0x6c>
    1b0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b10:	51 05       	cpc	r21, r1
    1b12:	68 f0       	brcs	.+26     	; 0x1b2e <__divsf3_pse+0x82>
    1b14:	b1 c0       	rjmp	.+354    	; 0x1c78 <__fp_inf>
    1b16:	fb c0       	rjmp	.+502    	; 0x1d0e <__fp_szero>
    1b18:	5f 3f       	cpi	r21, 0xFF	; 255
    1b1a:	ec f3       	brlt	.-6      	; 0x1b16 <__divsf3_pse+0x6a>
    1b1c:	98 3e       	cpi	r25, 0xE8	; 232
    1b1e:	dc f3       	brlt	.-10     	; 0x1b16 <__divsf3_pse+0x6a>
    1b20:	86 95       	lsr	r24
    1b22:	77 95       	ror	r23
    1b24:	67 95       	ror	r22
    1b26:	b7 95       	ror	r27
    1b28:	f7 95       	ror	r31
    1b2a:	9f 5f       	subi	r25, 0xFF	; 255
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__divsf3_pse+0x74>
    1b2e:	88 0f       	add	r24, r24
    1b30:	91 1d       	adc	r25, r1
    1b32:	96 95       	lsr	r25
    1b34:	87 95       	ror	r24
    1b36:	97 f9       	bld	r25, 7
    1b38:	08 95       	ret
    1b3a:	e1 e0       	ldi	r30, 0x01	; 1
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	bb 1f       	adc	r27, r27
    1b44:	62 17       	cp	r22, r18
    1b46:	73 07       	cpc	r23, r19
    1b48:	84 07       	cpc	r24, r20
    1b4a:	ba 07       	cpc	r27, r26
    1b4c:	20 f0       	brcs	.+8      	; 0x1b56 <__divsf3_pse+0xaa>
    1b4e:	62 1b       	sub	r22, r18
    1b50:	73 0b       	sbc	r23, r19
    1b52:	84 0b       	sbc	r24, r20
    1b54:	ba 0b       	sbc	r27, r26
    1b56:	ee 1f       	adc	r30, r30
    1b58:	88 f7       	brcc	.-30     	; 0x1b3c <__divsf3_pse+0x90>
    1b5a:	e0 95       	com	r30
    1b5c:	08 95       	ret

00001b5e <__fixunssfsi>:
    1b5e:	bc d0       	rcall	.+376    	; 0x1cd8 <__fp_splitA>
    1b60:	88 f0       	brcs	.+34     	; 0x1b84 <__fixunssfsi+0x26>
    1b62:	9f 57       	subi	r25, 0x7F	; 127
    1b64:	90 f0       	brcs	.+36     	; 0x1b8a <__fixunssfsi+0x2c>
    1b66:	b9 2f       	mov	r27, r25
    1b68:	99 27       	eor	r25, r25
    1b6a:	b7 51       	subi	r27, 0x17	; 23
    1b6c:	a0 f0       	brcs	.+40     	; 0x1b96 <__fixunssfsi+0x38>
    1b6e:	d1 f0       	breq	.+52     	; 0x1ba4 <__fixunssfsi+0x46>
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	1a f0       	brmi	.+6      	; 0x1b80 <__fixunssfsi+0x22>
    1b7a:	ba 95       	dec	r27
    1b7c:	c9 f7       	brne	.-14     	; 0x1b70 <__fixunssfsi+0x12>
    1b7e:	12 c0       	rjmp	.+36     	; 0x1ba4 <__fixunssfsi+0x46>
    1b80:	b1 30       	cpi	r27, 0x01	; 1
    1b82:	81 f0       	breq	.+32     	; 0x1ba4 <__fixunssfsi+0x46>
    1b84:	c3 d0       	rcall	.+390    	; 0x1d0c <__fp_zero>
    1b86:	b1 e0       	ldi	r27, 0x01	; 1
    1b88:	08 95       	ret
    1b8a:	c0 c0       	rjmp	.+384    	; 0x1d0c <__fp_zero>
    1b8c:	67 2f       	mov	r22, r23
    1b8e:	78 2f       	mov	r23, r24
    1b90:	88 27       	eor	r24, r24
    1b92:	b8 5f       	subi	r27, 0xF8	; 248
    1b94:	39 f0       	breq	.+14     	; 0x1ba4 <__fixunssfsi+0x46>
    1b96:	b9 3f       	cpi	r27, 0xF9	; 249
    1b98:	cc f3       	brlt	.-14     	; 0x1b8c <__fixunssfsi+0x2e>
    1b9a:	86 95       	lsr	r24
    1b9c:	77 95       	ror	r23
    1b9e:	67 95       	ror	r22
    1ba0:	b3 95       	inc	r27
    1ba2:	d9 f7       	brne	.-10     	; 0x1b9a <__fixunssfsi+0x3c>
    1ba4:	3e f4       	brtc	.+14     	; 0x1bb4 <__fixunssfsi+0x56>
    1ba6:	90 95       	com	r25
    1ba8:	80 95       	com	r24
    1baa:	70 95       	com	r23
    1bac:	61 95       	neg	r22
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	08 95       	ret

00001bb6 <__floatunsisf>:
    1bb6:	e8 94       	clt
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <__floatsisf+0x12>

00001bba <__floatsisf>:
    1bba:	97 fb       	bst	r25, 7
    1bbc:	3e f4       	brtc	.+14     	; 0x1bcc <__floatsisf+0x12>
    1bbe:	90 95       	com	r25
    1bc0:	80 95       	com	r24
    1bc2:	70 95       	com	r23
    1bc4:	61 95       	neg	r22
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	99 23       	and	r25, r25
    1bce:	a9 f0       	breq	.+42     	; 0x1bfa <__floatsisf+0x40>
    1bd0:	f9 2f       	mov	r31, r25
    1bd2:	96 e9       	ldi	r25, 0x96	; 150
    1bd4:	bb 27       	eor	r27, r27
    1bd6:	93 95       	inc	r25
    1bd8:	f6 95       	lsr	r31
    1bda:	87 95       	ror	r24
    1bdc:	77 95       	ror	r23
    1bde:	67 95       	ror	r22
    1be0:	b7 95       	ror	r27
    1be2:	f1 11       	cpse	r31, r1
    1be4:	f8 cf       	rjmp	.-16     	; 0x1bd6 <__floatsisf+0x1c>
    1be6:	fa f4       	brpl	.+62     	; 0x1c26 <__floatsisf+0x6c>
    1be8:	bb 0f       	add	r27, r27
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <__floatsisf+0x36>
    1bec:	60 ff       	sbrs	r22, 0
    1bee:	1b c0       	rjmp	.+54     	; 0x1c26 <__floatsisf+0x6c>
    1bf0:	6f 5f       	subi	r22, 0xFF	; 255
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	16 c0       	rjmp	.+44     	; 0x1c26 <__floatsisf+0x6c>
    1bfa:	88 23       	and	r24, r24
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <__floatsisf+0x48>
    1bfe:	96 e9       	ldi	r25, 0x96	; 150
    1c00:	11 c0       	rjmp	.+34     	; 0x1c24 <__floatsisf+0x6a>
    1c02:	77 23       	and	r23, r23
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <__floatsisf+0x54>
    1c06:	9e e8       	ldi	r25, 0x8E	; 142
    1c08:	87 2f       	mov	r24, r23
    1c0a:	76 2f       	mov	r23, r22
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <__floatsisf+0x5e>
    1c0e:	66 23       	and	r22, r22
    1c10:	71 f0       	breq	.+28     	; 0x1c2e <__floatsisf+0x74>
    1c12:	96 e8       	ldi	r25, 0x86	; 134
    1c14:	86 2f       	mov	r24, r22
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	2a f0       	brmi	.+10     	; 0x1c26 <__floatsisf+0x6c>
    1c1c:	9a 95       	dec	r25
    1c1e:	66 0f       	add	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	88 1f       	adc	r24, r24
    1c24:	da f7       	brpl	.-10     	; 0x1c1c <__floatsisf+0x62>
    1c26:	88 0f       	add	r24, r24
    1c28:	96 95       	lsr	r25
    1c2a:	87 95       	ror	r24
    1c2c:	97 f9       	bld	r25, 7
    1c2e:	08 95       	ret

00001c30 <__fp_cmp>:
    1c30:	99 0f       	add	r25, r25
    1c32:	00 08       	sbc	r0, r0
    1c34:	55 0f       	add	r21, r21
    1c36:	aa 0b       	sbc	r26, r26
    1c38:	e0 e8       	ldi	r30, 0x80	; 128
    1c3a:	fe ef       	ldi	r31, 0xFE	; 254
    1c3c:	16 16       	cp	r1, r22
    1c3e:	17 06       	cpc	r1, r23
    1c40:	e8 07       	cpc	r30, r24
    1c42:	f9 07       	cpc	r31, r25
    1c44:	c0 f0       	brcs	.+48     	; 0x1c76 <__fp_cmp+0x46>
    1c46:	12 16       	cp	r1, r18
    1c48:	13 06       	cpc	r1, r19
    1c4a:	e4 07       	cpc	r30, r20
    1c4c:	f5 07       	cpc	r31, r21
    1c4e:	98 f0       	brcs	.+38     	; 0x1c76 <__fp_cmp+0x46>
    1c50:	62 1b       	sub	r22, r18
    1c52:	73 0b       	sbc	r23, r19
    1c54:	84 0b       	sbc	r24, r20
    1c56:	95 0b       	sbc	r25, r21
    1c58:	39 f4       	brne	.+14     	; 0x1c68 <__fp_cmp+0x38>
    1c5a:	0a 26       	eor	r0, r26
    1c5c:	61 f0       	breq	.+24     	; 0x1c76 <__fp_cmp+0x46>
    1c5e:	23 2b       	or	r18, r19
    1c60:	24 2b       	or	r18, r20
    1c62:	25 2b       	or	r18, r21
    1c64:	21 f4       	brne	.+8      	; 0x1c6e <__fp_cmp+0x3e>
    1c66:	08 95       	ret
    1c68:	0a 26       	eor	r0, r26
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <__fp_cmp+0x3e>
    1c6c:	a1 40       	sbci	r26, 0x01	; 1
    1c6e:	a6 95       	lsr	r26
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	81 1d       	adc	r24, r1
    1c74:	81 1d       	adc	r24, r1
    1c76:	08 95       	ret

00001c78 <__fp_inf>:
    1c78:	97 f9       	bld	r25, 7
    1c7a:	9f 67       	ori	r25, 0x7F	; 127
    1c7c:	80 e8       	ldi	r24, 0x80	; 128
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	08 95       	ret

00001c84 <__fp_nan>:
    1c84:	9f ef       	ldi	r25, 0xFF	; 255
    1c86:	80 ec       	ldi	r24, 0xC0	; 192
    1c88:	08 95       	ret

00001c8a <__fp_pscA>:
    1c8a:	00 24       	eor	r0, r0
    1c8c:	0a 94       	dec	r0
    1c8e:	16 16       	cp	r1, r22
    1c90:	17 06       	cpc	r1, r23
    1c92:	18 06       	cpc	r1, r24
    1c94:	09 06       	cpc	r0, r25
    1c96:	08 95       	ret

00001c98 <__fp_pscB>:
    1c98:	00 24       	eor	r0, r0
    1c9a:	0a 94       	dec	r0
    1c9c:	12 16       	cp	r1, r18
    1c9e:	13 06       	cpc	r1, r19
    1ca0:	14 06       	cpc	r1, r20
    1ca2:	05 06       	cpc	r0, r21
    1ca4:	08 95       	ret

00001ca6 <__fp_round>:
    1ca6:	09 2e       	mov	r0, r25
    1ca8:	03 94       	inc	r0
    1caa:	00 0c       	add	r0, r0
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <__fp_round+0xc>
    1cae:	88 23       	and	r24, r24
    1cb0:	52 f0       	brmi	.+20     	; 0x1cc6 <__fp_round+0x20>
    1cb2:	bb 0f       	add	r27, r27
    1cb4:	40 f4       	brcc	.+16     	; 0x1cc6 <__fp_round+0x20>
    1cb6:	bf 2b       	or	r27, r31
    1cb8:	11 f4       	brne	.+4      	; 0x1cbe <__fp_round+0x18>
    1cba:	60 ff       	sbrs	r22, 0
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <__fp_round+0x20>
    1cbe:	6f 5f       	subi	r22, 0xFF	; 255
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	08 95       	ret

00001cc8 <__fp_split3>:
    1cc8:	57 fd       	sbrc	r21, 7
    1cca:	90 58       	subi	r25, 0x80	; 128
    1ccc:	44 0f       	add	r20, r20
    1cce:	55 1f       	adc	r21, r21
    1cd0:	59 f0       	breq	.+22     	; 0x1ce8 <__fp_splitA+0x10>
    1cd2:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd4:	71 f0       	breq	.+28     	; 0x1cf2 <__fp_splitA+0x1a>
    1cd6:	47 95       	ror	r20

00001cd8 <__fp_splitA>:
    1cd8:	88 0f       	add	r24, r24
    1cda:	97 fb       	bst	r25, 7
    1cdc:	99 1f       	adc	r25, r25
    1cde:	61 f0       	breq	.+24     	; 0x1cf8 <__fp_splitA+0x20>
    1ce0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce2:	79 f0       	breq	.+30     	; 0x1d02 <__fp_splitA+0x2a>
    1ce4:	87 95       	ror	r24
    1ce6:	08 95       	ret
    1ce8:	12 16       	cp	r1, r18
    1cea:	13 06       	cpc	r1, r19
    1cec:	14 06       	cpc	r1, r20
    1cee:	55 1f       	adc	r21, r21
    1cf0:	f2 cf       	rjmp	.-28     	; 0x1cd6 <__fp_split3+0xe>
    1cf2:	46 95       	lsr	r20
    1cf4:	f1 df       	rcall	.-30     	; 0x1cd8 <__fp_splitA>
    1cf6:	08 c0       	rjmp	.+16     	; 0x1d08 <__fp_splitA+0x30>
    1cf8:	16 16       	cp	r1, r22
    1cfa:	17 06       	cpc	r1, r23
    1cfc:	18 06       	cpc	r1, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	f1 cf       	rjmp	.-30     	; 0x1ce4 <__fp_splitA+0xc>
    1d02:	86 95       	lsr	r24
    1d04:	71 05       	cpc	r23, r1
    1d06:	61 05       	cpc	r22, r1
    1d08:	08 94       	sec
    1d0a:	08 95       	ret

00001d0c <__fp_zero>:
    1d0c:	e8 94       	clt

00001d0e <__fp_szero>:
    1d0e:	bb 27       	eor	r27, r27
    1d10:	66 27       	eor	r22, r22
    1d12:	77 27       	eor	r23, r23
    1d14:	cb 01       	movw	r24, r22
    1d16:	97 f9       	bld	r25, 7
    1d18:	08 95       	ret

00001d1a <__gesf2>:
    1d1a:	8a df       	rcall	.-236    	; 0x1c30 <__fp_cmp>
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <__gesf2+0x6>
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	08 95       	ret

00001d22 <__mulsf3>:
    1d22:	0b d0       	rcall	.+22     	; 0x1d3a <__mulsf3x>
    1d24:	c0 cf       	rjmp	.-128    	; 0x1ca6 <__fp_round>
    1d26:	b1 df       	rcall	.-158    	; 0x1c8a <__fp_pscA>
    1d28:	28 f0       	brcs	.+10     	; 0x1d34 <__mulsf3+0x12>
    1d2a:	b6 df       	rcall	.-148    	; 0x1c98 <__fp_pscB>
    1d2c:	18 f0       	brcs	.+6      	; 0x1d34 <__mulsf3+0x12>
    1d2e:	95 23       	and	r25, r21
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <__mulsf3+0x12>
    1d32:	a2 cf       	rjmp	.-188    	; 0x1c78 <__fp_inf>
    1d34:	a7 cf       	rjmp	.-178    	; 0x1c84 <__fp_nan>
    1d36:	11 24       	eor	r1, r1
    1d38:	ea cf       	rjmp	.-44     	; 0x1d0e <__fp_szero>

00001d3a <__mulsf3x>:
    1d3a:	c6 df       	rcall	.-116    	; 0x1cc8 <__fp_split3>
    1d3c:	a0 f3       	brcs	.-24     	; 0x1d26 <__mulsf3+0x4>

00001d3e <__mulsf3_pse>:
    1d3e:	95 9f       	mul	r25, r21
    1d40:	d1 f3       	breq	.-12     	; 0x1d36 <__mulsf3+0x14>
    1d42:	95 0f       	add	r25, r21
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	55 1f       	adc	r21, r21
    1d48:	62 9f       	mul	r22, r18
    1d4a:	f0 01       	movw	r30, r0
    1d4c:	72 9f       	mul	r23, r18
    1d4e:	bb 27       	eor	r27, r27
    1d50:	f0 0d       	add	r31, r0
    1d52:	b1 1d       	adc	r27, r1
    1d54:	63 9f       	mul	r22, r19
    1d56:	aa 27       	eor	r26, r26
    1d58:	f0 0d       	add	r31, r0
    1d5a:	b1 1d       	adc	r27, r1
    1d5c:	aa 1f       	adc	r26, r26
    1d5e:	64 9f       	mul	r22, r20
    1d60:	66 27       	eor	r22, r22
    1d62:	b0 0d       	add	r27, r0
    1d64:	a1 1d       	adc	r26, r1
    1d66:	66 1f       	adc	r22, r22
    1d68:	82 9f       	mul	r24, r18
    1d6a:	22 27       	eor	r18, r18
    1d6c:	b0 0d       	add	r27, r0
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	62 1f       	adc	r22, r18
    1d72:	73 9f       	mul	r23, r19
    1d74:	b0 0d       	add	r27, r0
    1d76:	a1 1d       	adc	r26, r1
    1d78:	62 1f       	adc	r22, r18
    1d7a:	83 9f       	mul	r24, r19
    1d7c:	a0 0d       	add	r26, r0
    1d7e:	61 1d       	adc	r22, r1
    1d80:	22 1f       	adc	r18, r18
    1d82:	74 9f       	mul	r23, r20
    1d84:	33 27       	eor	r19, r19
    1d86:	a0 0d       	add	r26, r0
    1d88:	61 1d       	adc	r22, r1
    1d8a:	23 1f       	adc	r18, r19
    1d8c:	84 9f       	mul	r24, r20
    1d8e:	60 0d       	add	r22, r0
    1d90:	21 1d       	adc	r18, r1
    1d92:	82 2f       	mov	r24, r18
    1d94:	76 2f       	mov	r23, r22
    1d96:	6a 2f       	mov	r22, r26
    1d98:	11 24       	eor	r1, r1
    1d9a:	9f 57       	subi	r25, 0x7F	; 127
    1d9c:	50 40       	sbci	r21, 0x00	; 0
    1d9e:	8a f0       	brmi	.+34     	; 0x1dc2 <__mulsf3_pse+0x84>
    1da0:	e1 f0       	breq	.+56     	; 0x1dda <__mulsf3_pse+0x9c>
    1da2:	88 23       	and	r24, r24
    1da4:	4a f0       	brmi	.+18     	; 0x1db8 <__mulsf3_pse+0x7a>
    1da6:	ee 0f       	add	r30, r30
    1da8:	ff 1f       	adc	r31, r31
    1daa:	bb 1f       	adc	r27, r27
    1dac:	66 1f       	adc	r22, r22
    1dae:	77 1f       	adc	r23, r23
    1db0:	88 1f       	adc	r24, r24
    1db2:	91 50       	subi	r25, 0x01	; 1
    1db4:	50 40       	sbci	r21, 0x00	; 0
    1db6:	a9 f7       	brne	.-22     	; 0x1da2 <__mulsf3_pse+0x64>
    1db8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dba:	51 05       	cpc	r21, r1
    1dbc:	70 f0       	brcs	.+28     	; 0x1dda <__mulsf3_pse+0x9c>
    1dbe:	5c cf       	rjmp	.-328    	; 0x1c78 <__fp_inf>
    1dc0:	a6 cf       	rjmp	.-180    	; 0x1d0e <__fp_szero>
    1dc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc4:	ec f3       	brlt	.-6      	; 0x1dc0 <__mulsf3_pse+0x82>
    1dc6:	98 3e       	cpi	r25, 0xE8	; 232
    1dc8:	dc f3       	brlt	.-10     	; 0x1dc0 <__mulsf3_pse+0x82>
    1dca:	86 95       	lsr	r24
    1dcc:	77 95       	ror	r23
    1dce:	67 95       	ror	r22
    1dd0:	b7 95       	ror	r27
    1dd2:	f7 95       	ror	r31
    1dd4:	e7 95       	ror	r30
    1dd6:	9f 5f       	subi	r25, 0xFF	; 255
    1dd8:	c1 f7       	brne	.-16     	; 0x1dca <__mulsf3_pse+0x8c>
    1dda:	fe 2b       	or	r31, r30
    1ddc:	88 0f       	add	r24, r24
    1dde:	91 1d       	adc	r25, r1
    1de0:	96 95       	lsr	r25
    1de2:	87 95       	ror	r24
    1de4:	97 f9       	bld	r25, 7
    1de6:	08 95       	ret

00001de8 <__udivmodhi4>:
    1de8:	aa 1b       	sub	r26, r26
    1dea:	bb 1b       	sub	r27, r27
    1dec:	51 e1       	ldi	r21, 0x11	; 17
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <__udivmodhi4_ep>

00001df0 <__udivmodhi4_loop>:
    1df0:	aa 1f       	adc	r26, r26
    1df2:	bb 1f       	adc	r27, r27
    1df4:	a6 17       	cp	r26, r22
    1df6:	b7 07       	cpc	r27, r23
    1df8:	10 f0       	brcs	.+4      	; 0x1dfe <__udivmodhi4_ep>
    1dfa:	a6 1b       	sub	r26, r22
    1dfc:	b7 0b       	sbc	r27, r23

00001dfe <__udivmodhi4_ep>:
    1dfe:	88 1f       	adc	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	5a 95       	dec	r21
    1e04:	a9 f7       	brne	.-22     	; 0x1df0 <__udivmodhi4_loop>
    1e06:	80 95       	com	r24
    1e08:	90 95       	com	r25
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	08 95       	ret

00001e10 <__divmodhi4>:
    1e10:	97 fb       	bst	r25, 7
    1e12:	07 2e       	mov	r0, r23
    1e14:	16 f4       	brtc	.+4      	; 0x1e1a <__divmodhi4+0xa>
    1e16:	00 94       	com	r0
    1e18:	07 d0       	rcall	.+14     	; 0x1e28 <__divmodhi4_neg1>
    1e1a:	77 fd       	sbrc	r23, 7
    1e1c:	09 d0       	rcall	.+18     	; 0x1e30 <__divmodhi4_neg2>
    1e1e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
    1e22:	07 fc       	sbrc	r0, 7
    1e24:	05 d0       	rcall	.+10     	; 0x1e30 <__divmodhi4_neg2>
    1e26:	3e f4       	brtc	.+14     	; 0x1e36 <__divmodhi4_exit>

00001e28 <__divmodhi4_neg1>:
    1e28:	90 95       	com	r25
    1e2a:	81 95       	neg	r24
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	08 95       	ret

00001e30 <__divmodhi4_neg2>:
    1e30:	70 95       	com	r23
    1e32:	61 95       	neg	r22
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255

00001e36 <__divmodhi4_exit>:
    1e36:	08 95       	ret

00001e38 <memcpy>:
    1e38:	fb 01       	movw	r30, r22
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <memcpy+0xa>
    1e3e:	01 90       	ld	r0, Z+
    1e40:	0d 92       	st	X+, r0
    1e42:	41 50       	subi	r20, 0x01	; 1
    1e44:	50 40       	sbci	r21, 0x00	; 0
    1e46:	d8 f7       	brcc	.-10     	; 0x1e3e <memcpy+0x6>
    1e48:	08 95       	ret

00001e4a <sprintf>:
    1e4a:	ae e0       	ldi	r26, 0x0E	; 14
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__prologue_saves__+0x1c>
    1e56:	0d 89       	ldd	r16, Y+21	; 0x15
    1e58:	1e 89       	ldd	r17, Y+22	; 0x16
    1e5a:	86 e0       	ldi	r24, 0x06	; 6
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
    1e5e:	1a 83       	std	Y+2, r17	; 0x02
    1e60:	09 83       	std	Y+1, r16	; 0x01
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	9f e7       	ldi	r25, 0x7F	; 127
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	ae 01       	movw	r20, r28
    1e6c:	47 5e       	subi	r20, 0xE7	; 231
    1e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e70:	6f 89       	ldd	r22, Y+23	; 0x17
    1e72:	78 8d       	ldd	r23, Y+24	; 0x18
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <vfprintf>
    1e7c:	ef 81       	ldd	r30, Y+7	; 0x07
    1e7e:	f8 85       	ldd	r31, Y+8	; 0x08
    1e80:	e0 0f       	add	r30, r16
    1e82:	f1 1f       	adc	r31, r17
    1e84:	10 82       	st	Z, r1
    1e86:	2e 96       	adiw	r28, 0x0e	; 14
    1e88:	e4 e0       	ldi	r30, 0x04	; 4
    1e8a:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__epilogue_restores__+0x1c>

00001e8e <vfprintf>:
    1e8e:	ac e0       	ldi	r26, 0x0C	; 12
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	ed e4       	ldi	r30, 0x4D	; 77
    1e94:	ff e0       	ldi	r31, 0x0F	; 15
    1e96:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__prologue_saves__>
    1e9a:	7c 01       	movw	r14, r24
    1e9c:	6b 01       	movw	r12, r22
    1e9e:	8a 01       	movw	r16, r20
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	17 82       	std	Z+7, r1	; 0x07
    1ea4:	16 82       	std	Z+6, r1	; 0x06
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	81 ff       	sbrs	r24, 1
    1eaa:	bd c1       	rjmp	.+890    	; 0x2226 <vfprintf+0x398>
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	4c 01       	movw	r8, r24
    1eb2:	f7 01       	movw	r30, r14
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	f6 01       	movw	r30, r12
    1eb8:	93 fd       	sbrc	r25, 3
    1eba:	85 91       	lpm	r24, Z+
    1ebc:	93 ff       	sbrs	r25, 3
    1ebe:	81 91       	ld	r24, Z+
    1ec0:	6f 01       	movw	r12, r30
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <vfprintf+0x3a>
    1ec6:	ab c1       	rjmp	.+854    	; 0x221e <vfprintf+0x390>
    1ec8:	85 32       	cpi	r24, 0x25	; 37
    1eca:	39 f4       	brne	.+14     	; 0x1eda <vfprintf+0x4c>
    1ecc:	93 fd       	sbrc	r25, 3
    1ece:	85 91       	lpm	r24, Z+
    1ed0:	93 ff       	sbrs	r25, 3
    1ed2:	81 91       	ld	r24, Z+
    1ed4:	6f 01       	movw	r12, r30
    1ed6:	85 32       	cpi	r24, 0x25	; 37
    1ed8:	29 f4       	brne	.+10     	; 0x1ee4 <vfprintf+0x56>
    1eda:	b7 01       	movw	r22, r14
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    1ee2:	e7 cf       	rjmp	.-50     	; 0x1eb2 <vfprintf+0x24>
    1ee4:	51 2c       	mov	r5, r1
    1ee6:	31 2c       	mov	r3, r1
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	20 32       	cpi	r18, 0x20	; 32
    1eec:	a0 f4       	brcc	.+40     	; 0x1f16 <vfprintf+0x88>
    1eee:	8b 32       	cpi	r24, 0x2B	; 43
    1ef0:	69 f0       	breq	.+26     	; 0x1f0c <vfprintf+0x7e>
    1ef2:	30 f4       	brcc	.+12     	; 0x1f00 <vfprintf+0x72>
    1ef4:	80 32       	cpi	r24, 0x20	; 32
    1ef6:	59 f0       	breq	.+22     	; 0x1f0e <vfprintf+0x80>
    1ef8:	83 32       	cpi	r24, 0x23	; 35
    1efa:	69 f4       	brne	.+26     	; 0x1f16 <vfprintf+0x88>
    1efc:	20 61       	ori	r18, 0x10	; 16
    1efe:	2c c0       	rjmp	.+88     	; 0x1f58 <vfprintf+0xca>
    1f00:	8d 32       	cpi	r24, 0x2D	; 45
    1f02:	39 f0       	breq	.+14     	; 0x1f12 <vfprintf+0x84>
    1f04:	80 33       	cpi	r24, 0x30	; 48
    1f06:	39 f4       	brne	.+14     	; 0x1f16 <vfprintf+0x88>
    1f08:	21 60       	ori	r18, 0x01	; 1
    1f0a:	26 c0       	rjmp	.+76     	; 0x1f58 <vfprintf+0xca>
    1f0c:	22 60       	ori	r18, 0x02	; 2
    1f0e:	24 60       	ori	r18, 0x04	; 4
    1f10:	23 c0       	rjmp	.+70     	; 0x1f58 <vfprintf+0xca>
    1f12:	28 60       	ori	r18, 0x08	; 8
    1f14:	21 c0       	rjmp	.+66     	; 0x1f58 <vfprintf+0xca>
    1f16:	27 fd       	sbrc	r18, 7
    1f18:	27 c0       	rjmp	.+78     	; 0x1f68 <vfprintf+0xda>
    1f1a:	30 ed       	ldi	r19, 0xD0	; 208
    1f1c:	38 0f       	add	r19, r24
    1f1e:	3a 30       	cpi	r19, 0x0A	; 10
    1f20:	78 f4       	brcc	.+30     	; 0x1f40 <vfprintf+0xb2>
    1f22:	26 ff       	sbrs	r18, 6
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <vfprintf+0xa4>
    1f26:	fa e0       	ldi	r31, 0x0A	; 10
    1f28:	5f 9e       	mul	r5, r31
    1f2a:	30 0d       	add	r19, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	53 2e       	mov	r5, r19
    1f30:	13 c0       	rjmp	.+38     	; 0x1f58 <vfprintf+0xca>
    1f32:	8a e0       	ldi	r24, 0x0A	; 10
    1f34:	38 9e       	mul	r3, r24
    1f36:	30 0d       	add	r19, r0
    1f38:	11 24       	eor	r1, r1
    1f3a:	33 2e       	mov	r3, r19
    1f3c:	20 62       	ori	r18, 0x20	; 32
    1f3e:	0c c0       	rjmp	.+24     	; 0x1f58 <vfprintf+0xca>
    1f40:	8e 32       	cpi	r24, 0x2E	; 46
    1f42:	21 f4       	brne	.+8      	; 0x1f4c <vfprintf+0xbe>
    1f44:	26 fd       	sbrc	r18, 6
    1f46:	6b c1       	rjmp	.+726    	; 0x221e <vfprintf+0x390>
    1f48:	20 64       	ori	r18, 0x40	; 64
    1f4a:	06 c0       	rjmp	.+12     	; 0x1f58 <vfprintf+0xca>
    1f4c:	8c 36       	cpi	r24, 0x6C	; 108
    1f4e:	11 f4       	brne	.+4      	; 0x1f54 <vfprintf+0xc6>
    1f50:	20 68       	ori	r18, 0x80	; 128
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vfprintf+0xca>
    1f54:	88 36       	cpi	r24, 0x68	; 104
    1f56:	41 f4       	brne	.+16     	; 0x1f68 <vfprintf+0xda>
    1f58:	f6 01       	movw	r30, r12
    1f5a:	93 fd       	sbrc	r25, 3
    1f5c:	85 91       	lpm	r24, Z+
    1f5e:	93 ff       	sbrs	r25, 3
    1f60:	81 91       	ld	r24, Z+
    1f62:	6f 01       	movw	r12, r30
    1f64:	81 11       	cpse	r24, r1
    1f66:	c1 cf       	rjmp	.-126    	; 0x1eea <vfprintf+0x5c>
    1f68:	98 2f       	mov	r25, r24
    1f6a:	9f 7d       	andi	r25, 0xDF	; 223
    1f6c:	95 54       	subi	r25, 0x45	; 69
    1f6e:	93 30       	cpi	r25, 0x03	; 3
    1f70:	28 f4       	brcc	.+10     	; 0x1f7c <vfprintf+0xee>
    1f72:	0c 5f       	subi	r16, 0xFC	; 252
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	ff e3       	ldi	r31, 0x3F	; 63
    1f78:	f9 83       	std	Y+1, r31	; 0x01
    1f7a:	0d c0       	rjmp	.+26     	; 0x1f96 <vfprintf+0x108>
    1f7c:	83 36       	cpi	r24, 0x63	; 99
    1f7e:	31 f0       	breq	.+12     	; 0x1f8c <vfprintf+0xfe>
    1f80:	83 37       	cpi	r24, 0x73	; 115
    1f82:	71 f0       	breq	.+28     	; 0x1fa0 <vfprintf+0x112>
    1f84:	83 35       	cpi	r24, 0x53	; 83
    1f86:	09 f0       	breq	.+2      	; 0x1f8a <vfprintf+0xfc>
    1f88:	5b c0       	rjmp	.+182    	; 0x2040 <vfprintf+0x1b2>
    1f8a:	22 c0       	rjmp	.+68     	; 0x1fd0 <vfprintf+0x142>
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 81       	ld	r24, Z
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	0e 5f       	subi	r16, 0xFE	; 254
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	44 24       	eor	r4, r4
    1f98:	43 94       	inc	r4
    1f9a:	51 2c       	mov	r5, r1
    1f9c:	54 01       	movw	r10, r8
    1f9e:	15 c0       	rjmp	.+42     	; 0x1fca <vfprintf+0x13c>
    1fa0:	38 01       	movw	r6, r16
    1fa2:	f2 e0       	ldi	r31, 0x02	; 2
    1fa4:	6f 0e       	add	r6, r31
    1fa6:	71 1c       	adc	r7, r1
    1fa8:	f8 01       	movw	r30, r16
    1faa:	a0 80       	ld	r10, Z
    1fac:	b1 80       	ldd	r11, Z+1	; 0x01
    1fae:	26 ff       	sbrs	r18, 6
    1fb0:	03 c0       	rjmp	.+6      	; 0x1fb8 <vfprintf+0x12a>
    1fb2:	65 2d       	mov	r22, r5
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <vfprintf+0x12e>
    1fb8:	6f ef       	ldi	r22, 0xFF	; 255
    1fba:	7f ef       	ldi	r23, 0xFF	; 255
    1fbc:	c5 01       	movw	r24, r10
    1fbe:	2c 87       	std	Y+12, r18	; 0x0c
    1fc0:	0e 94 24 11 	call	0x2248	; 0x2248 <strnlen>
    1fc4:	2c 01       	movw	r4, r24
    1fc6:	83 01       	movw	r16, r6
    1fc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fca:	2f 77       	andi	r18, 0x7F	; 127
    1fcc:	22 2e       	mov	r2, r18
    1fce:	17 c0       	rjmp	.+46     	; 0x1ffe <vfprintf+0x170>
    1fd0:	38 01       	movw	r6, r16
    1fd2:	f2 e0       	ldi	r31, 0x02	; 2
    1fd4:	6f 0e       	add	r6, r31
    1fd6:	71 1c       	adc	r7, r1
    1fd8:	f8 01       	movw	r30, r16
    1fda:	a0 80       	ld	r10, Z
    1fdc:	b1 80       	ldd	r11, Z+1	; 0x01
    1fde:	26 ff       	sbrs	r18, 6
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <vfprintf+0x15a>
    1fe2:	65 2d       	mov	r22, r5
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <vfprintf+0x15e>
    1fe8:	6f ef       	ldi	r22, 0xFF	; 255
    1fea:	7f ef       	ldi	r23, 0xFF	; 255
    1fec:	c5 01       	movw	r24, r10
    1fee:	2c 87       	std	Y+12, r18	; 0x0c
    1ff0:	0e 94 19 11 	call	0x2232	; 0x2232 <strnlen_P>
    1ff4:	2c 01       	movw	r4, r24
    1ff6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ff8:	20 68       	ori	r18, 0x80	; 128
    1ffa:	22 2e       	mov	r2, r18
    1ffc:	83 01       	movw	r16, r6
    1ffe:	23 fc       	sbrc	r2, 3
    2000:	1b c0       	rjmp	.+54     	; 0x2038 <vfprintf+0x1aa>
    2002:	83 2d       	mov	r24, r3
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	48 16       	cp	r4, r24
    2008:	59 06       	cpc	r5, r25
    200a:	b0 f4       	brcc	.+44     	; 0x2038 <vfprintf+0x1aa>
    200c:	b7 01       	movw	r22, r14
    200e:	80 e2       	ldi	r24, 0x20	; 32
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    2016:	3a 94       	dec	r3
    2018:	f4 cf       	rjmp	.-24     	; 0x2002 <vfprintf+0x174>
    201a:	f5 01       	movw	r30, r10
    201c:	27 fc       	sbrc	r2, 7
    201e:	85 91       	lpm	r24, Z+
    2020:	27 fe       	sbrs	r2, 7
    2022:	81 91       	ld	r24, Z+
    2024:	5f 01       	movw	r10, r30
    2026:	b7 01       	movw	r22, r14
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    202e:	31 10       	cpse	r3, r1
    2030:	3a 94       	dec	r3
    2032:	f1 e0       	ldi	r31, 0x01	; 1
    2034:	4f 1a       	sub	r4, r31
    2036:	51 08       	sbc	r5, r1
    2038:	41 14       	cp	r4, r1
    203a:	51 04       	cpc	r5, r1
    203c:	71 f7       	brne	.-36     	; 0x201a <vfprintf+0x18c>
    203e:	e5 c0       	rjmp	.+458    	; 0x220a <vfprintf+0x37c>
    2040:	84 36       	cpi	r24, 0x64	; 100
    2042:	11 f0       	breq	.+4      	; 0x2048 <vfprintf+0x1ba>
    2044:	89 36       	cpi	r24, 0x69	; 105
    2046:	39 f5       	brne	.+78     	; 0x2096 <vfprintf+0x208>
    2048:	f8 01       	movw	r30, r16
    204a:	27 ff       	sbrs	r18, 7
    204c:	07 c0       	rjmp	.+14     	; 0x205c <vfprintf+0x1ce>
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	0c 5f       	subi	r16, 0xFC	; 252
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	08 c0       	rjmp	.+16     	; 0x206c <vfprintf+0x1de>
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	88 27       	eor	r24, r24
    2062:	77 fd       	sbrc	r23, 7
    2064:	80 95       	com	r24
    2066:	98 2f       	mov	r25, r24
    2068:	0e 5f       	subi	r16, 0xFE	; 254
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	2f 76       	andi	r18, 0x6F	; 111
    206e:	b2 2e       	mov	r11, r18
    2070:	97 ff       	sbrs	r25, 7
    2072:	09 c0       	rjmp	.+18     	; 0x2086 <vfprintf+0x1f8>
    2074:	90 95       	com	r25
    2076:	80 95       	com	r24
    2078:	70 95       	com	r23
    207a:	61 95       	neg	r22
    207c:	7f 4f       	sbci	r23, 0xFF	; 255
    207e:	8f 4f       	sbci	r24, 0xFF	; 255
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	20 68       	ori	r18, 0x80	; 128
    2084:	b2 2e       	mov	r11, r18
    2086:	2a e0       	ldi	r18, 0x0A	; 10
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	a4 01       	movw	r20, r8
    208c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__ultoa_invert>
    2090:	a8 2e       	mov	r10, r24
    2092:	a8 18       	sub	r10, r8
    2094:	44 c0       	rjmp	.+136    	; 0x211e <vfprintf+0x290>
    2096:	85 37       	cpi	r24, 0x75	; 117
    2098:	29 f4       	brne	.+10     	; 0x20a4 <vfprintf+0x216>
    209a:	2f 7e       	andi	r18, 0xEF	; 239
    209c:	b2 2e       	mov	r11, r18
    209e:	2a e0       	ldi	r18, 0x0A	; 10
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	25 c0       	rjmp	.+74     	; 0x20ee <vfprintf+0x260>
    20a4:	f2 2f       	mov	r31, r18
    20a6:	f9 7f       	andi	r31, 0xF9	; 249
    20a8:	bf 2e       	mov	r11, r31
    20aa:	8f 36       	cpi	r24, 0x6F	; 111
    20ac:	c1 f0       	breq	.+48     	; 0x20de <vfprintf+0x250>
    20ae:	18 f4       	brcc	.+6      	; 0x20b6 <vfprintf+0x228>
    20b0:	88 35       	cpi	r24, 0x58	; 88
    20b2:	79 f0       	breq	.+30     	; 0x20d2 <vfprintf+0x244>
    20b4:	b4 c0       	rjmp	.+360    	; 0x221e <vfprintf+0x390>
    20b6:	80 37       	cpi	r24, 0x70	; 112
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <vfprintf+0x232>
    20ba:	88 37       	cpi	r24, 0x78	; 120
    20bc:	21 f0       	breq	.+8      	; 0x20c6 <vfprintf+0x238>
    20be:	af c0       	rjmp	.+350    	; 0x221e <vfprintf+0x390>
    20c0:	2f 2f       	mov	r18, r31
    20c2:	20 61       	ori	r18, 0x10	; 16
    20c4:	b2 2e       	mov	r11, r18
    20c6:	b4 fe       	sbrs	r11, 4
    20c8:	0d c0       	rjmp	.+26     	; 0x20e4 <vfprintf+0x256>
    20ca:	8b 2d       	mov	r24, r11
    20cc:	84 60       	ori	r24, 0x04	; 4
    20ce:	b8 2e       	mov	r11, r24
    20d0:	09 c0       	rjmp	.+18     	; 0x20e4 <vfprintf+0x256>
    20d2:	24 ff       	sbrs	r18, 4
    20d4:	0a c0       	rjmp	.+20     	; 0x20ea <vfprintf+0x25c>
    20d6:	9f 2f       	mov	r25, r31
    20d8:	96 60       	ori	r25, 0x06	; 6
    20da:	b9 2e       	mov	r11, r25
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <vfprintf+0x25c>
    20de:	28 e0       	ldi	r18, 0x08	; 8
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <vfprintf+0x260>
    20e4:	20 e1       	ldi	r18, 0x10	; 16
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <vfprintf+0x260>
    20ea:	20 e1       	ldi	r18, 0x10	; 16
    20ec:	32 e0       	ldi	r19, 0x02	; 2
    20ee:	f8 01       	movw	r30, r16
    20f0:	b7 fe       	sbrs	r11, 7
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <vfprintf+0x274>
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	0c 5f       	subi	r16, 0xFC	; 252
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	06 c0       	rjmp	.+12     	; 0x210e <vfprintf+0x280>
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 5f       	subi	r16, 0xFE	; 254
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	a4 01       	movw	r20, r8
    2110:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__ultoa_invert>
    2114:	a8 2e       	mov	r10, r24
    2116:	a8 18       	sub	r10, r8
    2118:	fb 2d       	mov	r31, r11
    211a:	ff 77       	andi	r31, 0x7F	; 127
    211c:	bf 2e       	mov	r11, r31
    211e:	b6 fe       	sbrs	r11, 6
    2120:	0b c0       	rjmp	.+22     	; 0x2138 <vfprintf+0x2aa>
    2122:	2b 2d       	mov	r18, r11
    2124:	2e 7f       	andi	r18, 0xFE	; 254
    2126:	a5 14       	cp	r10, r5
    2128:	50 f4       	brcc	.+20     	; 0x213e <vfprintf+0x2b0>
    212a:	b4 fe       	sbrs	r11, 4
    212c:	0a c0       	rjmp	.+20     	; 0x2142 <vfprintf+0x2b4>
    212e:	b2 fc       	sbrc	r11, 2
    2130:	08 c0       	rjmp	.+16     	; 0x2142 <vfprintf+0x2b4>
    2132:	2b 2d       	mov	r18, r11
    2134:	2e 7e       	andi	r18, 0xEE	; 238
    2136:	05 c0       	rjmp	.+10     	; 0x2142 <vfprintf+0x2b4>
    2138:	7a 2c       	mov	r7, r10
    213a:	2b 2d       	mov	r18, r11
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <vfprintf+0x2b6>
    213e:	7a 2c       	mov	r7, r10
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <vfprintf+0x2b6>
    2142:	75 2c       	mov	r7, r5
    2144:	24 ff       	sbrs	r18, 4
    2146:	0d c0       	rjmp	.+26     	; 0x2162 <vfprintf+0x2d4>
    2148:	fe 01       	movw	r30, r28
    214a:	ea 0d       	add	r30, r10
    214c:	f1 1d       	adc	r31, r1
    214e:	80 81       	ld	r24, Z
    2150:	80 33       	cpi	r24, 0x30	; 48
    2152:	11 f4       	brne	.+4      	; 0x2158 <vfprintf+0x2ca>
    2154:	29 7e       	andi	r18, 0xE9	; 233
    2156:	09 c0       	rjmp	.+18     	; 0x216a <vfprintf+0x2dc>
    2158:	22 ff       	sbrs	r18, 2
    215a:	06 c0       	rjmp	.+12     	; 0x2168 <vfprintf+0x2da>
    215c:	73 94       	inc	r7
    215e:	73 94       	inc	r7
    2160:	04 c0       	rjmp	.+8      	; 0x216a <vfprintf+0x2dc>
    2162:	82 2f       	mov	r24, r18
    2164:	86 78       	andi	r24, 0x86	; 134
    2166:	09 f0       	breq	.+2      	; 0x216a <vfprintf+0x2dc>
    2168:	73 94       	inc	r7
    216a:	23 fd       	sbrc	r18, 3
    216c:	13 c0       	rjmp	.+38     	; 0x2194 <vfprintf+0x306>
    216e:	20 ff       	sbrs	r18, 0
    2170:	06 c0       	rjmp	.+12     	; 0x217e <vfprintf+0x2f0>
    2172:	5a 2c       	mov	r5, r10
    2174:	73 14       	cp	r7, r3
    2176:	18 f4       	brcc	.+6      	; 0x217e <vfprintf+0x2f0>
    2178:	53 0c       	add	r5, r3
    217a:	57 18       	sub	r5, r7
    217c:	73 2c       	mov	r7, r3
    217e:	73 14       	cp	r7, r3
    2180:	68 f4       	brcc	.+26     	; 0x219c <vfprintf+0x30e>
    2182:	b7 01       	movw	r22, r14
    2184:	80 e2       	ldi	r24, 0x20	; 32
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	2c 87       	std	Y+12, r18	; 0x0c
    218a:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    218e:	73 94       	inc	r7
    2190:	2c 85       	ldd	r18, Y+12	; 0x0c
    2192:	f5 cf       	rjmp	.-22     	; 0x217e <vfprintf+0x2f0>
    2194:	73 14       	cp	r7, r3
    2196:	10 f4       	brcc	.+4      	; 0x219c <vfprintf+0x30e>
    2198:	37 18       	sub	r3, r7
    219a:	01 c0       	rjmp	.+2      	; 0x219e <vfprintf+0x310>
    219c:	31 2c       	mov	r3, r1
    219e:	24 ff       	sbrs	r18, 4
    21a0:	12 c0       	rjmp	.+36     	; 0x21c6 <vfprintf+0x338>
    21a2:	b7 01       	movw	r22, r14
    21a4:	80 e3       	ldi	r24, 0x30	; 48
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	2c 87       	std	Y+12, r18	; 0x0c
    21aa:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    21ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    21b0:	22 ff       	sbrs	r18, 2
    21b2:	17 c0       	rjmp	.+46     	; 0x21e2 <vfprintf+0x354>
    21b4:	21 ff       	sbrs	r18, 1
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <vfprintf+0x330>
    21b8:	88 e5       	ldi	r24, 0x58	; 88
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x334>
    21be:	88 e7       	ldi	r24, 0x78	; 120
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	b7 01       	movw	r22, r14
    21c4:	0c c0       	rjmp	.+24     	; 0x21de <vfprintf+0x350>
    21c6:	82 2f       	mov	r24, r18
    21c8:	86 78       	andi	r24, 0x86	; 134
    21ca:	59 f0       	breq	.+22     	; 0x21e2 <vfprintf+0x354>
    21cc:	21 fd       	sbrc	r18, 1
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <vfprintf+0x346>
    21d0:	80 e2       	ldi	r24, 0x20	; 32
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <vfprintf+0x348>
    21d4:	8b e2       	ldi	r24, 0x2B	; 43
    21d6:	27 fd       	sbrc	r18, 7
    21d8:	8d e2       	ldi	r24, 0x2D	; 45
    21da:	b7 01       	movw	r22, r14
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    21e2:	a5 14       	cp	r10, r5
    21e4:	38 f4       	brcc	.+14     	; 0x21f4 <vfprintf+0x366>
    21e6:	b7 01       	movw	r22, r14
    21e8:	80 e3       	ldi	r24, 0x30	; 48
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    21f0:	5a 94       	dec	r5
    21f2:	f7 cf       	rjmp	.-18     	; 0x21e2 <vfprintf+0x354>
    21f4:	aa 94       	dec	r10
    21f6:	f4 01       	movw	r30, r8
    21f8:	ea 0d       	add	r30, r10
    21fa:	f1 1d       	adc	r31, r1
    21fc:	80 81       	ld	r24, Z
    21fe:	b7 01       	movw	r22, r14
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    2206:	a1 10       	cpse	r10, r1
    2208:	f5 cf       	rjmp	.-22     	; 0x21f4 <vfprintf+0x366>
    220a:	33 20       	and	r3, r3
    220c:	09 f4       	brne	.+2      	; 0x2210 <vfprintf+0x382>
    220e:	51 ce       	rjmp	.-862    	; 0x1eb2 <vfprintf+0x24>
    2210:	b7 01       	movw	r22, r14
    2212:	80 e2       	ldi	r24, 0x20	; 32
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 2f 11 	call	0x225e	; 0x225e <fputc>
    221a:	3a 94       	dec	r3
    221c:	f6 cf       	rjmp	.-20     	; 0x220a <vfprintf+0x37c>
    221e:	f7 01       	movw	r30, r14
    2220:	86 81       	ldd	r24, Z+6	; 0x06
    2222:	97 81       	ldd	r25, Z+7	; 0x07
    2224:	02 c0       	rjmp	.+4      	; 0x222a <vfprintf+0x39c>
    2226:	8f ef       	ldi	r24, 0xFF	; 255
    2228:	9f ef       	ldi	r25, 0xFF	; 255
    222a:	2c 96       	adiw	r28, 0x0c	; 12
    222c:	e2 e1       	ldi	r30, 0x12	; 18
    222e:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__epilogue_restores__>

00002232 <strnlen_P>:
    2232:	fc 01       	movw	r30, r24
    2234:	05 90       	lpm	r0, Z+
    2236:	61 50       	subi	r22, 0x01	; 1
    2238:	70 40       	sbci	r23, 0x00	; 0
    223a:	01 10       	cpse	r0, r1
    223c:	d8 f7       	brcc	.-10     	; 0x2234 <strnlen_P+0x2>
    223e:	80 95       	com	r24
    2240:	90 95       	com	r25
    2242:	8e 0f       	add	r24, r30
    2244:	9f 1f       	adc	r25, r31
    2246:	08 95       	ret

00002248 <strnlen>:
    2248:	fc 01       	movw	r30, r24
    224a:	61 50       	subi	r22, 0x01	; 1
    224c:	70 40       	sbci	r23, 0x00	; 0
    224e:	01 90       	ld	r0, Z+
    2250:	01 10       	cpse	r0, r1
    2252:	d8 f7       	brcc	.-10     	; 0x224a <strnlen+0x2>
    2254:	80 95       	com	r24
    2256:	90 95       	com	r25
    2258:	8e 0f       	add	r24, r30
    225a:	9f 1f       	adc	r25, r31
    225c:	08 95       	ret

0000225e <fputc>:
    225e:	0f 93       	push	r16
    2260:	1f 93       	push	r17
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	18 2f       	mov	r17, r24
    2268:	09 2f       	mov	r16, r25
    226a:	eb 01       	movw	r28, r22
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	81 fd       	sbrc	r24, 1
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <fputc+0x1a>
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	9f ef       	ldi	r25, 0xFF	; 255
    2276:	20 c0       	rjmp	.+64     	; 0x22b8 <fputc+0x5a>
    2278:	82 ff       	sbrs	r24, 2
    227a:	10 c0       	rjmp	.+32     	; 0x229c <fputc+0x3e>
    227c:	4e 81       	ldd	r20, Y+6	; 0x06
    227e:	5f 81       	ldd	r21, Y+7	; 0x07
    2280:	2c 81       	ldd	r18, Y+4	; 0x04
    2282:	3d 81       	ldd	r19, Y+5	; 0x05
    2284:	42 17       	cp	r20, r18
    2286:	53 07       	cpc	r21, r19
    2288:	7c f4       	brge	.+30     	; 0x22a8 <fputc+0x4a>
    228a:	e8 81       	ld	r30, Y
    228c:	f9 81       	ldd	r31, Y+1	; 0x01
    228e:	9f 01       	movw	r18, r30
    2290:	2f 5f       	subi	r18, 0xFF	; 255
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	39 83       	std	Y+1, r19	; 0x01
    2296:	28 83       	st	Y, r18
    2298:	10 83       	st	Z, r17
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <fputc+0x4a>
    229c:	e8 85       	ldd	r30, Y+8	; 0x08
    229e:	f9 85       	ldd	r31, Y+9	; 0x09
    22a0:	81 2f       	mov	r24, r17
    22a2:	09 95       	icall
    22a4:	89 2b       	or	r24, r25
    22a6:	29 f7       	brne	.-54     	; 0x2272 <fputc+0x14>
    22a8:	2e 81       	ldd	r18, Y+6	; 0x06
    22aa:	3f 81       	ldd	r19, Y+7	; 0x07
    22ac:	2f 5f       	subi	r18, 0xFF	; 255
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	3f 83       	std	Y+7, r19	; 0x07
    22b2:	2e 83       	std	Y+6, r18	; 0x06
    22b4:	81 2f       	mov	r24, r17
    22b6:	90 2f       	mov	r25, r16
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <__ultoa_invert>:
    22c2:	fa 01       	movw	r30, r20
    22c4:	aa 27       	eor	r26, r26
    22c6:	28 30       	cpi	r18, 0x08	; 8
    22c8:	51 f1       	breq	.+84     	; 0x231e <__ultoa_invert+0x5c>
    22ca:	20 31       	cpi	r18, 0x10	; 16
    22cc:	81 f1       	breq	.+96     	; 0x232e <__ultoa_invert+0x6c>
    22ce:	e8 94       	clt
    22d0:	6f 93       	push	r22
    22d2:	6e 7f       	andi	r22, 0xFE	; 254
    22d4:	6e 5f       	subi	r22, 0xFE	; 254
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	af 4f       	sbci	r26, 0xFF	; 255
    22de:	b1 e0       	ldi	r27, 0x01	; 1
    22e0:	3e d0       	rcall	.+124    	; 0x235e <__ultoa_invert+0x9c>
    22e2:	b4 e0       	ldi	r27, 0x04	; 4
    22e4:	3c d0       	rcall	.+120    	; 0x235e <__ultoa_invert+0x9c>
    22e6:	67 0f       	add	r22, r23
    22e8:	78 1f       	adc	r23, r24
    22ea:	89 1f       	adc	r24, r25
    22ec:	9a 1f       	adc	r25, r26
    22ee:	a1 1d       	adc	r26, r1
    22f0:	68 0f       	add	r22, r24
    22f2:	79 1f       	adc	r23, r25
    22f4:	8a 1f       	adc	r24, r26
    22f6:	91 1d       	adc	r25, r1
    22f8:	a1 1d       	adc	r26, r1
    22fa:	6a 0f       	add	r22, r26
    22fc:	71 1d       	adc	r23, r1
    22fe:	81 1d       	adc	r24, r1
    2300:	91 1d       	adc	r25, r1
    2302:	a1 1d       	adc	r26, r1
    2304:	20 d0       	rcall	.+64     	; 0x2346 <__ultoa_invert+0x84>
    2306:	09 f4       	brne	.+2      	; 0x230a <__ultoa_invert+0x48>
    2308:	68 94       	set
    230a:	3f 91       	pop	r19
    230c:	2a e0       	ldi	r18, 0x0A	; 10
    230e:	26 9f       	mul	r18, r22
    2310:	11 24       	eor	r1, r1
    2312:	30 19       	sub	r19, r0
    2314:	30 5d       	subi	r19, 0xD0	; 208
    2316:	31 93       	st	Z+, r19
    2318:	de f6       	brtc	.-74     	; 0x22d0 <__ultoa_invert+0xe>
    231a:	cf 01       	movw	r24, r30
    231c:	08 95       	ret
    231e:	46 2f       	mov	r20, r22
    2320:	47 70       	andi	r20, 0x07	; 7
    2322:	40 5d       	subi	r20, 0xD0	; 208
    2324:	41 93       	st	Z+, r20
    2326:	b3 e0       	ldi	r27, 0x03	; 3
    2328:	0f d0       	rcall	.+30     	; 0x2348 <__ultoa_invert+0x86>
    232a:	c9 f7       	brne	.-14     	; 0x231e <__ultoa_invert+0x5c>
    232c:	f6 cf       	rjmp	.-20     	; 0x231a <__ultoa_invert+0x58>
    232e:	46 2f       	mov	r20, r22
    2330:	4f 70       	andi	r20, 0x0F	; 15
    2332:	40 5d       	subi	r20, 0xD0	; 208
    2334:	4a 33       	cpi	r20, 0x3A	; 58
    2336:	18 f0       	brcs	.+6      	; 0x233e <__ultoa_invert+0x7c>
    2338:	49 5d       	subi	r20, 0xD9	; 217
    233a:	31 fd       	sbrc	r19, 1
    233c:	40 52       	subi	r20, 0x20	; 32
    233e:	41 93       	st	Z+, r20
    2340:	02 d0       	rcall	.+4      	; 0x2346 <__ultoa_invert+0x84>
    2342:	a9 f7       	brne	.-22     	; 0x232e <__ultoa_invert+0x6c>
    2344:	ea cf       	rjmp	.-44     	; 0x231a <__ultoa_invert+0x58>
    2346:	b4 e0       	ldi	r27, 0x04	; 4
    2348:	a6 95       	lsr	r26
    234a:	97 95       	ror	r25
    234c:	87 95       	ror	r24
    234e:	77 95       	ror	r23
    2350:	67 95       	ror	r22
    2352:	ba 95       	dec	r27
    2354:	c9 f7       	brne	.-14     	; 0x2348 <__ultoa_invert+0x86>
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	61 05       	cpc	r22, r1
    235a:	71 05       	cpc	r23, r1
    235c:	08 95       	ret
    235e:	9b 01       	movw	r18, r22
    2360:	ac 01       	movw	r20, r24
    2362:	0a 2e       	mov	r0, r26
    2364:	06 94       	lsr	r0
    2366:	57 95       	ror	r21
    2368:	47 95       	ror	r20
    236a:	37 95       	ror	r19
    236c:	27 95       	ror	r18
    236e:	ba 95       	dec	r27
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__ultoa_invert+0xa2>
    2372:	62 0f       	add	r22, r18
    2374:	73 1f       	adc	r23, r19
    2376:	84 1f       	adc	r24, r20
    2378:	95 1f       	adc	r25, r21
    237a:	a0 1d       	adc	r26, r0
    237c:	08 95       	ret

0000237e <__prologue_saves__>:
    237e:	2f 92       	push	r2
    2380:	3f 92       	push	r3
    2382:	4f 92       	push	r4
    2384:	5f 92       	push	r5
    2386:	6f 92       	push	r6
    2388:	7f 92       	push	r7
    238a:	8f 92       	push	r8
    238c:	9f 92       	push	r9
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	ca 1b       	sub	r28, r26
    23a8:	db 0b       	sbc	r29, r27
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	09 94       	ijmp

000023b6 <__epilogue_restores__>:
    23b6:	2a 88       	ldd	r2, Y+18	; 0x12
    23b8:	39 88       	ldd	r3, Y+17	; 0x11
    23ba:	48 88       	ldd	r4, Y+16	; 0x10
    23bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    23be:	6e 84       	ldd	r6, Y+14	; 0x0e
    23c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    23c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    23c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    23c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c8:	b9 84       	ldd	r11, Y+9	; 0x09
    23ca:	c8 84       	ldd	r12, Y+8	; 0x08
    23cc:	df 80       	ldd	r13, Y+7	; 0x07
    23ce:	ee 80       	ldd	r14, Y+6	; 0x06
    23d0:	fd 80       	ldd	r15, Y+5	; 0x05
    23d2:	0c 81       	ldd	r16, Y+4	; 0x04
    23d4:	1b 81       	ldd	r17, Y+3	; 0x03
    23d6:	aa 81       	ldd	r26, Y+2	; 0x02
    23d8:	b9 81       	ldd	r27, Y+1	; 0x01
    23da:	ce 0f       	add	r28, r30
    23dc:	d1 1d       	adc	r29, r1
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	ed 01       	movw	r28, r26
    23ea:	08 95       	ret

000023ec <_exit>:
    23ec:	f8 94       	cli

000023ee <__stop_program>:
    23ee:	ff cf       	rjmp	.-2      	; 0x23ee <__stop_program>
